{
  "openapi": "3.0.3",
  "info": {
    "title": "Setu { UPI Merchant Acquirer } APIs",
    "description": "APIs exposed to help merchants get onboarded onto the platform, create a payment context and collect payments from their customers",
    "version": "1.0"
  },
  "servers": [
    {
      "url": "https://umap-uat-core.setu.co"
    },
    {
      "url": "https://umap.setu.co"
    }
  ],
  "paths": {
    "/api/v1/aggregators/merchants": {
      "post": {
        "tags": [
          "merchant"
        ],
        "summary": "(Aggregator) Setup a merchant",
        "description": "API to be used by an aggregator to setup a merchant on our platform",
        "operationId": "merchant#createMerchantWrapper",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateMerchantWrapperRequestBody"
              },
              "example": {
                "acceptDeemedTxns": true,
                "aggregatorAccountId": "328a928f-e277-4798-8e28-4b19a61a8a23",
                "businessName": "Setu",
                "businessType": "PROPRIETARY",
                "franchiseName": "Setu UPI",
                "genre": "ONLINE",
                "legalName": "BrokenTusk Technologies Pvt Ltd",
                "mcc": "5432",
                "merchantName": "Dolor doloribus et ea minima officiis eos.",
                "merchantType": "large",
                "onboardingType": "aggregator",
                "paymentModes": [
                  "saving",
                  "lite",
                  "erupi",
                  "rupay_cc",
                  "ppi",
                  "current",
                  "nro",
                  "nre"
                ],
                "productAccountId": "328a928f-e277-4798-8e28-4b19a61a8a22",
                "products": [
                  "pay_single",
                  "pay_multi",
                  "tpv",
                  "tpv_plus",
                  "intent_autopay"
                ],
                "settlement": {
                  "cycles": [
                    "Quo et unde.",
                    "Ipsum aliquid ea necessitatibus.",
                    "Corrupti harum modi suscipit.",
                    "Id magni repudiandae."
                  ],
                  "frequency": "TPlusOne",
                  "isEnabled": true,
                  "onhold": true,
                  "payoutAdjustable": true,
                  "reconRequired": false,
                  "type": "Gross",
                  "types": [
                    "Gross",
                    "Net",
                    "Direct"
                  ]
                },
                "settlementTransfers": "Fuga temporibus voluptas modi aspernatur est.",
                "standardAccountId": "328a928f-e277-4798-8e28-4b19a61a8a22",
                "vpaHandles": [
                  "pineaxis"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created response.",
            "headers": {
              "requestId": {
                "schema": {
                  "type": "string",
                  "example": "cjqml1f2e5ocq2mesej0"
                },
                "example": "cjqml1f2e5ocq2mesej0"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompactMerchantResponse"
                },
                "example": {
                  "acceptDeemedTxns": true,
                  "businessName": "Setu",
                  "businessType": "PROPRIETARY",
                  "createdAt": "2024-05-17T19:17:32+05:30",
                  "franchiseName": "Setu UPI",
                  "genre": "ONLINE",
                  "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "legalName": "BrokenTusk Technologies Pvt Ltd",
                  "mcc": "5432",
                  "merchantName": "Ipsum sed fugit iure.",
                  "merchantType": "large",
                  "onboardingType": "aggregator",
                  "paymentModes": [
                    "saving",
                    "lite",
                    "erupi",
                    "rupay_cc",
                    "ppi",
                    "current",
                    "nro",
                    "nre"
                  ],
                  "products": [
                    "pay_single",
                    "pay_multi",
                    "tpv",
                    "tpv_plus",
                    "intent_autopay"
                  ],
                  "route": {
                    "chargeTransfer": [
                      {
                        "accountIfsc": "Consequatur officia.",
                        "accountNumber": "Asperiores qui.",
                        "remarks": "Nihil est doloremque et voluptatem quas.",
                        "value": 0.5209121384380389
                      },
                      {
                        "accountIfsc": "Consequatur officia.",
                        "accountNumber": "Asperiores qui.",
                        "remarks": "Nihil est doloremque et voluptatem quas.",
                        "value": 0.5209121384380389
                      }
                    ],
                    "chargeTransferType": "Percentage",
                    "ownerId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                    "ownerType": "merchant",
                    "transferType": "Percentage",
                    "transfers": [
                      {
                        "accountIfsc": "Suscipit cumque iste molestiae cumque.",
                        "accountNumber": "Officiis et explicabo voluptatem nesciunt.",
                        "remarks": "Veniam sit inventore modi modi qui.",
                        "value": 0.03737973982778193
                      },
                      {
                        "accountIfsc": "Suscipit cumque iste molestiae cumque.",
                        "accountNumber": "Officiis et explicabo voluptatem nesciunt.",
                        "remarks": "Veniam sit inventore modi modi qui.",
                        "value": 0.03737973982778193
                      },
                      {
                        "accountIfsc": "Suscipit cumque iste molestiae cumque.",
                        "accountNumber": "Officiis et explicabo voluptatem nesciunt.",
                        "remarks": "Veniam sit inventore modi modi qui.",
                        "value": 0.03737973982778193
                      }
                    ]
                  },
                  "settlement": {
                    "cycles": [
                      "Ea modi.",
                      "Nihil dolor exercitationem dolorem aut.",
                      "Amet maxime dolor labore eum."
                    ],
                    "frequency": "TPlusOne",
                    "isEnabled": true,
                    "onhold": true,
                    "payoutAdjustable": true,
                    "reconRequired": false,
                    "type": "Gross",
                    "types": [
                      "Gross",
                      "Net",
                      "Direct"
                    ]
                  },
                  "settlementTransfers": "Ipsum expedita aut.",
                  "transactionStatus": "active",
                  "vpaHandles": [
                    "pineaxis"
                  ],
                  "vpaPrefix": "acmecorp.*"
                }
              }
            }
          },
          "400": {
            "description": "Bad request: Bad Request response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized: Unauthorized response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error: Internal Server Error response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt_header_Authorization": []
          }
        ]
      }
    },
    "/api/v1/merchants/beneficiary-accounts": {
      "get": {
        "tags": [
          "beneficiary-account"
        ],
        "summary": "List all beneficiary accounts",
        "description": "List all beneficiary accounts",
        "operationId": "beneficiary-account#list",
        "parameters": [
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor to the current page",
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "description": "Cursor to the current page",
              "example": "MDFBUlozTkRFS1RTVjRSUkZGUTY5RzVGQVY="
            },
            "example": "MDFBUlozTkRFS1RTVjRSUkZGUTY5RzVGQVY="
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of records to be shown in a page",
            "allowEmptyValue": true,
            "schema": {
              "type": "integer",
              "description": "Number of records to be shown in a page",
              "default": 10,
              "example": 10,
              "minimum": 1,
              "maximum": 50
            },
            "example": 10
          },
          {
            "name": "merchantId",
            "in": "header",
            "description": "Id associated with the merchant on our platform",
            "allowEmptyValue": true,
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id associated with the merchant on our platform",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "headers": {
              "requestId": {
                "schema": {
                  "type": "string",
                  "example": "cjqml1f2e5ocq2mesej0"
                },
                "example": "cjqml1f2e5ocq2mesej0"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListBeneficiaryAccountResponse"
                },
                "example": {
                  "meta": {
                    "cursor": {
                      "current": "MDFBUlozTkRFS1RTVjRSUkZGUTY5RzVGQVY=",
                      "next": "MDFBUlozTkRFS1RTVjRSUkZGUTY5RzVGQVY=",
                      "previous": "MDFBUlozTkRFS1RTVjRSUkZGUTY5RzVGQVY="
                    },
                    "filter": [
                      "name:foo"
                    ],
                    "limit": 10,
                    "totalRecords": 2142477528
                  },
                  "settlementAccounts": [
                    {
                      "accountHolderName": "deku",
                      "accountNumber": "1234567890",
                      "accountType": "CURRENT",
                      "beneCode": "1234567890",
                      "checkedRegistrationStatusAt": "2024-05-17T19:17:32+05:30",
                      "createdAt": "2024-05-17T19:17:32+05:30",
                      "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                      "ifsc": "HDFC0000001",
                      "isActive": true,
                      "isVerified": true,
                      "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                      "paymentMode": "NEFT",
                      "registrationFailureReason": {
                        "code": "16",
                        "desc": "Invalid account ifsc code"
                      },
                      "registrationStatus": "not_initiated"
                    },
                    {
                      "accountHolderName": "deku",
                      "accountNumber": "1234567890",
                      "accountType": "CURRENT",
                      "beneCode": "1234567890",
                      "checkedRegistrationStatusAt": "2024-05-17T19:17:32+05:30",
                      "createdAt": "2024-05-17T19:17:32+05:30",
                      "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                      "ifsc": "HDFC0000001",
                      "isActive": true,
                      "isVerified": true,
                      "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                      "paymentMode": "NEFT",
                      "registrationFailureReason": {
                        "code": "16",
                        "desc": "Invalid account ifsc code"
                      },
                      "registrationStatus": "not_initiated"
                    },
                    {
                      "accountHolderName": "deku",
                      "accountNumber": "1234567890",
                      "accountType": "CURRENT",
                      "beneCode": "1234567890",
                      "checkedRegistrationStatusAt": "2024-05-17T19:17:32+05:30",
                      "createdAt": "2024-05-17T19:17:32+05:30",
                      "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                      "ifsc": "HDFC0000001",
                      "isActive": true,
                      "isVerified": true,
                      "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                      "paymentMode": "NEFT",
                      "registrationFailureReason": {
                        "code": "16",
                        "desc": "Invalid account ifsc code"
                      },
                      "registrationStatus": "not_initiated"
                    },
                    {
                      "accountHolderName": "deku",
                      "accountNumber": "1234567890",
                      "accountType": "CURRENT",
                      "beneCode": "1234567890",
                      "checkedRegistrationStatusAt": "2024-05-17T19:17:32+05:30",
                      "createdAt": "2024-05-17T19:17:32+05:30",
                      "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                      "ifsc": "HDFC0000001",
                      "isActive": true,
                      "isVerified": true,
                      "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                      "paymentMode": "NEFT",
                      "registrationFailureReason": {
                        "code": "16",
                        "desc": "Invalid account ifsc code"
                      },
                      "registrationStatus": "not_initiated"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad request: Bad Request response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized: Unauthorized response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not found: Not Found response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error: Internal Server Error response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt_header_Authorization": []
          }
        ]
      },
      "post": {
        "tags": [
          "beneficiary-account"
        ],
        "summary": "Register a beneficiary account",
        "description": "Register a beneficiary account to funds will be settled",
        "operationId": "beneficiary-account#create",
        "parameters": [
          {
            "name": "merchantId",
            "in": "header",
            "description": "Id associated with the merchant on our platform",
            "allowEmptyValue": true,
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id associated with the merchant on our platform",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "examples": {
              "default": {
                "summary": "default",
                "value": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
              }
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRequestBody4"
              },
              "example": {
                "accountHolderName": "deku",
                "accountNumber": "1234567890",
                "accountType": "CURRENT",
                "ifsc": "HDFC0000001"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created response.",
            "headers": {
              "requestId": {
                "schema": {
                  "type": "string",
                  "example": "cjqml1f2e5ocq2mesej0"
                },
                "example": "cjqml1f2e5ocq2mesej0"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BeneficiaryAccountResponse"
                },
                "example": {
                  "accountHolderName": "deku",
                  "accountNumber": "1234567890",
                  "accountType": "CURRENT",
                  "beneCode": "1234567890",
                  "checkedRegistrationStatusAt": "2024-05-17T19:17:32+05:30",
                  "createdAt": "2024-05-17T19:17:32+05:30",
                  "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "ifsc": "HDFC0000001",
                  "isActive": true,
                  "isVerified": true,
                  "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "paymentMode": "NEFT",
                  "registrationFailureReason": {
                    "code": "16",
                    "desc": "Invalid account ifsc code"
                  },
                  "registrationStatus": "not_initiated"
                }
              }
            }
          },
          "400": {
            "description": "Bad request: Bad Request response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized: Unauthorized response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not found: Not Found response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error: Internal Server Error response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt_header_Authorization": []
          }
        ]
      }
    },
    "/api/v1/merchants/beneficiary-accounts/{id}": {
      "get": {
        "tags": [
          "beneficiary-account"
        ],
        "summary": "Fetch a beneficiary account by id",
        "description": "Fetch a beneficiary account by id",
        "operationId": "beneficiary-account#fetchById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the resource, which is the same the id returned in the Create \u003cresource\u003e API response",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id of the resource, which is the same the id returned in the Create \u003cresource\u003e API response",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          {
            "name": "merchantId",
            "in": "header",
            "description": "Id associated with the merchant on our platform",
            "allowEmptyValue": true,
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id associated with the merchant on our platform",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "examples": {
              "default": {
                "summary": "default",
                "value": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "headers": {
              "requestId": {
                "schema": {
                  "type": "string",
                  "example": "cjqml1f2e5ocq2mesej0"
                },
                "example": "cjqml1f2e5ocq2mesej0"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BeneficiaryAccountResponse"
                },
                "example": {
                  "accountHolderName": "deku",
                  "accountNumber": "1234567890",
                  "accountType": "CURRENT",
                  "beneCode": "1234567890",
                  "checkedRegistrationStatusAt": "2024-05-17T19:17:32+05:30",
                  "createdAt": "2024-05-17T19:17:32+05:30",
                  "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "ifsc": "HDFC0000001",
                  "isActive": true,
                  "isVerified": true,
                  "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "paymentMode": "NEFT",
                  "registrationFailureReason": {
                    "code": "16",
                    "desc": "Invalid account ifsc code"
                  },
                  "registrationStatus": "not_initiated"
                }
              }
            }
          },
          "400": {
            "description": "Bad request: Bad Request response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized: Unauthorized response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not found: Not Found response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error: Internal Server Error response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt_header_Authorization": []
          }
        ]
      }
    },
    "/api/v1/merchants/beneficiary-accounts/{id}/status": {
      "put": {
        "tags": [
          "beneficiary-account"
        ],
        "summary": "Update beneficiary account status",
        "description": "Update the beneficiary account status to active/ inactive",
        "operationId": "beneficiary-account#update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the resource, which is the same the id returned in the Create \u003cresource\u003e API response",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id of the resource, which is the same the id returned in the Create \u003cresource\u003e API response",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "examples": {
              "default": {
                "summary": "default",
                "value": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
              }
            }
          },
          {
            "name": "merchantId",
            "in": "header",
            "description": "Id associated with the merchant on our platform",
            "allowEmptyValue": true,
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id associated with the merchant on our platform",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "examples": {
              "default": {
                "summary": "default",
                "value": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
              }
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRequestBody"
              },
              "example": {
                "active": true
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK response.",
            "headers": {
              "requestId": {
                "schema": {
                  "type": "string",
                  "example": "cjqml1f2e5ocq2mesej0"
                },
                "example": "cjqml1f2e5ocq2mesej0"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BeneficiaryAccountResponse"
                },
                "example": {
                  "accountHolderName": "deku",
                  "accountNumber": "1234567890",
                  "accountType": "CURRENT",
                  "beneCode": "1234567890",
                  "checkedRegistrationStatusAt": "2024-05-17T19:17:32+05:30",
                  "createdAt": "2024-05-17T19:17:32+05:30",
                  "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "ifsc": "HDFC0000001",
                  "isActive": true,
                  "isVerified": true,
                  "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "paymentMode": "NEFT",
                  "registrationFailureReason": {
                    "code": "16",
                    "desc": "Invalid account ifsc code"
                  },
                  "registrationStatus": "not_initiated"
                }
              }
            }
          },
          "400": {
            "description": "Bad request: Bad Request response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized: Unauthorized response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not found: Not Found response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error: Internal Server Error response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt_header_Authorization": []
          }
        ]
      }
    },
    "/api/v1/merchants/collect": {
      "post": {
        "tags": [
          "collect"
        ],
        "summary": "Create and invoke a collect request",
        "description": "API to create and send a collect request to a customer's UPI id",
        "operationId": "collect#create",
        "parameters": [
          {
            "name": "merchantId",
            "in": "header",
            "description": "Id associated with the merchant on our platform",
            "allowEmptyValue": true,
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id associated with the merchant on our platform",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRequestBody"
              },
              "example": {
                "amount": 10000,
                "customerVpa": "aadhitya@okaxis",
                "expireAfter": 2,
                "merchantVpa": "fastestupi@pineaxis",
                "metadata": {
                  "InvoiceNumber": "INV-21-12-009"
                },
                "referenceId": "1240689979139556557",
                "transactionNote": "Payment for loan repayment"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created response.",
            "headers": {
              "requestId": {
                "schema": {
                  "type": "string",
                  "example": "cjqml1f2e5ocq2mesej0"
                },
                "example": "cjqml1f2e5ocq2mesej0"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateCollectResponse"
                },
                "example": {
                  "amount": 10000,
                  "closedAt": "2024-05-17T19:17:32+05:30",
                  "createdAt": "2024-05-17T19:17:32+05:30",
                  "customerVpa": "aadhitya@okaxis",
                  "expireAfter": 2,
                  "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "merchantVpa": "fastestupi@pineaxis",
                  "metadata": {
                    "InvoiceNumber": "INV-21-12-009"
                  },
                  "refId": "1240689979139556558",
                  "referenceId": "1240689979139556557",
                  "status": "active",
                  "transactionNote": "Payment for loan repayment"
                }
              }
            }
          },
          "400": {
            "description": "Bad request: Bad Request response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Forbidden response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not found: Not Found response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error: Internal Server Error response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt_header_Authorization": []
          }
        ]
      }
    },
    "/api/v1/merchants/collect/{id}": {
      "get": {
        "tags": [
          "collect"
        ],
        "summary": "Fetch collect request by id",
        "description": "API to check the current status of a collect request",
        "operationId": "collect#fetchById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the resource, which is the same the id returned in the Create \u003cresource\u003e API response",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id of the resource, which is the same the id returned in the Create \u003cresource\u003e API response",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          {
            "name": "merchantId",
            "in": "header",
            "description": "Id associated with the merchant on our platform",
            "allowEmptyValue": true,
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id associated with the merchant on our platform",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "headers": {
              "requestId": {
                "schema": {
                  "type": "string",
                  "example": "cjqml1f2e5ocq2mesej0"
                },
                "example": "cjqml1f2e5ocq2mesej0"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FetchCollectResponse"
                },
                "example": {
                  "amount": 10000,
                  "closedAt": "2024-05-17T19:17:32+05:30",
                  "createdAt": "2024-05-17T19:17:32+05:30",
                  "customerVpa": "aadhitya@okaxis",
                  "expireAfter": 2,
                  "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "merchantVpa": "fastestupi@pineaxis",
                  "metadata": {
                    "InvoiceNumber": "INV-21-12-009"
                  },
                  "paymentDetails": {
                    "customerAccountType": "SAVINGS",
                    "customerVpa": "test-auto-tyvmm59i9b@okokaxis",
                    "paymentId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                    "paymentStatus": "initiated",
                    "rrn": "124068997913",
                    "txnId": "SETmBZkQOV0M7wyyP1V4PIFhRSzW5eSjmYI",
                    "txnTs": "2024-06-17T19:17:32+05:30"
                  },
                  "reason": {
                    "code": "unable-to-fulfill-request",
                    "desc": "unable-to-fulfill-request",
                    "mandateRevokeReason": "merchant-initiated",
                    "npciErrCategory": "TD",
                    "npciErrCode": "YG",
                    "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
                    "npciRespCode": "YG",
                    "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)",
                    "setuDescription": "Merchant PSP error",
                    "suggestedAction": "Merchant PSP error"
                  },
                  "refId": "1240689979139556558",
                  "referenceId": "1240689979139556557",
                  "status": "active",
                  "transactionNote": "Payment for loan repayment"
                }
              }
            }
          },
          "400": {
            "description": "Bad request: Bad Request response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Forbidden response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not found: Not Found response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error: Internal Server Error response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt_header_Authorization": []
          }
        ]
      }
    },
    "/api/v1/merchants/customer-vpas/mock/verify": {
      "post": {
        "tags": [
          "customer-vpa"
        ],
        "summary": "Mock a customer vpa verification",
        "description": "API to mock a customer vpa verification as if its done by a customer on a payer PSP",
        "operationId": "customer-vpa#DoCustomerVpaVerification",
        "parameters": [
          {
            "name": "merchantId",
            "in": "header",
            "allowEmptyValue": true,
            "required": true,
            "schema": {
              "type": "string",
              "example": "Non necessitatibus nesciunt et eum assumenda."
            },
            "example": "Ea odio et."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DoCustomerVpaVerificationRequestBody"
              },
              "example": {
                "id": "At quia.",
                "status": "failed"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK response.",
            "headers": {
              "requestId": {
                "schema": {
                  "type": "string",
                  "example": "cjqml1f2e5ocq2mesej0"
                },
                "example": "cjqml1f2e5ocq2mesej0"
              }
            }
          },
          "400": {
            "description": "Bad request: Bad Request response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Forbidden response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not found: Not Found response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error: Internal Server Error response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt_header_Authorization": []
          }
        ]
      }
    },
    "/api/v1/merchants/customer-vpas/verify": {
      "post": {
        "tags": [
          "customer-vpa"
        ],
        "summary": "Verify a customer's UPI id",
        "description": "API to verify whether a customer's UPI id exists and can be verified",
        "operationId": "customer-vpa#verify",
        "parameters": [
          {
            "name": "merchantId",
            "in": "header",
            "description": "Id associated with the merchant on our platform",
            "allowEmptyValue": true,
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id associated with the merchant on our platform",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VerifyRequestBody"
              },
              "example": {
                "customerVpa": "aadhitya@okhdfc",
                "referenceId": "1240689979139556557"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK response.",
            "headers": {
              "requestId": {
                "schema": {
                  "type": "string",
                  "example": "cjqml1f2e5ocq2mesej0"
                },
                "example": "cjqml1f2e5ocq2mesej0"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VerifyCustomerVpaResponse"
                },
                "example": {
                  "createdAt": "2024-05-17T19:17:32+05:30",
                  "customerVpa": "ram@okhdfc",
                  "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "referenceId": "1240689979139556557",
                  "status": "pending"
                }
              }
            }
          },
          "400": {
            "description": "Bad request: Bad Request response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Forbidden response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not found: Not Found response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error: Internal Server Error response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt_header_Authorization": []
          }
        ]
      }
    },
    "/api/v1/merchants/customer-vpas/verify/{id}": {
      "get": {
        "tags": [
          "customer-vpa"
        ],
        "summary": "Fetch customer VPA verification record by id",
        "description": "Check customer vpa verification status",
        "operationId": "customer-vpa#fetchById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the request",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of the request",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          {
            "name": "merchantId",
            "in": "header",
            "description": "Id associated with the merchant on our platform",
            "allowEmptyValue": true,
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id associated with the merchant on our platform",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "headers": {
              "requestId": {
                "schema": {
                  "type": "string",
                  "example": "cjqml1f2e5ocq2mesej0"
                },
                "example": "cjqml1f2e5ocq2mesej0"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FetchCustomerVpaByIDResponse"
                },
                "example": {
                  "createdAt": "2024-05-17T19:17:32+05:30",
                  "customerAccountType": "SAVINGS",
                  "customerVpa": "ram@okhdfc",
                  "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "reason": {
                    "code": "unable-to-fulfill-request",
                    "desc": "unable-to-fulfill-request",
                    "mandateRevokeReason": "merchant-initiated",
                    "npciErrCategory": "TD",
                    "npciErrCode": "YG",
                    "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
                    "npciRespCode": "YG",
                    "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)",
                    "setuDescription": "Merchant PSP error",
                    "suggestedAction": "Merchant PSP error"
                  },
                  "referenceId": "1240689979139556557",
                  "status": "pending"
                }
              }
            }
          },
          "400": {
            "description": "Bad request: Bad Request response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Forbidden response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not found: Not Found response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error: Internal Server Error response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt_header_Authorization": []
          }
        ]
      }
    },
    "/api/v1/merchants/dqr": {
      "post": {
        "tags": [
          "dqr"
        ],
        "summary": "Create dynamic QR (single use)",
        "description": "API to create a dynamic QR which can be used make a one time payment by the customer",
        "operationId": "dqr#create",
        "parameters": [
          {
            "name": "merchantId",
            "in": "header",
            "description": "Id associated with the merchant on our platform",
            "allowEmptyValue": true,
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id associated with the merchant on our platform",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRequestBody2"
              },
              "example": {
                "amount": 10000,
                "expiryDate": "2024-06-17T19:17:32+05:30",
                "merchantVpa": "fastestupi@pineaxis",
                "metadata": {
                  "Cumque modi cupiditate totam.": "Sapiente est ullam.",
                  "Inventore et et ea eum iste.": "Id minus magnam rerum saepe.",
                  "Qui temporibus optio deleniti velit.": "Aperiam qui harum excepturi."
                },
                "minAmount": 1000,
                "referenceId": "1240689979139556557",
                "transactionNote": "testpay"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created response.",
            "headers": {
              "requestId": {
                "schema": {
                  "type": "string",
                  "example": "cjqml1f2e5ocq2mesej0"
                },
                "example": "cjqml1f2e5ocq2mesej0"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateDqrResponse"
                },
                "example": {
                  "amount": 10000,
                  "createdAt": "2024-05-17T19:17:32+05:30",
                  "expiryDate": "2024-06-17T19:17:32+05:30",
                  "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "intentLink": "upi://pay?pa=test-auto-pgruosncak@okokaxis\u0026pn=merchant-4\u0026am=100.00\u0026tr=SU1240659756905923780\u0026tn=sample%20single%20use%20qr\u0026cu=INR\u0026mc=1234",
                  "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "merchantVpa": "fastestupi@pineaxis",
                  "metadata": {
                    "Beatae eum autem quia perferendis incidunt ab.": "Eos voluptates dolores.",
                    "Eum et.": "Inventore dignissimos saepe occaecati possimus neque consequatur.",
                    "Voluptatem itaque repudiandae.": "Autem numquam ut aut in nobis."
                  },
                  "minAmount": 1000,
                  "qrCode": "",
                  "refId": "1240689979139556558",
                  "referenceId": "1240689979139556557",
                  "shortLink": "upipay.setu.co/Np3KnBCM8Om0",
                  "status": "active",
                  "transactionNote": "testpay"
                }
              }
            }
          },
          "400": {
            "description": "Bad request: Bad Request response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Forbidden response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not found: Not Found response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error: Internal Server Error response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt_header_Authorization": []
          }
        ]
      }
    },
    "/api/v1/merchants/dqr/{id}": {
      "get": {
        "tags": [
          "dqr"
        ],
        "summary": "Fetch dynamic QR by id",
        "description": "API to fetch the current status of the dynamic QR using the id of the dqr resource",
        "operationId": "dqr#fetchById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the resource, which is the same the id returned in the Create \u003cresource\u003e API response",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id of the resource, which is the same the id returned in the Create \u003cresource\u003e API response",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          {
            "name": "merchantId",
            "in": "header",
            "description": "Id associated with the merchant on our platform",
            "allowEmptyValue": true,
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id associated with the merchant on our platform",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "headers": {
              "requestId": {
                "schema": {
                  "type": "string",
                  "example": "cjqml1f2e5ocq2mesej0"
                },
                "example": "cjqml1f2e5ocq2mesej0"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FetchDqrByIDResponse"
                },
                "example": {
                  "amount": 10000,
                  "closedAt": "2024-06-17T19:17:32+05:30",
                  "createdAt": "2024-05-17T19:17:32+05:30",
                  "expiryDate": "2024-06-17T19:17:32+05:30",
                  "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "intentLink": "upi://pay?pa=test-auto-pgruosncak@okokaxis\u0026pn=merchant-4\u0026am=100.00\u0026tr=SU1240659756905923780\u0026tn=sample%20single%20use%20qr\u0026cu=INR\u0026mc=1234",
                  "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "merchantVpa": "fastestupi@pineaxis",
                  "metadata": {
                    "Fuga est.": "Est eum illo illum voluptatum quia.",
                    "Ut cupiditate impedit eos consequuntur quae sunt.": "Enim a est.",
                    "Voluptatem culpa et ducimus in expedita.": "Velit consequatur voluptatem."
                  },
                  "minAmount": 1000,
                  "paymentDetails": {
                    "customerAccountType": "SAVINGS",
                    "customerVpa": "test-auto-tyvmm59i9b@okokaxis",
                    "paymentId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                    "paymentStatus": "initiated",
                    "rrn": "124068997913",
                    "txnId": "SETmBZkQOV0M7wyyP1V4PIFhRSzW5eSjmYI",
                    "txnTs": "2024-06-17T19:17:32+05:30"
                  },
                  "qrCode": "",
                  "reason": {
                    "code": "unable-to-fulfill-request",
                    "desc": "unable-to-fulfill-request",
                    "mandateRevokeReason": "merchant-initiated",
                    "npciErrCategory": "TD",
                    "npciErrCode": "YG",
                    "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
                    "npciRespCode": "YG",
                    "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)",
                    "setuDescription": "Merchant PSP error",
                    "suggestedAction": "Merchant PSP error"
                  },
                  "refId": "1240689979139556558",
                  "referenceId": "1240689979139556557",
                  "shortLink": "upipay.setu.co/Np3KnBCM8Om0",
                  "status": "active",
                  "transactionNote": "testpay"
                }
              }
            }
          },
          "400": {
            "description": "Bad request: Bad Request response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Forbidden response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not found: Not Found response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error: Internal Server Error response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt_header_Authorization": []
          }
        ]
      }
    },
    "/api/v1/merchants/dqr/{id}/expire": {
      "put": {
        "tags": [
          "dqr"
        ],
        "summary": "Expire dynamic QR by id",
        "description": "API to expire the dynamic QR using the id of the dqr resource",
        "operationId": "dqr#expireById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Et sunt occaecati ipsam quia voluptatem et."
            },
            "example": "Nobis odio omnis necessitatibus minus."
          },
          {
            "name": "merchantId",
            "in": "header",
            "allowEmptyValue": true,
            "required": true,
            "schema": {
              "type": "string",
              "example": "Est quis enim explicabo cum non."
            },
            "example": "Quia ad consequuntur consequatur."
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "headers": {
              "requestId": {
                "schema": {
                  "type": "string",
                  "example": "cjqml1f2e5ocq2mesej0"
                },
                "example": "cjqml1f2e5ocq2mesej0"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExpireDqrByIDResponse"
                },
                "example": {
                  "amount": 10000,
                  "closedAt": "2024-06-17T19:17:32+05:30",
                  "createdAt": "2024-05-17T19:17:32+05:30",
                  "expiryDate": "2024-06-17T19:17:32+05:30",
                  "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "intentLink": "upi://pay?pa=test-auto-pgruosncak@okokaxis\u0026pn=merchant-4\u0026am=100.00\u0026tr=SU1240659756905923780\u0026tn=sample%20single%20use%20qr\u0026cu=INR\u0026mc=1234",
                  "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "merchantVpa": "fastestupi@pineaxis",
                  "metadata": {
                    "Dignissimos nulla reiciendis ut et nam sunt.": "Minus impedit possimus voluptatem dignissimos.",
                    "Hic impedit qui voluptatem.": "Fugit quas quisquam voluptatem.",
                    "In quas nobis.": "Omnis voluptates maiores nihil quo."
                  },
                  "minAmount": 1000,
                  "qrCode": "",
                  "reason": {
                    "code": "unable-to-fulfill-request",
                    "desc": "unable-to-fulfill-request",
                    "mandateRevokeReason": "merchant-initiated",
                    "npciErrCategory": "TD",
                    "npciErrCode": "YG",
                    "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
                    "npciRespCode": "YG",
                    "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)",
                    "setuDescription": "Merchant PSP error",
                    "suggestedAction": "Merchant PSP error"
                  },
                  "refId": "1240689979139556558",
                  "referenceId": "1240689979139556557",
                  "shortLink": "upipay.setu.co/Np3KnBCM8Om0",
                  "status": "active",
                  "transactionNote": "testpay"
                }
              }
            }
          },
          "400": {
            "description": "Bad request: Bad Request response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Forbidden response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not found: Not Found response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error: Internal Server Error response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt_header_Authorization": []
          }
        ]
      }
    },
    "/api/v1/merchants/mandates": {
      "post": {
        "tags": [
          "mandates"
        ],
        "summary": "Create mandate",
        "description": "API to create a mandate request for subscription based payments",
        "operationId": "mandates#create",
        "parameters": [
          {
            "name": "merchantId",
            "in": "header",
            "description": "Id of the merchant who is trying create the mandate",
            "allowEmptyValue": true,
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id of the merchant who is trying create the mandate",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          {
            "name": "mock",
            "in": "header",
            "description": "If true, mock the API call",
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "description": "If true, mock the API call",
              "default": "true",
              "example": "Harum tenetur dolorem enim dolor et ipsum."
            },
            "example": "Veritatis incidunt ut praesentium labore cumque odit."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRequestBody7"
              },
              "example": {
                "allowMultipleDebit": true,
                "amount": 1000,
                "amountRule": "max",
                "autoExecute": true,
                "autoPreNotify": true,
                "autoRefundFirstExecutionAmount": false,
                "blockFunds": true,
                "creationMode": "qr",
                "currency": "INR",
                "customerRevocable": false,
                "customerVpa": "ram@axis",
                "endDate": "02012008",
                "expireAfter": 2,
                "firstExecutionAmount": 1000,
                "frequency": "monthly",
                "ifscMatchType": "CompleteIFSCMatch",
                "initiationMode": "00",
                "merchantVpa": "fastestupi@pineaxis",
                "purpose": "14",
                "recurrenceRule": "on",
                "recurrenceValue": 1,
                "referenceId": "ABC1234789",
                "shareToPayee": false,
                "showFirstExecutionAmountToPayer": false,
                "startDate": "02012006",
                "transactionNote": "Transaction note"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created response.",
            "headers": {
              "requestId": {
                "schema": {
                  "type": "string",
                  "example": "cjqml1f2e5ocq2mesej0"
                },
                "example": "cjqml1f2e5ocq2mesej0"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateMandateResponse"
                },
                "example": {
                  "allowMultipleDebit": true,
                  "amount": 1000,
                  "amountRule": "max",
                  "autoExecute": true,
                  "autoPreNotify": true,
                  "autoRefundFirstExecutionAmount": false,
                  "blockFunds": true,
                  "createdAt": "2024-05-17T19:17:32+05:30",
                  "creationMode": "qr",
                  "currency": "INR",
                  "customerRevocable": true,
                  "customerVpa": "ram@axis",
                  "endDate": "02012008",
                  "expireAfter": 2,
                  "firstExecutionAmount": 1000,
                  "frequency": "monthly",
                  "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "initiationMode": "00",
                  "intentLink": "upi://mandate?pa=deku040920232@okokaxis\u0026pn=merchant-1\u0026validitystart=31121995\u0026validityend=31121996\u0026am=100.00\u0026amrule=MAX\u0026recur=one%20time\u0026recurvalue=0\u0026recurtype=on\u0026tr=SETgv8wOOCElAtpzfbAEXqcKvN8QPfunAhI\u0026cu=INR\u0026mc=1234\u0026mode=04\u0026purpose=14\u0026rev=N\u0026share=Y\u0026qrexpire=04092023\u0026block=N\u0026orgid=000000\u0026version=2.0\u0026txnType=create\u0026tid=SETgv8wOOCElAtpzfbAEXqcKvN8QPfunAhI",
                  "maxAmountLimit": 1000,
                  "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "merchantVpa": "fastestupi@pineaxis",
                  "purpose": "14",
                  "qrCode": "",
                  "recurrenceRule": "on",
                  "recurrenceValue": 1,
                  "referenceId": "ABC1234789",
                  "shareToPayee": false,
                  "shortCode": "TlNssqA7wlZC",
                  "shortLink": "https://upi.setu.pe/TlNssqA7wlZC",
                  "showFirstExecutionAmountToPayer": false,
                  "startDate": "02012006",
                  "status": "pending",
                  "transactionNote": "Transaction note",
                  "txnId": "BTTZrc5gDFkuCr3n3I0ey4aNtzLOLR7K7aR"
                }
              }
            }
          },
          "400": {
            "description": "Bad request: Bad Request response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized: Unauthorized response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not found: Not Found response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error: Internal Server Error response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt_header_Authorization": []
          }
        ]
      }
    },
    "/api/v1/merchants/mandates/mock": {
      "post": {
        "tags": [
          "mandates"
        ],
        "summary": "Mock mandate",
        "description": "API to mock different mandate operations",
        "operationId": "mandates#mockMandate",
        "parameters": [
          {
            "name": "merchantId",
            "in": "header",
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "example": "Magnam a est."
            },
            "example": "Sint sapiente sed nobis."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MockMandateRequestBody"
              },
              "example": {
                "failureType": "type-1",
                "id": "01J54G9QCFW4FE6JXKJ9QK3FTD",
                "mandateId": "01J54G9QCFW4FE6JXKJ9QK3FTD",
                "operation": "create",
                "payerAccountName": "Velit quis ut.",
                "payerAccountNo": "Occaecati ut itaque facilis autem ut quod.",
                "payerIfsc": "Reprehenderit voluptas quia eum.",
                "payerRespCode": "Est qui adipisci distinctio eum expedita.",
                "seqNumber": 296703447953511418,
                "status": "success"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusRequestBody"
                },
                "example": {
                  "status": "failure"
                }
              }
            }
          },
          "400": {
            "description": "Bad request: Bad Request response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized: Unauthorized response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not found: Not Found response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error: Internal Server Error response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt_header_Authorization": []
          }
        ]
      }
    },
    "/api/v1/merchants/mandates/tpv": {
      "post": {
        "tags": [
          "mandates"
        ],
        "summary": "Create mandate",
        "description": "API to create a mandate request for subscription based payments",
        "operationId": "mandates#createTPV",
        "parameters": [
          {
            "name": "merchantId",
            "in": "header",
            "description": "Id of the merchant who is trying create the mandate",
            "allowEmptyValue": true,
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id of the merchant who is trying create the mandate",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          {
            "name": "mock",
            "in": "header",
            "description": "If true, mock the API call",
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "description": "If true, mock the API call",
              "default": "true",
              "example": "Qui dolorem qui."
            },
            "example": "Dolor occaecati dolores."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTPVRequestBody2"
              },
              "example": {
                "allowMultipleDebit": true,
                "amount": 1000,
                "amountRule": "max",
                "autoExecute": true,
                "autoPreNotify": true,
                "autoRefundFirstExecutionAmount": false,
                "blockFunds": true,
                "creationMode": "qr",
                "currency": "INR",
                "customerRevocable": false,
                "customerVpa": "ram@axis",
                "endDate": "02012008",
                "expireAfter": 2,
                "firstExecutionAmount": 1000,
                "frequency": "monthly",
                "ifscMatchType": "CompleteIFSCMatch",
                "initiationMode": "04",
                "merchantVpa": "fastestupi@pineaxis",
                "primaryAccount": {
                  "IFSC": "SBIN0000001",
                  "accountName": "deku",
                  "accountNumber": "1234567890"
                },
                "purpose": "14",
                "recurrenceRule": "on",
                "recurrenceValue": 1,
                "referenceId": "ABC1234789",
                "secondaryAccounts": [
                  {
                    "IFSC": "SBIN0000001",
                    "accountName": "deku",
                    "accountNumber": "1234567890"
                  },
                  {
                    "IFSC": "SBIN0000001",
                    "accountName": "deku",
                    "accountNumber": "1234567890"
                  },
                  {
                    "IFSC": "SBIN0000001",
                    "accountName": "deku",
                    "accountNumber": "1234567890"
                  },
                  {
                    "IFSC": "SBIN0000001",
                    "accountName": "deku",
                    "accountNumber": "1234567890"
                  }
                ],
                "shareToPayee": false,
                "showFirstExecutionAmountToPayer": false,
                "startDate": "02012006",
                "transactionNote": "Transaction note"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created response.",
            "headers": {
              "requestId": {
                "schema": {
                  "type": "string",
                  "example": "cjqml1f2e5ocq2mesej0"
                },
                "example": "cjqml1f2e5ocq2mesej0"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateTpvMandateResponse"
                },
                "example": {
                  "allowMultipleDebit": true,
                  "amount": 1000,
                  "amountRule": "max",
                  "autoExecute": true,
                  "autoPreNotify": true,
                  "autoRefundFirstExecutionAmount": false,
                  "blockFunds": true,
                  "createdAt": "2024-05-17T19:17:32+05:30",
                  "creationMode": "qr",
                  "currency": "INR",
                  "customerRevocable": true,
                  "customerVpa": "ram@axis",
                  "endDate": "02012008",
                  "expireAfter": 2,
                  "firstExecutionAmount": 1000,
                  "frequency": "monthly",
                  "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "ifscMatchType": "CompleteIFSCMatch",
                  "initiationMode": "00",
                  "intentLink": "upi://mandate?pa=deku040920232@okokaxis\u0026pn=merchant-1\u0026validitystart=31121995\u0026validityend=31121996\u0026am=100.00\u0026amrule=MAX\u0026recur=one%20time\u0026recurvalue=0\u0026recurtype=on\u0026tr=SETgv8wOOCElAtpzfbAEXqcKvN8QPfunAhI\u0026cu=INR\u0026mc=1234\u0026mode=04\u0026purpose=14\u0026rev=N\u0026share=Y\u0026qrexpire=04092023\u0026block=N\u0026orgid=000000\u0026version=2.0\u0026txnType=create\u0026tid=SETgv8wOOCElAtpzfbAEXqcKvN8QPfunAhI",
                  "maxAmountLimit": 1000,
                  "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "merchantVpa": "fastestupi@pineaxis",
                  "primaryAccount": {
                    "IFSC": "SBIN0000001",
                    "encryptedAccountName": "5e884898da28047151d0e56f8dc629277",
                    "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                    "hashedAccountName": "5e884898da28047151d0e56f8dc629277",
                    "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                    "maskedAccountName": "R*M*E*S*",
                    "maskedAccountNumber": "**** **** **** 7890"
                  },
                  "purpose": "14",
                  "qrCode": "",
                  "recurrenceRule": "on",
                  "recurrenceValue": 1,
                  "referenceId": "ABC1234789",
                  "secondaryAccounts": [
                    {
                      "IFSC": "SBIN0000001",
                      "encryptedAccountName": "5e884898da28047151d0e56f8dc629277",
                      "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                      "hashedAccountName": "5e884898da28047151d0e56f8dc629277",
                      "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                      "maskedAccountName": "R*M*E*S*",
                      "maskedAccountNumber": "**** **** **** 7890"
                    },
                    {
                      "IFSC": "SBIN0000001",
                      "encryptedAccountName": "5e884898da28047151d0e56f8dc629277",
                      "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                      "hashedAccountName": "5e884898da28047151d0e56f8dc629277",
                      "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                      "maskedAccountName": "R*M*E*S*",
                      "maskedAccountNumber": "**** **** **** 7890"
                    },
                    {
                      "IFSC": "SBIN0000001",
                      "encryptedAccountName": "5e884898da28047151d0e56f8dc629277",
                      "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                      "hashedAccountName": "5e884898da28047151d0e56f8dc629277",
                      "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                      "maskedAccountName": "R*M*E*S*",
                      "maskedAccountNumber": "**** **** **** 7890"
                    },
                    {
                      "IFSC": "SBIN0000001",
                      "encryptedAccountName": "5e884898da28047151d0e56f8dc629277",
                      "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                      "hashedAccountName": "5e884898da28047151d0e56f8dc629277",
                      "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                      "maskedAccountName": "R*M*E*S*",
                      "maskedAccountNumber": "**** **** **** 7890"
                    }
                  ],
                  "shareToPayee": false,
                  "shortCode": "TlNssqA7wlZC",
                  "shortLink": "https://upi.setu.pe/TlNssqA7wlZC",
                  "showFirstExecutionAmountToPayer": false,
                  "startDate": "02012006",
                  "status": "pending",
                  "transactionNote": "Transaction note",
                  "txnId": "BTTZrc5gDFkuCr3n3I0ey4aNtzLOLR7K7aR"
                }
              }
            }
          },
          "400": {
            "description": "Bad request: Bad Request response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized: Unauthorized response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not found: Not Found response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error: Internal Server Error response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt_header_Authorization": []
          }
        ]
      }
    },
    "/api/v1/merchants/mandates/{id}": {
      "get": {
        "tags": [
          "mandates"
        ],
        "summary": "Fetch mandate by id",
        "description": "API to fetch a mandate on our platform using the unique id generated while the mandate was registered",
        "operationId": "mandates#fetchById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the mandate that needs to be fetched",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id of the mandate that needs to be fetched",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          {
            "name": "merchantId",
            "in": "header",
            "description": "Id of the merchant who is trying create the mandate",
            "allowEmptyValue": true,
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id of the merchant who is trying create the mandate",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "headers": {
              "requestId": {
                "schema": {
                  "type": "string",
                  "example": "cjqml1f2e5ocq2mesej0"
                },
                "example": "cjqml1f2e5ocq2mesej0"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FetchMandateResponse"
                },
                "example": {
                  "allowMultipleDebit": true,
                  "amount": 1000,
                  "amountRule": "max",
                  "autoExecute": true,
                  "autoPreNotify": true,
                  "autoRefundFirstExecutionAmount": false,
                  "blockFunds": true,
                  "createdAt": "2024-05-17T19:17:32+05:30",
                  "creationMode": "qr",
                  "currency": "INR",
                  "customerRevocable": true,
                  "customerVpa": "ram@axis",
                  "endDate": "02012008",
                  "expireAfter": 2,
                  "firstExecutionAmount": 1000,
                  "frequency": "monthly",
                  "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "ifscMatchType": "CompleteIFSCMatch",
                  "initiationMode": "04",
                  "intentLink": "upi://mandate?pa=deku040920232@okokaxis\u0026pn=merchant-1\u0026validitystart=31121995\u0026validityend=31121996\u0026am=100.00\u0026amrule=MAX\u0026recur=one%20time\u0026recurvalue=0\u0026recurtype=on\u0026tr=SETgv8wOOCElAtpzfbAEXqcKvN8QPfunAhI\u0026cu=INR\u0026mc=1234\u0026mode=04\u0026purpose=14\u0026rev=N\u0026share=Y\u0026qrexpire=04092023\u0026block=N\u0026orgid=000000\u0026version=2.0\u0026txnType=create\u0026tid=SETgv8wOOCElAtpzfbAEXqcKvN8QPfunAhI",
                  "mandateLiveAt": "2023-09-04 12:08:20.202644 +0530 IST",
                  "maxAmountLimit": 1000,
                  "merchantId": "Deserunt dolor eos possimus blanditiis ut quo.",
                  "merchantVpa": "fastestupi@pineaxis",
                  "paymentDetails": {
                    "customerAccountType": "SAVINGS",
                    "customerVpa": "test-auto-tyvmm59i9b@okokaxis",
                    "paymentId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                    "paymentStatus": "initiated",
                    "rrn": "124068997913",
                    "txnId": "SETmBZkQOV0M7wyyP1V4PIFhRSzW5eSjmYI",
                    "txnTs": "2024-06-17T19:17:32+05:30"
                  },
                  "primaryAccount": {
                    "IFSC": "SBIN0000001",
                    "encryptedAccountName": "5e884898da28047151d0e56f8dc629277",
                    "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                    "hashedAccountName": "5e884898da28047151d0e56f8dc629277",
                    "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                    "maskedAccountName": "R*M*E*S*",
                    "maskedAccountNumber": "**** **** **** 7890"
                  },
                  "productConfigId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "purpose": "14",
                  "qrCode": "",
                  "reason": {
                    "code": "unable-to-fulfill-request",
                    "desc": "unable-to-fulfill-request",
                    "mandateRevokeReason": "merchant-initiated",
                    "npciErrCategory": "TD",
                    "npciErrCode": "YG",
                    "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
                    "npciRespCode": "YG",
                    "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)",
                    "setuDescription": "Merchant PSP error",
                    "suggestedAction": "Merchant PSP error"
                  },
                  "recurrenceRule": "on",
                  "recurrenceValue": 1,
                  "referenceId": "ABC1234789",
                  "secondaryAccounts": [
                    {
                      "IFSC": "SBIN0000001",
                      "encryptedAccountName": "5e884898da28047151d0e56f8dc629277",
                      "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                      "hashedAccountName": "5e884898da28047151d0e56f8dc629277",
                      "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                      "maskedAccountName": "R*M*E*S*",
                      "maskedAccountNumber": "**** **** **** 7890"
                    },
                    {
                      "IFSC": "SBIN0000001",
                      "encryptedAccountName": "5e884898da28047151d0e56f8dc629277",
                      "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                      "hashedAccountName": "5e884898da28047151d0e56f8dc629277",
                      "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                      "maskedAccountName": "R*M*E*S*",
                      "maskedAccountNumber": "**** **** **** 7890"
                    },
                    {
                      "IFSC": "SBIN0000001",
                      "encryptedAccountName": "5e884898da28047151d0e56f8dc629277",
                      "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                      "hashedAccountName": "5e884898da28047151d0e56f8dc629277",
                      "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                      "maskedAccountName": "R*M*E*S*",
                      "maskedAccountNumber": "**** **** **** 7890"
                    },
                    {
                      "IFSC": "SBIN0000001",
                      "encryptedAccountName": "5e884898da28047151d0e56f8dc629277",
                      "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                      "hashedAccountName": "5e884898da28047151d0e56f8dc629277",
                      "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                      "maskedAccountName": "R*M*E*S*",
                      "maskedAccountNumber": "**** **** **** 7890"
                    }
                  ],
                  "shareToPayee": false,
                  "shortCode": "TlNssqA7wlZC",
                  "shortLink": "https://upi.setu.pe/TlNssqA7wlZC",
                  "showFirstExecutionAmountToPayer": false,
                  "startDate": "02012006",
                  "status": "pending",
                  "transactionNote": "Transaction note",
                  "txnId": "BTTZrc5gDFkuCr3n3I0ey4aNtzLOLR7K7aR",
                  "umn": "c27f5fc30d344e9594fce0afa34f8859@mypsp"
                }
              }
            }
          },
          "400": {
            "description": "Bad request: Bad Request response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized: Unauthorized response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not found: Not Found response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error: Internal Server Error response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt_header_Authorization": []
          }
        ]
      }
    },
    "/api/v1/merchants/mandates/{id}/execute": {
      "post": {
        "tags": [
          "mandates"
        ],
        "summary": "Execute a mandate",
        "description": "API to execute a mandate",
        "operationId": "mandates#execute",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the mandate that needs to be executed",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id of the mandate that needs to be executed",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          {
            "name": "merchantId",
            "in": "header",
            "description": "Id of the merchant who is trying create the mandate",
            "allowEmptyValue": true,
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id of the merchant who is trying create the mandate",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          {
            "name": "mock",
            "in": "header",
            "description": "If true, mock the API call",
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "description": "If true, mock the API call",
              "default": "true",
              "example": "Sunt voluptatem."
            },
            "example": "Iusto quo."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExecuteRequestBody"
              },
              "example": {
                "amount": 1000,
                "referenceId": "ABC1234789",
                "remark": "Transaction for car loan emi",
                "sequenceNumber": 1,
                "umn": "123456789"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created response.",
            "headers": {
              "requestId": {
                "schema": {
                  "type": "string",
                  "example": "cjqml1f2e5ocq2mesej0"
                },
                "example": "cjqml1f2e5ocq2mesej0"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MandateExecutionResponse"
                },
                "example": {
                  "amount": 1000,
                  "createdAt": "2024-05-17T19:17:32+05:30",
                  "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "mandateId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "referenceId": "ABC1234789",
                  "remark": "Transaction for car loan emi",
                  "sequenceNumber": 1,
                  "status": "live",
                  "txnId": "BTTZrc5gDFkuCr3n3I0ey4aNtzLOLR7K7aR",
                  "umn": "c27f5fc30d344e9594fce0afa34f8859@mypsp"
                }
              }
            }
          },
          "400": {
            "description": "Bad request: Bad Request response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized: Unauthorized response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not found: Not Found response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error: Internal Server Error response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt_header_Authorization": []
          }
        ]
      }
    },
    "/api/v1/merchants/mandates/{id}/modify": {
      "put": {
        "tags": [
          "mandates"
        ],
        "summary": "Modify a mandate by id",
        "description": "API to modify an existing mandate that can be identified using the resource id of the mandate",
        "operationId": "mandates#modify",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the mandate that needs to be modified",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id of the mandate that needs to be modified",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          {
            "name": "merchantId",
            "in": "header",
            "description": "Id of the merchant who created the mandate",
            "allowEmptyValue": true,
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id of the merchant who created the mandate",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          {
            "name": "mock",
            "in": "header",
            "description": "If true, mock the API call",
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "description": "If true, mock the API call",
              "default": "true",
              "example": "Labore reprehenderit aut autem qui."
            },
            "example": "Reprehenderit ut et quo quasi eos distinctio."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ModifyRequestBody"
              },
              "example": {
                "amountLimit": 1000,
                "endDate": "02012006",
                "expireAfter": 2,
                "referenceId": "ABC1234789"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created response.",
            "headers": {
              "requestId": {
                "schema": {
                  "type": "string",
                  "example": "cjqml1f2e5ocq2mesej0"
                },
                "example": "cjqml1f2e5ocq2mesej0"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateMandateResponse"
                },
                "example": {
                  "amountLimit": 1000,
                  "endDate": "02012006",
                  "expireAfter": 2,
                  "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "intentLink": "upi://mandate?pa=deku040920232@okokaxis\u0026validitystart=31121995\u0026validityend=30122025\u0026am=901.00\u0026amrule=max\u0026recur=one%20time\u0026recurvalue=0\u0026recurtype=on\u0026cu=INR\u0026mc=1234\u0026mode=01\u0026purpose=14\u0026rev=N\u0026block=N\u0026txnType=update\u0026umn=SETUS7mxYHK1A6yXhxJsoKM7yxKqC2r0\u0026tid=SETM3Iij4WQrtEUbOUFkTpQp2EpR5wqy5Ou",
                  "mandateId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "mode": "qr",
                  "qrCode": "",
                  "referenceId": "ABC1234789",
                  "status": "pending",
                  "txnId": "BTTZrc5gDFkuCr3n3I0ey4aNtzLOLR7K7aR",
                  "umn": "c27f5fc30d344e9594fce0afa34f8859@mypsp"
                }
              }
            }
          },
          "400": {
            "description": "Bad request: Bad Request response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized: Unauthorized response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not found: Not Found response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error: Internal Server Error response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt_header_Authorization": []
          }
        ]
      }
    },
    "/api/v1/merchants/mandates/{id}/notify": {
      "post": {
        "tags": [
          "mandates"
        ],
        "summary": "Notify mandate execution",
        "description": "API to notify the customer about a scheduled mandate execution",
        "operationId": "mandates#notify",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the mandate that needs to be notified",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id of the mandate that needs to be notified",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          {
            "name": "merchantId",
            "in": "header",
            "description": "Merchant id of the mandate",
            "allowEmptyValue": true,
            "required": true,
            "schema": {
              "type": "string",
              "description": "Merchant id of the mandate",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "examples": {
              "default": {
                "summary": "default",
                "value": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
              }
            }
          },
          {
            "name": "mock",
            "in": "header",
            "description": "If true, mock the API call",
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "description": "If true, mock the API call",
              "default": "true",
              "example": "Autem architecto."
            },
            "example": "Qui vitae expedita eligendi error."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NotifyRequestBody"
              },
              "example": {
                "amount": 1000,
                "executionDate": "02012006",
                "referenceId": "ABC1234789",
                "sequenceNumber": 1,
                "umn": "setumandate1234789@ybl"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created response.",
            "headers": {
              "requestId": {
                "schema": {
                  "type": "string",
                  "example": "cjqml1f2e5ocq2mesej0"
                },
                "example": "cjqml1f2e5ocq2mesej0"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MandatePreDebitNotificationResponse"
                },
                "example": {
                  "amount": 1000,
                  "createdAt": "2024-05-17T19:17:32+05:30",
                  "executionDate": "02012006",
                  "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "mandateId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "referenceId": "ABC1234789",
                  "sequenceNumber": 1,
                  "status": "success",
                  "txnId": "BTTZrc5gDFkuCr3n3I0ey4aNtzLOLR7K7aR",
                  "umn": "c27f5fc30d344e9594fce0afa34f8859@mypsp"
                }
              }
            }
          },
          "400": {
            "description": "Bad request: Bad Request response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized: Unauthorized response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not found: Not Found response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error: Internal Server Error response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt_header_Authorization": []
          }
        ]
      }
    },
    "/api/v1/merchants/mandates/{id}/revoke": {
      "put": {
        "tags": [
          "mandates"
        ],
        "summary": "Revoke a mandate by id",
        "description": "API to modify an live mandate that can be identified using the resource id of the mandate",
        "operationId": "mandates#revoke",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the mandate that needs to be revoked",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id of the mandate that needs to be revoked",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          {
            "name": "merchantId",
            "in": "header",
            "description": "Id of the merchant who created the mandate",
            "allowEmptyValue": true,
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id of the merchant who created the mandate",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          {
            "name": "mock",
            "in": "header",
            "description": "If true, mock the API call",
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "description": "If true, mock the API call",
              "default": "true",
              "example": "Ducimus eius."
            },
            "example": "Quisquam pariatur."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RevokeRequestBody"
              },
              "example": {
                "expireAfter": 2,
                "referenceId": "ABC1234789"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created response.",
            "headers": {
              "requestId": {
                "schema": {
                  "type": "string",
                  "example": "cjqml1f2e5ocq2mesej0"
                },
                "example": "cjqml1f2e5ocq2mesej0"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RevokeMandateResponse"
                },
                "example": {
                  "expireAfter": 2,
                  "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "intentLink": "upi://mandate?pa=deku040920232@okokaxis\u0026validitystart=1995-12-31\u0026amrule=max\u0026recur=one%20time\u0026recurvalue=0\u0026recurtype=on\u0026cu=INR\u0026mc=1234\u0026mode=04\u0026purpose=14\u0026rev=N\u0026block=N\u0026txnType=revoke\u0026umn=SETUS7mxYHK1A6yXhxJsoKM7yxKqC2r0\u0026tid=SETE9q1rQXW3wXHzDdaqJTDGHHTBkJ0Segc",
                  "mandateId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "mode": "intent",
                  "referenceId": "ABC1234789",
                  "status": "pending",
                  "txnId": "BTTZrc5gDFkuCr3n3I0ey4aNtzLOLR7K7aR",
                  "umn": "c27f5fc30d344e9594fce0afa34f8859@mypsp"
                }
              }
            }
          },
          "400": {
            "description": "Bad request: Bad Request response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized: Unauthorized response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not found: Not Found response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error: Internal Server Error response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt_header_Authorization": []
          }
        ]
      }
    },
    "/api/v1/merchants/mandates/{mandateId}/execute/{id}": {
      "get": {
        "tags": [
          "mandates"
        ],
        "summary": "Fetch a mandate execution by id",
        "description": "API to fetch a mandate execution resource by its id",
        "operationId": "mandates#fetchMandateExecutionById",
        "parameters": [
          {
            "name": "mandateId",
            "in": "path",
            "description": "Id of the mandate",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id of the mandate",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAW"
            },
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAW"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Id of the mandate execution",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id of the mandate execution",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          {
            "name": "merchantId",
            "in": "header",
            "description": "Id of the merchant who has created the mandate",
            "allowEmptyValue": true,
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id of the merchant who has created the mandate",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "headers": {
              "requestId": {
                "schema": {
                  "type": "string",
                  "example": "cjqml1f2e5ocq2mesej0"
                },
                "example": "cjqml1f2e5ocq2mesej0"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FetchMandateExecutionResponse"
                },
                "example": {
                  "amount": 1000,
                  "createdAt": "2024-05-17T19:17:32+05:30",
                  "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "mandateId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "payment": {
                    "customerAccountType": "SAVINGS",
                    "customerVpa": "test-auto-tyvmm59i9b@okokaxis",
                    "paymentId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                    "paymentStatus": "initiated",
                    "rrn": "124068997913",
                    "txnId": "SETmBZkQOV0M7wyyP1V4PIFhRSzW5eSjmYI",
                    "txnTs": "2024-06-17T19:17:32+05:30"
                  },
                  "reason": {
                    "code": "unable-to-fulfill-request",
                    "desc": "unable-to-fulfill-request",
                    "mandateRevokeReason": "merchant-initiated",
                    "npciErrCategory": "TD",
                    "npciErrCode": "YG",
                    "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
                    "npciRespCode": "YG",
                    "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)",
                    "setuDescription": "Merchant PSP error",
                    "suggestedAction": "Merchant PSP error"
                  },
                  "referenceId": "ABC1234789",
                  "remark": "Transaction for car loan emi",
                  "sequenceNumber": 1,
                  "status": "live",
                  "txnId": "BTTZrc5gDFkuCr3n3I0ey4aNtzLOLR7K7aR",
                  "umn": "c27f5fc30d344e9594fce0afa34f8859@mypsp",
                  "unblockedAmount": 1
                }
              }
            }
          },
          "400": {
            "description": "Bad request: Bad Request response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized: Unauthorized response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not found: Not Found response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error: Internal Server Error response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt_header_Authorization": []
          }
        ]
      }
    },
    "/api/v1/merchants/mandates/{mandateId}/notify/{id}": {
      "get": {
        "tags": [
          "mandates"
        ],
        "summary": "Fetch a mandate notification by id",
        "description": "API to fetch a mandate notification resource by its id",
        "operationId": "mandates#fetchMandatePreDebitNotificationById",
        "parameters": [
          {
            "name": "mandateId",
            "in": "path",
            "description": "Id of the mandate that needs to be revoked",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id of the mandate that needs to be revoked",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Id of the mandate pre debit notification",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id of the mandate pre debit notification",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          {
            "name": "merchantId",
            "in": "header",
            "description": "Id of the merchant who has created the mandate",
            "allowEmptyValue": true,
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id of the merchant who has created the mandate",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "headers": {
              "requestId": {
                "schema": {
                  "type": "string",
                  "example": "cjqml1f2e5ocq2mesej0"
                },
                "example": "cjqml1f2e5ocq2mesej0"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FetchMandatePreDebitNotificationResponse"
                },
                "example": {
                  "amount": 1000,
                  "createdAt": "2024-05-17T19:17:32+05:30",
                  "executionDate": "02012006",
                  "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "mandateId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "reason": {
                    "code": "unable-to-fulfill-request",
                    "desc": "unable-to-fulfill-request",
                    "mandateRevokeReason": "merchant-initiated",
                    "npciErrCategory": "TD",
                    "npciErrCode": "YG",
                    "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
                    "npciRespCode": "YG",
                    "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)",
                    "setuDescription": "Merchant PSP error",
                    "suggestedAction": "Merchant PSP error"
                  },
                  "referenceId": "ABC1234789",
                  "sequenceNumber": 1,
                  "status": "success",
                  "txnId": "BTTZrc5gDFkuCr3n3I0ey4aNtzLOLR7K7aR",
                  "umn": "c27f5fc30d344e9594fce0afa34f8859@mypsp"
                }
              }
            }
          },
          "400": {
            "description": "Bad request: Bad Request response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized: Unauthorized response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not found: Not Found response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error: Internal Server Error response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt_header_Authorization": []
          }
        ]
      }
    },
    "/api/v1/merchants/mandates/{mandateId}/operations/{id}": {
      "get": {
        "tags": [
          "mandates"
        ],
        "summary": "Fetch mandate operation by id",
        "description": "API to fetch a mandate operation record by its operation id, these are the operations that can be performed on a live mandate - modify and revoke",
        "operationId": "mandates#fetchMandateOperationById",
        "parameters": [
          {
            "name": "mandateId",
            "in": "path",
            "description": "Id of the mandate that needs to be modified",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id of the mandate that needs to be modified",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Id of the mandate operation, this is the same id as found in the response of a modify mandate request or a revoke mandate request",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id of the mandate operation, this is the same id as found in the response of a modify mandate request or a revoke mandate request",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          {
            "name": "merchantId",
            "in": "header",
            "description": "Id of the merchant who created the mandate",
            "allowEmptyValue": true,
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id of the merchant who created the mandate",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "headers": {
              "requestId": {
                "schema": {
                  "type": "string",
                  "example": "cjqml1f2e5ocq2mesej0"
                },
                "example": "cjqml1f2e5ocq2mesej0"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FetchMandateOperationResponse"
                },
                "example": {
                  "amountLimit": 1000,
                  "createdAt": "2024-05-17T19:17:32+05:30",
                  "endDate": "02012006",
                  "expireAfter": 2,
                  "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "intentLink": "upi://mandate?pa=deku040920232@okokaxis\u0026validitystart=31121995\u0026validityend=30122025\u0026am=901.00\u0026amrule=max\u0026recur=one%20time\u0026recurvalue=0\u0026recurtype=on\u0026cu=INR\u0026mc=1234\u0026mode=01\u0026purpose=14\u0026rev=N\u0026block=N\u0026txnType=update\u0026umn=SETUS7mxYHK1A6yXhxJsoKM7yxKqC2r0\u0026tid=SETM3Iij4WQrtEUbOUFkTpQp2EpR5wqy5Ou",
                  "mandateId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "mode": "qr",
                  "qrCode": "",
                  "reason": {
                    "code": "unable-to-fulfill-request",
                    "desc": "unable-to-fulfill-request",
                    "mandateRevokeReason": "merchant-initiated",
                    "npciErrCategory": "TD",
                    "npciErrCode": "YG",
                    "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
                    "npciRespCode": "YG",
                    "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)",
                    "setuDescription": "Merchant PSP error",
                    "suggestedAction": "Merchant PSP error"
                  },
                  "referenceId": "ABC1234789",
                  "status": "pending",
                  "txnId": "BTTZrc5gDFkuCr3n3I0ey4aNtzLOLR7K7aR",
                  "type": "Doloremque veritatis.",
                  "umn": "c27f5fc30d344e9594fce0afa34f8859@mypsp"
                }
              }
            }
          },
          "400": {
            "description": "Bad request: Bad Request response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized: Unauthorized response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not found: Not Found response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error: Internal Server Error response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt_header_Authorization": []
          }
        ]
      }
    },
    "/api/v1/merchants/oqr": {
      "post": {
        "tags": [
          "offlineQR"
        ],
        "summary": "Create offline QR",
        "description": "API to create offline QR",
        "operationId": "offlineQR#create",
        "parameters": [
          {
            "name": "merchantId",
            "in": "header",
            "description": "Id associated with the merchant on our platform",
            "allowEmptyValue": true,
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id associated with the merchant on our platform",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRequestBody3"
              },
              "example": {
                "intentLink": "upi://pay?pa=test-auto-pgruosncak@okokaxis\u0026pn=merchant-4\u0026am=100.00\u0026tr=SU1240659756905923780\u0026tn=samplesingle0useqr\u0026cu=INR\u0026mc=1234",
                "merchantVpa": "fastestupi@pineaxis",
                "referenceId": "1240689979139556557",
                "transactionReference": "1240689979139556558"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created response.",
            "headers": {
              "requestId": {
                "schema": {
                  "type": "string",
                  "example": "cjqml1f2e5ocq2mesej0"
                },
                "example": "cjqml1f2e5ocq2mesej0"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateOqrResponse"
                },
                "example": {
                  "createdAt": "2024-05-17T19:17:32+05:30",
                  "expiryDate": "2024-06-17T19:17:32+05:30",
                  "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "intentLink": "upi://pay?pa=test-auto-pgruosncak@okokaxis\u0026pn=merchant-4\u0026am=100.00\u0026tr=SU1240659756905923780\u0026tn=samplesingle0useqr\u0026cu=INR\u0026mc=1234",
                  "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "merchantVpa": "fastestupi@pineaxis",
                  "referenceId": "1240689979139556557",
                  "status": "active",
                  "transactionReference": "1240689979139556558"
                }
              }
            }
          },
          "400": {
            "description": "Bad request: Bad Request response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Forbidden response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not found: Not Found response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error: Internal Server Error response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt_header_Authorization": []
          }
        ]
      }
    },
    "/api/v1/merchants/oqr/{id}": {
      "get": {
        "tags": [
          "offlineQR"
        ],
        "summary": "Fetch oqr by id",
        "description": "API to fetch an offline qr by id, which gives useful information like the status of the qr",
        "operationId": "offlineQR#fetchById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the resource, which is the same the id returned in the Create \u003cresource\u003e API response",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id of the resource, which is the same the id returned in the Create \u003cresource\u003e API response",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          {
            "name": "merchantId",
            "in": "header",
            "description": "Id associated with the merchant on our platform",
            "allowEmptyValue": true,
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id associated with the merchant on our platform",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "headers": {
              "requestId": {
                "schema": {
                  "type": "string",
                  "example": "cjqml1f2e5ocq2mesej0"
                },
                "example": "cjqml1f2e5ocq2mesej0"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FetchOqrByIDResponse"
                },
                "example": {
                  "closedAt": "2024-06-17T19:17:32+05:30",
                  "createdAt": "2024-05-17T19:17:32+05:30",
                  "expiryDate": "2024-06-17T19:17:32+05:30",
                  "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "intentLink": "upi://pay?pa=test-auto-pgruosncak@okokaxis\u0026pn=merchant-4\u0026am=100.00\u0026tr=SU1240659756905923780\u0026tn=samplesingle0useqr\u0026cu=INR\u0026mc=1234",
                  "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "merchantVpa": "fastestupi@pineaxis",
                  "reason": {
                    "code": "unable-to-fulfill-request",
                    "desc": "unable-to-fulfill-request",
                    "mandateRevokeReason": "merchant-initiated",
                    "npciErrCategory": "TD",
                    "npciErrCode": "YG",
                    "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
                    "npciRespCode": "YG",
                    "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)",
                    "setuDescription": "Merchant PSP error",
                    "suggestedAction": "Merchant PSP error"
                  },
                  "referenceId": "1240689979139556557",
                  "status": "active",
                  "transactionReference": "1240689979139556558"
                }
              }
            }
          },
          "400": {
            "description": "Bad request: Bad Request response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Forbidden response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not found: Not Found response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error: Internal Server Error response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt_header_Authorization": []
          }
        ]
      }
    },
    "/api/v1/merchants/oqr/{id}/status": {
      "put": {
        "tags": [
          "offlineQR"
        ],
        "summary": "Activate or deactivate oqr",
        "description": "API to Activate or deactivate an offline QR by its id",
        "operationId": "offlineQR#status",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the resource, which is the same the id returned in the Create \u003cresource\u003e API response",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id of the resource, which is the same the id returned in the Create \u003cresource\u003e API response",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          {
            "name": "merchantId",
            "in": "header",
            "description": "Id associated with the merchant on our platform",
            "allowEmptyValue": true,
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id associated with the merchant on our platform",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StatusRequestBody"
              },
              "example": {
                "status": "inactive"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created response.",
            "headers": {
              "requestId": {
                "schema": {
                  "type": "string",
                  "example": "cjqml1f2e5ocq2mesej0"
                },
                "example": "cjqml1f2e5ocq2mesej0"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FetchOqrByIDResponse"
                },
                "example": {
                  "closedAt": "2024-06-17T19:17:32+05:30",
                  "createdAt": "2024-05-17T19:17:32+05:30",
                  "expiryDate": "2024-06-17T19:17:32+05:30",
                  "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "intentLink": "upi://pay?pa=test-auto-pgruosncak@okokaxis\u0026pn=merchant-4\u0026am=100.00\u0026tr=SU1240659756905923780\u0026tn=samplesingle0useqr\u0026cu=INR\u0026mc=1234",
                  "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "merchantVpa": "fastestupi@pineaxis",
                  "reason": {
                    "code": "unable-to-fulfill-request",
                    "desc": "unable-to-fulfill-request",
                    "mandateRevokeReason": "merchant-initiated",
                    "npciErrCategory": "TD",
                    "npciErrCode": "YG",
                    "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
                    "npciRespCode": "YG",
                    "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)",
                    "setuDescription": "Merchant PSP error",
                    "suggestedAction": "Merchant PSP error"
                  },
                  "referenceId": "1240689979139556557",
                  "status": "active",
                  "transactionReference": "1240689979139556558"
                }
              }
            }
          },
          "400": {
            "description": "Bad request: Bad Request response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Forbidden response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not found: Not Found response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error: Internal Server Error response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt_header_Authorization": []
          }
        ]
      }
    },
    "/api/v1/merchants/pay": {
      "post": {
        "tags": [
          "payments"
        ],
        "summary": "Mock a payment",
        "description": "API to mock a payment request as if its done by a customer on a payer PSP",
        "operationId": "payments#DoPayment",
        "parameters": [
          {
            "name": "merchantId",
            "in": "header",
            "allowEmptyValue": true,
            "required": true,
            "schema": {
              "type": "string",
              "example": "Deleniti libero."
            },
            "example": "Velit magnam occaecati at modi hic tempora."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DoPaymentRequestBody"
              },
              "example": {
                "amount": 7654450771915972820,
                "offerId": "Dolorem tempore iusto aspernatur id ratione quo.",
                "payeeVpa": "Accusantium vero.",
                "payerAccountDetails": {
                  "accountNumber": "Delectus omnis quidem recusandae reprehenderit eos.",
                  "accountType": "Deserunt ut aliquam ullam itaque sequi.",
                  "ifsc": "Dolorem quod expedita fuga aut qui."
                },
                "payerName": "Quisquam nostrum dignissimos ratione sit debitis occaecati.",
                "payerRespCode": "Est odit laborum.",
                "payerVpa": "Architecto qui.",
                "refId": "Voluptates et ea sed qui."
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK response.",
            "headers": {
              "requestId": {
                "schema": {
                  "type": "string",
                  "example": "cjqml1f2e5ocq2mesej0"
                },
                "example": "cjqml1f2e5ocq2mesej0"
              }
            }
          },
          "400": {
            "description": "Bad request: Bad Request response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized: Unauthorized response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not found: Not Found response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error: Internal Server Error response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt_header_Authorization": []
          }
        ]
      }
    },
    "/api/v1/merchants/payments/product-instances/{id}/history": {
      "get": {
        "tags": [
          "payments"
        ],
        "summary": "Fetch payment history by {product instance id}",
        "description": "API to fetch the a history of recorded payments for a given product instance id",
        "operationId": "payments#fetchHistoryByProductInstanceId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id associated with the product that provides the context for a payment, i.e, a dqr, sqr, tpv or autopay resource",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id associated with the product that provides the context for a payment, i.e, a dqr, sqr, tpv or autopay resource",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "examples": {
              "default": {
                "summary": "default",
                "value": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
              }
            }
          },
          {
            "name": "merchantId",
            "in": "header",
            "description": "Id associated with the merchant on our platform",
            "allowEmptyValue": true,
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id associated with the merchant on our platform",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "headers": {
              "requestId": {
                "schema": {
                  "type": "string",
                  "example": "cjqml1f2e5ocq2mesej0"
                },
                "example": "cjqml1f2e5ocq2mesej0"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FetchPaymentListResponse"
                },
                "example": {
                  "payments": [
                    {
                      "amount": 10000,
                      "bin": "652922",
                      "createdAt": "2024-05-17T19:17:32+05:30",
                      "currency": "INR",
                      "customerAccountType": "SAVINGS",
                      "customerVpa": "test-auto-tyvmm59i9b@okokaxis",
                      "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                      "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                      "merchantVpa": "test-auto-beibfev2oq@okokaxis",
                      "metadata": {
                        "Ab ex cum aperiam provident numquam.": "Nisi sunt voluptates assumenda eveniet qui.",
                        "Dignissimos dolores totam fugiat qui magnam.": "Sunt quo possimus ut qui officiis.",
                        "Ipsa cupiditate dolorum laborum.": "Inventore distinctio voluptatem perspiciatis."
                      },
                      "productInstanceId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                      "reason": {
                        "code": "unable-to-fulfill-request",
                        "desc": "unable-to-fulfill-request",
                        "mandateRevokeReason": "merchant-initiated",
                        "npciErrCategory": "TD",
                        "npciErrCode": "YG",
                        "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
                        "npciRespCode": "YG",
                        "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)",
                        "setuDescription": "Merchant PSP error",
                        "suggestedAction": "Merchant PSP error"
                      },
                      "refId": "1240689979139556558",
                      "referenceId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                      "requestId": "cjqml1f2e5ocq2mesej0",
                      "rrn": "124068997913",
                      "status": "initiated",
                      "txnId": "SETmBZkQOV0M7wyyP1V4PIFhRSzW5eSjmYI",
                      "txnNote": "testpay",
                      "txnTs": "2024-06-17T19:17:32+05:30"
                    },
                    {
                      "amount": 10000,
                      "bin": "652922",
                      "createdAt": "2024-05-17T19:17:32+05:30",
                      "currency": "INR",
                      "customerAccountType": "SAVINGS",
                      "customerVpa": "test-auto-tyvmm59i9b@okokaxis",
                      "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                      "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                      "merchantVpa": "test-auto-beibfev2oq@okokaxis",
                      "metadata": {
                        "Ab ex cum aperiam provident numquam.": "Nisi sunt voluptates assumenda eveniet qui.",
                        "Dignissimos dolores totam fugiat qui magnam.": "Sunt quo possimus ut qui officiis.",
                        "Ipsa cupiditate dolorum laborum.": "Inventore distinctio voluptatem perspiciatis."
                      },
                      "productInstanceId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                      "reason": {
                        "code": "unable-to-fulfill-request",
                        "desc": "unable-to-fulfill-request",
                        "mandateRevokeReason": "merchant-initiated",
                        "npciErrCategory": "TD",
                        "npciErrCode": "YG",
                        "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
                        "npciRespCode": "YG",
                        "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)",
                        "setuDescription": "Merchant PSP error",
                        "suggestedAction": "Merchant PSP error"
                      },
                      "refId": "1240689979139556558",
                      "referenceId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                      "requestId": "cjqml1f2e5ocq2mesej0",
                      "rrn": "124068997913",
                      "status": "initiated",
                      "txnId": "SETmBZkQOV0M7wyyP1V4PIFhRSzW5eSjmYI",
                      "txnNote": "testpay",
                      "txnTs": "2024-06-17T19:17:32+05:30"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad request: Bad Request response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized: Unauthorized response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not found: Not Found response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error: Internal Server Error response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt_header_Authorization": []
          }
        ]
      }
    },
    "/api/v1/merchants/payments/product-instances/{id}/last": {
      "get": {
        "tags": [
          "payments"
        ],
        "summary": "Fetch last payment by {product instance id}",
        "description": "API to fetch the last recorded payment for a given product instance id",
        "operationId": "payments#fetchLastByProductInstanceId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id associated with the product that provides the context for a payment, i.e, a dqr, sqr, tpv or autopay resource",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id associated with the product that provides the context for a payment, i.e, a dqr, sqr, tpv or autopay resource",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "examples": {
              "default": {
                "summary": "default",
                "value": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
              }
            }
          },
          {
            "name": "merchantId",
            "in": "header",
            "description": "Id associated with the merchant on our platform",
            "allowEmptyValue": true,
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id associated with the merchant on our platform",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "headers": {
              "requestId": {
                "schema": {
                  "type": "string",
                  "example": "cjqml1f2e5ocq2mesej0"
                },
                "example": "cjqml1f2e5ocq2mesej0"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FetchPaymentResponse"
                },
                "example": {
                  "amount": 10000,
                  "bin": "652922",
                  "createdAt": "2024-05-17T19:17:32+05:30",
                  "currency": "INR",
                  "customerAccountType": "SAVINGS",
                  "customerVpa": "test-auto-tyvmm59i9b@okokaxis",
                  "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "merchantVpa": "test-auto-beibfev2oq@okokaxis",
                  "metadata": {
                    "Eos suscipit distinctio iure rem.": "Quasi id in occaecati quo id quaerat.",
                    "Ipsa itaque nam autem.": "Dolor qui nemo facere ullam eum.",
                    "Odio perferendis voluptates eos consequatur pariatur.": "Nemo nulla autem et dolorem exercitationem."
                  },
                  "productInstanceId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "reason": {
                    "code": "unable-to-fulfill-request",
                    "desc": "unable-to-fulfill-request",
                    "mandateRevokeReason": "merchant-initiated",
                    "npciErrCategory": "TD",
                    "npciErrCode": "YG",
                    "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
                    "npciRespCode": "YG",
                    "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)",
                    "setuDescription": "Merchant PSP error",
                    "suggestedAction": "Merchant PSP error"
                  },
                  "refId": "1240689979139556558",
                  "referenceId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "rrn": "124068997913",
                  "status": "initiated",
                  "txnId": "SETmBZkQOV0M7wyyP1V4PIFhRSzW5eSjmYI",
                  "txnNote": "testpay",
                  "txnTs": "2024-06-17T19:17:32+05:30"
                }
              }
            }
          },
          "400": {
            "description": "Bad request: Bad Request response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized: Unauthorized response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not found: Not Found response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error: Internal Server Error response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt_header_Authorization": []
          }
        ]
      }
    },
    "/api/v1/merchants/payments/{id}": {
      "get": {
        "tags": [
          "payments"
        ],
        "summary": "Fetch payment by id",
        "description": "API to fetch a payment record using its unique id on our platform. The id here is the unique id generated on Setu's platform not the txnId generated by NPCI",
        "operationId": "payments#fetchById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the resource, which is the same the id returned in the Create \u003cresource\u003e API response",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id of the resource, which is the same the id returned in the Create \u003cresource\u003e API response",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          {
            "name": "merchantId",
            "in": "header",
            "description": "Id associated with the merchant on our platform",
            "allowEmptyValue": true,
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id associated with the merchant on our platform",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "headers": {
              "requestId": {
                "schema": {
                  "type": "string",
                  "example": "cjqml1f2e5ocq2mesej0"
                },
                "example": "cjqml1f2e5ocq2mesej0"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FetchPaymentResponse"
                },
                "example": {
                  "amount": 10000,
                  "bin": "652922",
                  "createdAt": "2024-05-17T19:17:32+05:30",
                  "currency": "INR",
                  "customerAccountType": "SAVINGS",
                  "customerVpa": "test-auto-tyvmm59i9b@okokaxis",
                  "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "merchantVpa": "test-auto-beibfev2oq@okokaxis",
                  "metadata": {
                    "Dolorem omnis labore maiores.": "Ducimus hic quasi quo.",
                    "Quas doloribus quidem officiis.": "Provident omnis et sequi voluptas ratione.",
                    "Vero perspiciatis.": "Consequatur eos dolore ut est ducimus."
                  },
                  "productInstanceId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "reason": {
                    "code": "unable-to-fulfill-request",
                    "desc": "unable-to-fulfill-request",
                    "mandateRevokeReason": "merchant-initiated",
                    "npciErrCategory": "TD",
                    "npciErrCode": "YG",
                    "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
                    "npciRespCode": "YG",
                    "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)",
                    "setuDescription": "Merchant PSP error",
                    "suggestedAction": "Merchant PSP error"
                  },
                  "refId": "1240689979139556558",
                  "referenceId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "rrn": "124068997913",
                  "status": "initiated",
                  "txnId": "SETmBZkQOV0M7wyyP1V4PIFhRSzW5eSjmYI",
                  "txnNote": "testpay",
                  "txnTs": "2024-06-17T19:17:32+05:30"
                }
              }
            }
          },
          "400": {
            "description": "Bad request: Bad Request response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized: Unauthorized response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not found: Not Found response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error: Internal Server Error response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt_header_Authorization": []
          }
        ]
      }
    },
    "/api/v1/merchants/payments/{id}/transfers": {
      "put": {
        "tags": [
          "payments"
        ],
        "summary": "Modify payment transfers",
        "description": "API to modify payment transfers for a given successful payment",
        "operationId": "payments#modifyTransfers",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id associated with the payment for which the transfers are to be modified",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id associated with the payment for which the transfers are to be modified",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          {
            "name": "merchantId",
            "in": "header",
            "allowEmptyValue": true,
            "required": true,
            "schema": {
              "type": "string",
              "example": "Quae eum nihil fugiat."
            },
            "example": "Inventore id inventore."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ModifyTransfersRequestBody"
              },
              "example": {
                "chargeTransfer": [
                  {
                    "accountIfsc": "Excepturi voluptates quia ipsa.",
                    "accountNumber": "Voluptates libero qui deleniti inventore a.",
                    "remarks": "Nulla recusandae earum.",
                    "value": 0.040310816481240276
                  },
                  {
                    "accountIfsc": "Excepturi voluptates quia ipsa.",
                    "accountNumber": "Voluptates libero qui deleniti inventore a.",
                    "remarks": "Nulla recusandae earum.",
                    "value": 0.040310816481240276
                  },
                  {
                    "accountIfsc": "Excepturi voluptates quia ipsa.",
                    "accountNumber": "Voluptates libero qui deleniti inventore a.",
                    "remarks": "Nulla recusandae earum.",
                    "value": 0.040310816481240276
                  }
                ],
                "chargeTransferType": "Percentage",
                "transferType": "Percentage",
                "transfers": [
                  {
                    "accountIfsc": "Esse dolores veniam cum.",
                    "accountNumber": "Sit quas tenetur veniam.",
                    "remarks": "Qui hic labore tempora mollitia dolorum at.",
                    "value": 0.47829849513030187
                  },
                  {
                    "accountIfsc": "Esse dolores veniam cum.",
                    "accountNumber": "Sit quas tenetur veniam.",
                    "remarks": "Qui hic labore tempora mollitia dolorum at.",
                    "value": 0.47829849513030187
                  },
                  {
                    "accountIfsc": "Esse dolores veniam cum.",
                    "accountNumber": "Sit quas tenetur veniam.",
                    "remarks": "Qui hic labore tempora mollitia dolorum at.",
                    "value": 0.47829849513030187
                  },
                  {
                    "accountIfsc": "Esse dolores veniam cum.",
                    "accountNumber": "Sit quas tenetur veniam.",
                    "remarks": "Qui hic labore tempora mollitia dolorum at.",
                    "value": 0.47829849513030187
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK response.",
            "headers": {
              "requestId": {
                "schema": {
                  "type": "string",
                  "example": "cjqml1f2e5ocq2mesej0"
                },
                "example": "cjqml1f2e5ocq2mesej0"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModifyPaymentTransfersResponse"
                },
                "example": {
                  "transferType": "Percentage",
                  "transfers": [
                    {
                      "accountIfsc": "Suscipit cumque iste molestiae cumque.",
                      "accountNumber": "Officiis et explicabo voluptatem nesciunt.",
                      "remarks": "Veniam sit inventore modi modi qui.",
                      "value": 0.03737973982778193
                    },
                    {
                      "accountIfsc": "Suscipit cumque iste molestiae cumque.",
                      "accountNumber": "Officiis et explicabo voluptatem nesciunt.",
                      "remarks": "Veniam sit inventore modi modi qui.",
                      "value": 0.03737973982778193
                    },
                    {
                      "accountIfsc": "Suscipit cumque iste molestiae cumque.",
                      "accountNumber": "Officiis et explicabo voluptatem nesciunt.",
                      "remarks": "Veniam sit inventore modi modi qui.",
                      "value": 0.03737973982778193
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad request: Bad Request response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized: Unauthorized response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not found: Not Found response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error: Internal Server Error response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt_header_Authorization": []
          }
        ]
      }
    },
    "/api/v1/merchants/refunds": {
      "post": {
        "tags": [
          "refund"
        ],
        "summary": "Create a refund",
        "description": "API to create a refund on a successful payment",
        "operationId": "refund#create",
        "parameters": [
          {
            "name": "merchantId",
            "in": "header",
            "description": "Id of the merchant who is creating the refund",
            "allowEmptyValue": true,
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id of the merchant who is creating the refund",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRequestBody8"
              },
              "example": {
                "amount": 10000,
                "crn": "UPI123456789",
                "paymentId": "01HKSEWQ509Z56CVQNQ2XHGJZ1",
                "referenceId": "BILL12345",
                "remarks": "Services not rendered",
                "type": "online"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created response.",
            "headers": {
              "requestId": {
                "schema": {
                  "type": "string",
                  "example": "cjqml1f2e5ocq2mesej0"
                },
                "example": "cjqml1f2e5ocq2mesej0"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateRefundResponse"
                },
                "example": {
                  "amount": 10000,
                  "createdAt": "2024-05-17T19:17:32+05:30",
                  "crn": "UPI123456789",
                  "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "paymentId": "01HKSEWQ509Z56CVQNQ2XHGJZ1",
                  "reason": {
                    "adjCode": "501",
                    "adjFlag": "RRC",
                    "errCode": "refund-disabled",
                    "npciErrCode": "R21",
                    "npciErrDesc": "ONLINE REFUND IS DISABLED IN UPI"
                  },
                  "referenceId": "BILL12345",
                  "remarks": "Services not rendered",
                  "status": "success",
                  "type": "online"
                }
              }
            }
          },
          "400": {
            "description": "Bad request: Bad Request response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Forbidden response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not found: Not Found response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error: Internal Server Error response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt_header_Authorization": []
          }
        ]
      }
    },
    "/api/v1/merchants/refunds/mock/{id}/status": {
      "put": {
        "tags": [
          "refund"
        ],
        "summary": "(Sandbox only) Mock a refund",
        "description": "API to mock the refund status update and trigger the notification on the set target",
        "operationId": "refund#updateMockRefundStatus",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the refund",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id of the refund",
              "example": "01IOZ3NDEKTSV4RRFFQ69G5FFT"
            },
            "example": "01IOZ3NDEKTSV4RRFFQ69G5FFT"
          },
          {
            "name": "merchantId",
            "in": "header",
            "description": "Id of the merchant who is creating the refund",
            "allowEmptyValue": true,
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id of the merchant who is creating the refund",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateMockRefundStatusRequestBody"
              },
              "example": {
                "errCode": "AA1",
                "mockStatus": "failed"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK response."
          },
          "400": {
            "description": "Bad request: Bad Request response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Forbidden response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not found: Not Found response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error: Internal Server Error response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt_header_Authorization": []
          }
        ]
      }
    },
    "/api/v1/merchants/refunds/{id}": {
      "get": {
        "tags": [
          "refund"
        ],
        "summary": "Fetch refund by id",
        "description": "API to fetch refund by its id",
        "operationId": "refund#fetchById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Refund id returned during the refund initiation request",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Refund id returned during the refund initiation request",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          {
            "name": "merchantId",
            "in": "header",
            "description": "Id of the merchant who created the refund",
            "allowEmptyValue": true,
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id of the merchant who created the refund",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "headers": {
              "requestId": {
                "schema": {
                  "type": "string",
                  "example": "cjqml1f2e5ocq2mesej0"
                },
                "example": "cjqml1f2e5ocq2mesej0"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateRefundResponse"
                },
                "example": {
                  "amount": 10000,
                  "createdAt": "2024-05-17T19:17:32+05:30",
                  "crn": "UPI123456789",
                  "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "paymentId": "01HKSEWQ509Z56CVQNQ2XHGJZ1",
                  "reason": {
                    "adjCode": "501",
                    "adjFlag": "RRC",
                    "errCode": "refund-disabled",
                    "npciErrCode": "R21",
                    "npciErrDesc": "ONLINE REFUND IS DISABLED IN UPI"
                  },
                  "referenceId": "BILL12345",
                  "remarks": "Services not rendered",
                  "status": "success",
                  "type": "online"
                }
              }
            }
          },
          "400": {
            "description": "Bad request: Bad Request response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Forbidden response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not found: Not Found response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error: Internal Server Error response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt_header_Authorization": []
          }
        ]
      }
    },
    "/api/v1/merchants/refunds/{paymentTxnId}/payment": {
      "get": {
        "tags": [
          "refund"
        ],
        "summary": "Fetch refunds by payment txn id",
        "description": "API to fetch refunds by payment txn id",
        "operationId": "refund#fetchByPaymentTxnId",
        "parameters": [
          {
            "name": "paymentTxnId",
            "in": "path",
            "description": "payment txn id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "payment txn id",
              "example": "SETmBZkQOV0M7wyyP1V4PIFhRSzW5eSjmYI"
            },
            "example": "SETmBZkQOV0M7wyyP1V4PIFhRSzW5eSjmYI"
          },
          {
            "name": "merchantId",
            "in": "header",
            "description": "Id of the merchant associated with payment",
            "allowEmptyValue": true,
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id of the merchant associated with payment",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "headers": {
              "requestId": {
                "schema": {
                  "type": "string",
                  "example": "cjqml1f2e5ocq2mesej0"
                },
                "example": "cjqml1f2e5ocq2mesej0"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetRefundsByPaymentTxnIDResponse"
                },
                "example": {
                  "paymentTxnId": "Impedit corporis.",
                  "refunds": [
                    {
                      "amount": 10000,
                      "createdAt": "2024-05-17T19:17:32+05:30",
                      "crn": "UPI123456789",
                      "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                      "paymentId": "01HKSEWQ509Z56CVQNQ2XHGJZ1",
                      "reason": {
                        "adjCode": "501",
                        "adjFlag": "RRC",
                        "errCode": "refund-disabled",
                        "npciErrCode": "R21",
                        "npciErrDesc": "ONLINE REFUND IS DISABLED IN UPI"
                      },
                      "referenceId": "BILL12345",
                      "remarks": "Services not rendered",
                      "requestId": "cjqml1f2e5ocq2mesej0",
                      "status": "success",
                      "type": "online"
                    },
                    {
                      "amount": 10000,
                      "createdAt": "2024-05-17T19:17:32+05:30",
                      "crn": "UPI123456789",
                      "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                      "paymentId": "01HKSEWQ509Z56CVQNQ2XHGJZ1",
                      "reason": {
                        "adjCode": "501",
                        "adjFlag": "RRC",
                        "errCode": "refund-disabled",
                        "npciErrCode": "R21",
                        "npciErrDesc": "ONLINE REFUND IS DISABLED IN UPI"
                      },
                      "referenceId": "BILL12345",
                      "remarks": "Services not rendered",
                      "requestId": "cjqml1f2e5ocq2mesej0",
                      "status": "success",
                      "type": "online"
                    },
                    {
                      "amount": 10000,
                      "createdAt": "2024-05-17T19:17:32+05:30",
                      "crn": "UPI123456789",
                      "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                      "paymentId": "01HKSEWQ509Z56CVQNQ2XHGJZ1",
                      "reason": {
                        "adjCode": "501",
                        "adjFlag": "RRC",
                        "errCode": "refund-disabled",
                        "npciErrCode": "R21",
                        "npciErrDesc": "ONLINE REFUND IS DISABLED IN UPI"
                      },
                      "referenceId": "BILL12345",
                      "remarks": "Services not rendered",
                      "requestId": "cjqml1f2e5ocq2mesej0",
                      "status": "success",
                      "type": "online"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad request: Bad Request response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Forbidden response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not found: Not Found response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error: Internal Server Error response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt_header_Authorization": []
          }
        ]
      }
    },
    "/api/v1/merchants/sqr": {
      "post": {
        "tags": [
          "sqr"
        ],
        "summary": "Create static QR",
        "description": "API to create static QR",
        "operationId": "sqr#create",
        "parameters": [
          {
            "name": "merchantId",
            "in": "header",
            "description": "Id associated with the merchant on our platform",
            "allowEmptyValue": true,
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id associated with the merchant on our platform",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRequestBody5"
              },
              "example": {
                "amount": 10000,
                "expiryDate": "2024-06-17T19:17:32+05:30",
                "merchantVpa": "fastestupi@pineaxis",
                "metadata": {
                  "InvoiceNumber": "INV-21-12-009"
                },
                "minAmount": 1000,
                "referenceId": "1240689979139556557",
                "transactionNote": "Payment for loan repayment"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created response.",
            "headers": {
              "requestId": {
                "schema": {
                  "type": "string",
                  "example": "cjqml1f2e5ocq2mesej0"
                },
                "example": "cjqml1f2e5ocq2mesej0"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateSqrResponse"
                },
                "example": {
                  "amount": 10000,
                  "createdAt": "2024-05-17T19:17:32+05:30",
                  "currency": "Commodi labore aut ut.",
                  "expiryDate": "2024-06-17T19:17:32+05:30",
                  "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "intentLink": "upi://pay?pa=test-auto-pgruosncak@okokaxis\u0026pn=merchant-4\u0026am=100.00\u0026tr=SU1240659756905923780\u0026tn=samplesingle0useqr\u0026cu=INR\u0026mc=1234",
                  "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "merchantVpa": "fastestupi@pineaxis",
                  "metadata": {
                    "InvoiceNumber": "INV-21-12-009"
                  },
                  "minAmount": 1000,
                  "qrCode": "",
                  "refId": "1240689979139556558",
                  "referenceId": "1240689979139556557",
                  "shortLink": "upipay.setu.co/Np3KnBCM8Om0",
                  "status": "active",
                  "transactionNote": "Payment for loan repayment"
                }
              }
            }
          },
          "400": {
            "description": "Bad request: Bad Request response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Forbidden response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not found: Not Found response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error: Internal Server Error response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt_header_Authorization": []
          }
        ]
      }
    },
    "/api/v1/merchants/sqr/{id}": {
      "get": {
        "tags": [
          "sqr"
        ],
        "summary": "Fetch sqr by id",
        "description": "API to fetch a static qr by id, which gives useful information like the status of the qr",
        "operationId": "sqr#fetchById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the resource, which is the same the id returned in the Create \u003cresource\u003e API response",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id of the resource, which is the same the id returned in the Create \u003cresource\u003e API response",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          {
            "name": "merchantId",
            "in": "header",
            "description": "Id associated with the merchant on our platform",
            "allowEmptyValue": true,
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id associated with the merchant on our platform",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "headers": {
              "requestId": {
                "schema": {
                  "type": "string",
                  "example": "cjqml1f2e5ocq2mesej0"
                },
                "example": "cjqml1f2e5ocq2mesej0"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FetchSqrByIDResponse"
                },
                "example": {
                  "amount": 10000,
                  "closedAt": "2024-06-17T19:17:32+05:30",
                  "createdAt": "2024-05-17T19:17:32+05:30",
                  "currency": "Quis aut alias voluptas aut doloribus.",
                  "expiryDate": "2024-06-17T19:17:32+05:30",
                  "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "intentLink": "upi://pay?pa=test-auto-pgruosncak@okokaxis\u0026pn=merchant-4\u0026am=100.00\u0026tr=SU1240659756905923780\u0026tn=samplesingle0useqr\u0026cu=INR\u0026mc=1234",
                  "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "merchantVpa": "fastestupi@pineaxis",
                  "metadata": {
                    "InvoiceNumber": "INV-21-12-009"
                  },
                  "minAmount": 1000,
                  "productConfigId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "qrCode": "",
                  "reason": {
                    "code": "unable-to-fulfill-request",
                    "desc": "unable-to-fulfill-request",
                    "mandateRevokeReason": "merchant-initiated",
                    "npciErrCategory": "TD",
                    "npciErrCode": "YG",
                    "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
                    "npciRespCode": "YG",
                    "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)",
                    "setuDescription": "Merchant PSP error",
                    "suggestedAction": "Merchant PSP error"
                  },
                  "refId": "1240689979139556558",
                  "referenceId": "1240689979139556557",
                  "shortLink": "upipay.setu.co/Np3KnBCM8Om0",
                  "status": "active",
                  "transactionNote": "Payment for loan repayment"
                }
              }
            }
          },
          "400": {
            "description": "Bad request: Bad Request response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Forbidden response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not found: Not Found response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error: Internal Server Error response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt_header_Authorization": []
          }
        ]
      }
    },
    "/api/v1/merchants/sqr/{id}/status": {
      "put": {
        "tags": [
          "sqr"
        ],
        "summary": "Activate or deactivate sqr",
        "description": "API to Activate or deactivate a static QR by its id",
        "operationId": "sqr#status",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the resource, which is the same the id returned in the Create \u003cresource\u003e API response",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id of the resource, which is the same the id returned in the Create \u003cresource\u003e API response",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          {
            "name": "merchantId",
            "in": "header",
            "description": "Id associated with the merchant on our platform",
            "allowEmptyValue": true,
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id associated with the merchant on our platform",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StatusRequestBody"
              },
              "example": {
                "status": "inactive"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created response.",
            "headers": {
              "requestId": {
                "schema": {
                  "type": "string",
                  "example": "cjqml1f2e5ocq2mesej0"
                },
                "example": "cjqml1f2e5ocq2mesej0"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FetchSqrByIDResponse"
                },
                "example": {
                  "amount": 10000,
                  "closedAt": "2024-06-17T19:17:32+05:30",
                  "createdAt": "2024-05-17T19:17:32+05:30",
                  "currency": "Iste qui doloremque quia molestiae veniam.",
                  "expiryDate": "2024-06-17T19:17:32+05:30",
                  "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "intentLink": "upi://pay?pa=test-auto-pgruosncak@okokaxis\u0026pn=merchant-4\u0026am=100.00\u0026tr=SU1240659756905923780\u0026tn=samplesingle0useqr\u0026cu=INR\u0026mc=1234",
                  "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "merchantVpa": "fastestupi@pineaxis",
                  "metadata": {
                    "InvoiceNumber": "INV-21-12-009"
                  },
                  "minAmount": 1000,
                  "productConfigId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "qrCode": "",
                  "reason": {
                    "code": "unable-to-fulfill-request",
                    "desc": "unable-to-fulfill-request",
                    "mandateRevokeReason": "merchant-initiated",
                    "npciErrCategory": "TD",
                    "npciErrCode": "YG",
                    "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
                    "npciRespCode": "YG",
                    "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)",
                    "setuDescription": "Merchant PSP error",
                    "suggestedAction": "Merchant PSP error"
                  },
                  "refId": "1240689979139556558",
                  "referenceId": "1240689979139556557",
                  "shortLink": "upipay.setu.co/Np3KnBCM8Om0",
                  "status": "active",
                  "transactionNote": "Payment for loan repayment"
                }
              }
            }
          },
          "400": {
            "description": "Bad request: Bad Request response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Forbidden response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not found: Not Found response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error: Internal Server Error response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt_header_Authorization": []
          }
        ]
      }
    },
    "/api/v1/merchants/tpv": {
      "post": {
        "tags": [
          "tpv"
        ],
        "summary": "Create tpv qr",
        "description": "Create a TPV based qr which can be used to verify the bank account from which the payment was made",
        "operationId": "tpv#createTPV",
        "parameters": [
          {
            "name": "merchantId",
            "in": "header",
            "description": "Id associated with the merchant on our platform",
            "allowEmptyValue": true,
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id associated with the merchant on our platform",
              "example": "1240689979139556556"
            },
            "example": "1240689979139556556"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTPVRequestBody"
              },
              "example": {
                "amount": 10000,
                "expireAfter": 10,
                "ifscMatchType": "BankCodeMatch",
                "merchantVpa": "fastestupi@pineaxis",
                "metadata": {
                  "InvoiceNumber": "INV-21-12-009"
                },
                "minAmount": 1000,
                "primaryAccount": {
                  "IFSC": "SBIN0000001",
                  "accountName": "deku",
                  "accountNumber": "1234567890"
                },
                "referenceId": "1240689979139556556",
                "secondaryAccounts": [
                  {
                    "IFSC": "SBIN0000001",
                    "accountName": "deku",
                    "accountNumber": "1234567890"
                  },
                  {
                    "IFSC": "SBIN0000001",
                    "accountName": "deku",
                    "accountNumber": "1234567890"
                  },
                  {
                    "IFSC": "SBIN0000001",
                    "accountName": "deku",
                    "accountNumber": "1234567890"
                  }
                ],
                "transactionNote": "test transaction"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateTPVResponse"
                },
                "example": {
                  "amount": 10000,
                  "closedAt": "Ab maxime autem magnam et.",
                  "createdAt": "2024-05-17T19:17:32+05:30",
                  "expireAfter": 10,
                  "id": "1240689979139556556",
                  "ifscMatchType": "Accusantium minus.",
                  "intentLink": "upi://pay?pa=test-auto-pgruosncak@okokaxis\u0026pn=merchant-4\u0026am=100.00\u0026tr=SU1240659756905923780\u0026tn=sample%20single%20use%20qr\u0026cu=INR\u0026mc=1234",
                  "merchantId": "1240689979139556556",
                  "merchantVpa": "fastestupi@pineaxis",
                  "metadata": {
                    "InvoiceNumber": "INV-21-12-009"
                  },
                  "minAmount": 1000,
                  "primaryAccount": {
                    "IFSC": "SBIN0000001",
                    "encryptedAccountName": "5e884898da28047151d0e56f8dc629277",
                    "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                    "hashedAccountName": "5e884898da28047151d0e56f8dc629277",
                    "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                    "maskedAccountName": "R*M*E*S*",
                    "maskedAccountNumber": "**** **** **** 7890"
                  },
                  "qrCode": "",
                  "reason": {
                    "code": "unable-to-fulfill-request",
                    "desc": "unable-to-fulfill-request",
                    "mandateRevokeReason": "merchant-initiated",
                    "npciErrCategory": "TD",
                    "npciErrCode": "YG",
                    "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
                    "npciRespCode": "YG",
                    "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)",
                    "setuDescription": "Merchant PSP error",
                    "suggestedAction": "Merchant PSP error"
                  },
                  "refId": "1240689979139556558",
                  "referenceId": "1240689979139556556",
                  "requestId": "cjqml1f2e5ocq2mesej0",
                  "secondaryAccounts": [
                    {
                      "IFSC": "SBIN0000001",
                      "encryptedAccountName": "5e884898da28047151d0e56f8dc629277",
                      "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                      "hashedAccountName": "5e884898da28047151d0e56f8dc629277",
                      "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                      "maskedAccountName": "R*M*E*S*",
                      "maskedAccountNumber": "**** **** **** 7890"
                    },
                    {
                      "IFSC": "SBIN0000001",
                      "encryptedAccountName": "5e884898da28047151d0e56f8dc629277",
                      "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                      "hashedAccountName": "5e884898da28047151d0e56f8dc629277",
                      "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                      "maskedAccountName": "R*M*E*S*",
                      "maskedAccountNumber": "**** **** **** 7890"
                    },
                    {
                      "IFSC": "SBIN0000001",
                      "encryptedAccountName": "5e884898da28047151d0e56f8dc629277",
                      "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                      "hashedAccountName": "5e884898da28047151d0e56f8dc629277",
                      "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                      "maskedAccountName": "R*M*E*S*",
                      "maskedAccountNumber": "**** **** **** 7890"
                    }
                  ],
                  "shortLink": "upipay.setu.co/Np3KnBCM8Om0",
                  "status": "active",
                  "transactionNote": "test transaction"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest: Bad Request response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel2"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized: Unauthorized response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel2"
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError: Internal Server Error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel2"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt_header_Authorization": []
          }
        ]
      }
    },
    "/api/v1/merchants/tpv-plus": {
      "post": {
        "tags": [
          "tpv-plus"
        ],
        "summary": "Create tpv plus qr",
        "description": "Create a TPV Plus based qr which can be used to verify the bank account, payer apps from which the payment was made",
        "operationId": "tpv-plus#createTPVPlus",
        "parameters": [
          {
            "name": "merchantId",
            "in": "header",
            "description": "Id associated with the merchant on our platform",
            "allowEmptyValue": true,
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id associated with the merchant on our platform",
              "example": "1240689979139556556"
            },
            "example": "1240689979139556556"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTPVPlusRequestBody"
              },
              "example": {
                "amount": 10000,
                "bankCodes": [
                  "ICIC",
                  "HDFC",
                  "FDRL"
                ],
                "createdAt": "2024-05-17T19:17:32+05:30",
                "expireAfter": 10,
                "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                "intentLink": "upi://pay?pa=test-auto-pgruosncak@okokaxis\u0026pn=merchant-4\u0026am=100.00\u0026tr=SU1240659756905923780\u0026tn=samplesingleuseqr\u0026cu=INR\u0026mc=1234",
                "merchantVpa": "fastestupi@pineaxis",
                "metadata": {
                  "InvoiceNumber": "INV-21-12-009"
                },
                "minAmount": 1000,
                "payerApps": [
                  "gpay",
                  "phonepe",
                  "paytm",
                  "amazonpay"
                ],
                "payerVPAs": [
                  "aadhitya@okhdfc",
                  "ram@okaxis"
                ],
                "qrCode": "",
                "reason": {
                  "code": "unable-to-fulfill-request",
                  "desc": "unable-to-fulfill-request",
                  "mandateRevokeReason": "merchant-initiated",
                  "npciErrCategory": "TD",
                  "npciErrCode": "YG",
                  "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
                  "npciRespCode": "YG",
                  "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)",
                  "setuDescription": "Merchant PSP error",
                  "suggestedAction": "Merchant PSP error"
                },
                "refId": "1240689979139556558",
                "referenceId": "1240689979139556556",
                "shortLink": "upipay.setu.co/Np3KnBCM8Om0",
                "status": "active",
                "transactionNote": "test transaction"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateTPVPlusResponse"
                },
                "example": {
                  "amount": 10000,
                  "bankCodes": [
                    "ICIC",
                    "HDFC",
                    "FDRL"
                  ],
                  "createdAt": "2024-05-17T19:17:32+05:30",
                  "expireAfter": 10,
                  "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "intentLink": "upi://pay?pa=test-auto-pgruosncak@okokaxis\u0026pn=merchant-4\u0026am=100.00\u0026tr=SU1240659756905923780\u0026tn=samplesingleuseqr\u0026cu=INR\u0026mc=1234",
                  "merchantId": "1240689979139556556",
                  "merchantVpa": "fastestupi@pineaxis",
                  "metadata": {
                    "InvoiceNumber": "INV-21-12-009"
                  },
                  "minAmount": 1000,
                  "payerApps": [
                    "gpay",
                    "phonepe",
                    "paytm",
                    "amazonpay"
                  ],
                  "payerVPAs": [
                    "aadhitya@okhdfc",
                    "ram@okaxis"
                  ],
                  "qrCode": "",
                  "reason": {
                    "code": "unable-to-fulfill-request",
                    "desc": "unable-to-fulfill-request",
                    "mandateRevokeReason": "merchant-initiated",
                    "npciErrCategory": "TD",
                    "npciErrCode": "YG",
                    "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
                    "npciRespCode": "YG",
                    "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)",
                    "setuDescription": "Merchant PSP error",
                    "suggestedAction": "Merchant PSP error"
                  },
                  "refId": "1240689979139556558",
                  "referenceId": "1240689979139556556",
                  "requestId": "cjqml1f2e5ocq2mesej0",
                  "shortLink": "upipay.setu.co/Np3KnBCM8Om0",
                  "status": "active",
                  "transactionNote": "test transaction"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest: Bad Request response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel2"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized: Unauthorized response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel2"
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError: Internal Server Error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel2"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt_header_Authorization": []
          }
        ]
      }
    },
    "/api/v1/merchants/tpv-plus/{id}": {
      "get": {
        "tags": [
          "tpv-plus"
        ],
        "summary": "Fetch tpv plus request by id",
        "description": "API to fetch a tpv plus request resource by id, which has useful information like the current status of a tpv plus request",
        "operationId": "tpv-plus#fetchTPVPlus",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id associated with the tpv plus resource",
            "required": true,
            "schema": {
              "type": "string",
              "description": "id associated with the tpv plus resource",
              "example": "1240689979139556556"
            },
            "example": "1240689979139556556"
          },
          {
            "name": "merchantId",
            "in": "header",
            "description": "Id associated with the merchant on our platform",
            "allowEmptyValue": true,
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id associated with the merchant on our platform",
              "example": "1240689979139556556"
            },
            "example": "1240689979139556556"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FetchTPVPlusResponse"
                },
                "example": {
                  "amount": 10000,
                  "bankCodes": [
                    "ICIC",
                    "HDFC",
                    "FDRL"
                  ],
                  "createdAt": "2024-05-17T19:17:32+05:30",
                  "expireAfter": 10,
                  "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "intentLink": "upi://pay?pa=test-auto-pgruosncak@okokaxis\u0026pn=merchant-4\u0026am=100.00\u0026tr=SU1240659756905923780\u0026tn=samplesingleuseqr\u0026cu=INR\u0026mc=1234",
                  "merchantId": "1240689979139556556",
                  "merchantVpa": "fastestupi@pineaxis",
                  "metadata": {
                    "InvoiceNumber": "INV-21-12-009"
                  },
                  "minAmount": 1000,
                  "payerApps": [
                    "gpay",
                    "phonepe",
                    "paytm",
                    "amazonpay"
                  ],
                  "payerVPAs": [
                    "aadhitya@okhdfc",
                    "ram@okaxis"
                  ],
                  "paymentDetails": {
                    "customerAccountType": "SAVINGS",
                    "customerVpa": "test-auto-tyvmm59i9b@okokaxis",
                    "paymentId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                    "paymentStatus": "initiated",
                    "rrn": "124068997913",
                    "txnId": "SETmBZkQOV0M7wyyP1V4PIFhRSzW5eSjmYI",
                    "txnTs": "2024-06-17T19:17:32+05:30"
                  },
                  "qrCode": "",
                  "reason": {
                    "code": "unable-to-fulfill-request",
                    "desc": "unable-to-fulfill-request",
                    "mandateRevokeReason": "merchant-initiated",
                    "npciErrCategory": "TD",
                    "npciErrCode": "YG",
                    "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
                    "npciRespCode": "YG",
                    "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)",
                    "setuDescription": "Merchant PSP error",
                    "suggestedAction": "Merchant PSP error"
                  },
                  "refId": "1240689979139556558",
                  "referenceId": "1240689979139556556",
                  "requestId": "cjqml1f2e5ocq2mesej0",
                  "shortLink": "upipay.setu.co/Np3KnBCM8Om0",
                  "status": "active",
                  "transactionNote": "test transaction"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest: Bad Request response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel2"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized: Unauthorized response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel2"
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError: Internal Server Error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel2"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt_header_Authorization": []
          }
        ]
      }
    },
    "/api/v1/merchants/tpv/{id}": {
      "get": {
        "tags": [
          "tpv"
        ],
        "summary": "Fetch tpv request by id",
        "description": "API to fetch a tpv request resource by id, which has useful information like the current status of a tpv request",
        "operationId": "tpv#fetchTPV",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id associated with the tpv",
            "required": true,
            "schema": {
              "type": "string",
              "description": "id associated with the tpv",
              "example": "1240689979139556556"
            },
            "example": "1240689979139556556"
          },
          {
            "name": "merchantId",
            "in": "header",
            "description": "Id associated with the merchant on our platform",
            "allowEmptyValue": true,
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id associated with the merchant on our platform",
              "example": "1240689979139556556"
            },
            "example": "1240689979139556556"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FetchTPVResponse"
                },
                "example": {
                  "amount": 10000,
                  "closedAt": "Velit dicta quia vel.",
                  "createdAt": "2024-05-17T19:17:32+05:30",
                  "expireAfter": 10,
                  "id": "1240689979139556556",
                  "ifscMatchType": "Laborum rerum error voluptatem.",
                  "intentLink": "upi://pay?pa=test-auto-pgruosncak@okokaxis\u0026pn=merchant-4\u0026am=100.00\u0026tr=SU1240659756905923780\u0026tn=sample%20single%20use%20qr\u0026cu=INR\u0026mc=1234",
                  "merchantId": "1240689979139556556",
                  "merchantVpa": "fastestupi@pineaxis",
                  "metadata": {
                    "InvoiceNumber": "INV-21-12-009"
                  },
                  "minAmount": 1000,
                  "paymentDetails": {
                    "customerAccountType": "SAVINGS",
                    "customerVpa": "test-auto-tyvmm59i9b@okokaxis",
                    "paymentId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                    "paymentStatus": "initiated",
                    "rrn": "124068997913",
                    "txnId": "SETmBZkQOV0M7wyyP1V4PIFhRSzW5eSjmYI",
                    "txnTs": "2024-06-17T19:17:32+05:30"
                  },
                  "primaryAccount": {
                    "IFSC": "SBIN0000001",
                    "encryptedAccountName": "5e884898da28047151d0e56f8dc629277",
                    "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                    "hashedAccountName": "5e884898da28047151d0e56f8dc629277",
                    "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                    "maskedAccountName": "R*M*E*S*",
                    "maskedAccountNumber": "**** **** **** 7890"
                  },
                  "qrCode": "",
                  "reason": {
                    "code": "unable-to-fulfill-request",
                    "desc": "unable-to-fulfill-request",
                    "mandateRevokeReason": "merchant-initiated",
                    "npciErrCategory": "TD",
                    "npciErrCode": "YG",
                    "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
                    "npciRespCode": "YG",
                    "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)",
                    "setuDescription": "Merchant PSP error",
                    "suggestedAction": "Merchant PSP error"
                  },
                  "refId": "1240689979139556558",
                  "referenceId": "1240689979139556556",
                  "requestId": "cjqml1f2e5ocq2mesej0",
                  "secondaryAccounts": [
                    {
                      "IFSC": "SBIN0000001",
                      "encryptedAccountName": "5e884898da28047151d0e56f8dc629277",
                      "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                      "hashedAccountName": "5e884898da28047151d0e56f8dc629277",
                      "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                      "maskedAccountName": "R*M*E*S*",
                      "maskedAccountNumber": "**** **** **** 7890"
                    },
                    {
                      "IFSC": "SBIN0000001",
                      "encryptedAccountName": "5e884898da28047151d0e56f8dc629277",
                      "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                      "hashedAccountName": "5e884898da28047151d0e56f8dc629277",
                      "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                      "maskedAccountName": "R*M*E*S*",
                      "maskedAccountNumber": "**** **** **** 7890"
                    },
                    {
                      "IFSC": "SBIN0000001",
                      "encryptedAccountName": "5e884898da28047151d0e56f8dc629277",
                      "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                      "hashedAccountName": "5e884898da28047151d0e56f8dc629277",
                      "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                      "maskedAccountName": "R*M*E*S*",
                      "maskedAccountNumber": "**** **** **** 7890"
                    },
                    {
                      "IFSC": "SBIN0000001",
                      "encryptedAccountName": "5e884898da28047151d0e56f8dc629277",
                      "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                      "hashedAccountName": "5e884898da28047151d0e56f8dc629277",
                      "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                      "maskedAccountName": "R*M*E*S*",
                      "maskedAccountNumber": "**** **** **** 7890"
                    }
                  ],
                  "shortLink": "upipay.setu.co/Np3KnBCM8Om0",
                  "status": "active",
                  "transactionNote": "test transaction"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest: Bad Request response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel2"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized: Unauthorized response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel2"
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError: Internal Server Error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel2"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt_header_Authorization": []
          }
        ]
      }
    },
    "/api/v1/merchants/tpv/{id}/expire": {
      "put": {
        "tags": [
          "tpv"
        ],
        "summary": "Expire tpv instance by id",
        "description": "API to expire a tpv request resource by id",
        "operationId": "tpv#expireTPV",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id associated with the tpv",
            "required": true,
            "schema": {
              "type": "string",
              "description": "id associated with the tpv",
              "example": "1240689979139556556"
            },
            "example": "1240689979139556556"
          },
          {
            "name": "merchantId",
            "in": "header",
            "description": "Id associated with the merchant on our platform",
            "allowEmptyValue": true,
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id associated with the merchant on our platform",
              "example": "1240689979139556556"
            },
            "example": "1240689979139556556"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateTPVResponse"
                },
                "example": {
                  "amount": 10000,
                  "closedAt": "Molestias ipsa delectus sed corporis qui quod.",
                  "createdAt": "2024-05-17T19:17:32+05:30",
                  "expireAfter": 10,
                  "id": "1240689979139556556",
                  "ifscMatchType": "Laudantium ullam.",
                  "intentLink": "upi://pay?pa=test-auto-pgruosncak@okokaxis\u0026pn=merchant-4\u0026am=100.00\u0026tr=SU1240659756905923780\u0026tn=sample%20single%20use%20qr\u0026cu=INR\u0026mc=1234",
                  "merchantId": "1240689979139556556",
                  "merchantVpa": "fastestupi@pineaxis",
                  "metadata": {
                    "InvoiceNumber": "INV-21-12-009"
                  },
                  "minAmount": 1000,
                  "primaryAccount": {
                    "IFSC": "SBIN0000001",
                    "encryptedAccountName": "5e884898da28047151d0e56f8dc629277",
                    "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                    "hashedAccountName": "5e884898da28047151d0e56f8dc629277",
                    "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                    "maskedAccountName": "R*M*E*S*",
                    "maskedAccountNumber": "**** **** **** 7890"
                  },
                  "qrCode": "",
                  "reason": {
                    "code": "unable-to-fulfill-request",
                    "desc": "unable-to-fulfill-request",
                    "mandateRevokeReason": "merchant-initiated",
                    "npciErrCategory": "TD",
                    "npciErrCode": "YG",
                    "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
                    "npciRespCode": "YG",
                    "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)",
                    "setuDescription": "Merchant PSP error",
                    "suggestedAction": "Merchant PSP error"
                  },
                  "refId": "1240689979139556558",
                  "referenceId": "1240689979139556556",
                  "requestId": "cjqml1f2e5ocq2mesej0",
                  "secondaryAccounts": [
                    {
                      "IFSC": "SBIN0000001",
                      "encryptedAccountName": "5e884898da28047151d0e56f8dc629277",
                      "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                      "hashedAccountName": "5e884898da28047151d0e56f8dc629277",
                      "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                      "maskedAccountName": "R*M*E*S*",
                      "maskedAccountNumber": "**** **** **** 7890"
                    },
                    {
                      "IFSC": "SBIN0000001",
                      "encryptedAccountName": "5e884898da28047151d0e56f8dc629277",
                      "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                      "hashedAccountName": "5e884898da28047151d0e56f8dc629277",
                      "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                      "maskedAccountName": "R*M*E*S*",
                      "maskedAccountNumber": "**** **** **** 7890"
                    },
                    {
                      "IFSC": "SBIN0000001",
                      "encryptedAccountName": "5e884898da28047151d0e56f8dc629277",
                      "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                      "hashedAccountName": "5e884898da28047151d0e56f8dc629277",
                      "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                      "maskedAccountName": "R*M*E*S*",
                      "maskedAccountNumber": "**** **** **** 7890"
                    },
                    {
                      "IFSC": "SBIN0000001",
                      "encryptedAccountName": "5e884898da28047151d0e56f8dc629277",
                      "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                      "hashedAccountName": "5e884898da28047151d0e56f8dc629277",
                      "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                      "maskedAccountName": "R*M*E*S*",
                      "maskedAccountNumber": "**** **** **** 7890"
                    }
                  ],
                  "shortLink": "upipay.setu.co/Np3KnBCM8Om0",
                  "status": "active",
                  "transactionNote": "test transaction"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest: Bad Request response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel2"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized: Unauthorized response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel2"
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError: Internal Server Error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel2"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt_header_Authorization": []
          }
        ]
      }
    },
    "/api/v1/merchants/vpas": {
      "post": {
        "tags": [
          "vpa"
        ],
        "summary": "Register a VPA (UPI id)",
        "description": "API to register a UPI id on our platform, the VPA will be registered and verified only if it is available",
        "operationId": "vpa#create",
        "parameters": [
          {
            "name": "merchantId",
            "in": "header",
            "description": "Id associated with the merchant on our platform",
            "allowEmptyValue": true,
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id associated with the merchant on our platform",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRequestBody6"
              },
              "example": {
                "referenceId": "1240689979139556557",
                "vpa": "fastestupi@pineaxis"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created response.",
            "headers": {
              "requestId": {
                "schema": {
                  "type": "string",
                  "example": "cjqml1f2e5ocq2mesej0"
                },
                "example": "cjqml1f2e5ocq2mesej0"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VpaResponse"
                },
                "example": {
                  "createdAt": "2024-05-17T19:17:32+05:30",
                  "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "referenceId": "1240689979139556557",
                  "status": "active",
                  "verificationStatus": "verified",
                  "vpa": "fastestupi@pineaxis"
                }
              }
            }
          },
          "400": {
            "description": "Bad request: Bad Request response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Forbidden response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not found: Not Found response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error: Internal Server Error response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt_header_Authorization": []
          }
        ]
      }
    },
    "/api/v1/merchants/vpas/availability": {
      "post": {
        "tags": [
          "vpa"
        ],
        "summary": "Check VPA availability",
        "description": "API to check if a UPI id is available to be registered by a merchant",
        "operationId": "vpa#checkAvailability",
        "parameters": [
          {
            "name": "merchantId",
            "in": "header",
            "description": "Id associated with the merchant on our platform",
            "allowEmptyValue": true,
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id associated with the merchant on our platform",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CheckAvailabilityRequestBody"
              },
              "example": {
                "vpa": "fastestupi@pineaxis"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK response.",
            "headers": {
              "requestId": {
                "schema": {
                  "type": "string",
                  "example": "cjqml1f2e5ocq2mesej0"
                },
                "example": "cjqml1f2e5ocq2mesej0"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckVpaAvailabilityResponse"
                },
                "example": {
                  "availabilityStatus": "available",
                  "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "vpa": "fastestupi@pineaxis"
                }
              }
            }
          },
          "400": {
            "description": "Bad request: Bad Request response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Forbidden response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not found: Not Found response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error: Internal Server Error response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt_header_Authorization": []
          }
        ]
      }
    },
    "/api/v1/merchants/vpas/{id}": {
      "get": {
        "tags": [
          "vpa"
        ],
        "summary": "Fetch VPA by id",
        "description": "API to fetch the VPA resource by id (the same id returned in the Register a VPA API response), the response has useful information like the current status of the vpa",
        "operationId": "vpa#fetchById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the resource, which is the same the id returned in the Create \u003cresource\u003e API response",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id of the resource, which is the same the id returned in the Create \u003cresource\u003e API response",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          {
            "name": "merchantId",
            "in": "header",
            "description": "Id associated with the merchant on our platform",
            "allowEmptyValue": true,
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id associated with the merchant on our platform",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "headers": {
              "requestId": {
                "schema": {
                  "type": "string",
                  "example": "cjqml1f2e5ocq2mesej0"
                },
                "example": "cjqml1f2e5ocq2mesej0"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VpaResponse"
                },
                "example": {
                  "createdAt": "2024-05-17T19:17:32+05:30",
                  "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "referenceId": "1240689979139556557",
                  "status": "active",
                  "verificationStatus": "verified",
                  "vpa": "fastestupi@pineaxis"
                }
              }
            }
          },
          "400": {
            "description": "Bad request: Bad Request response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Forbidden response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not found: Not Found response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error: Internal Server Error response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt_header_Authorization": []
          }
        ]
      }
    },
    "/api/v1/merchants/vpas/{id}/status": {
      "put": {
        "tags": [
          "vpa"
        ],
        "summary": "Activate or deactivate a VPA (UPI id)",
        "description": "API to activate or deactivate a UPI id, to temporarily disallow payments and verification calls on the UPI id",
        "operationId": "vpa#updateStatus",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the resource, which is the same the id returned in the Create \u003cresource\u003e API response",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id of the resource, which is the same the id returned in the Create \u003cresource\u003e API response",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          {
            "name": "merchantId",
            "in": "header",
            "description": "Id associated with the merchant on our platform",
            "allowEmptyValue": true,
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id associated with the merchant on our platform",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateStatusRequestBody"
              },
              "example": {
                "status": "active"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK response.",
            "headers": {
              "requestId": {
                "schema": {
                  "type": "string",
                  "example": "cjqml1f2e5ocq2mesej0"
                },
                "example": "cjqml1f2e5ocq2mesej0"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VpaResponse"
                },
                "example": {
                  "createdAt": "2024-05-17T19:17:32+05:30",
                  "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "referenceId": "1240689979139556557",
                  "status": "active",
                  "verificationStatus": "verified",
                  "vpa": "fastestupi@pineaxis"
                }
              }
            }
          },
          "400": {
            "description": "Bad request: Bad Request response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Forbidden response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not found: Not Found response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error: Internal Server Error response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt_header_Authorization": []
          }
        ]
      }
    },
    "/api/v1/merchants/{id}": {
      "get": {
        "tags": [
          "merchant"
        ],
        "summary": "Fetch merchant",
        "description": "Fetch merchant",
        "operationId": "merchant#fetchById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the resource, which is the same the id returned in the Create \u003cresource\u003e API response",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id of the resource, which is the same the id returned in the Create \u003cresource\u003e API response",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "headers": {
              "requestId": {
                "schema": {
                  "type": "string",
                  "example": "cjqml1f2e5ocq2mesej0"
                },
                "example": "cjqml1f2e5ocq2mesej0"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MerchantResponse"
                },
                "example": {
                  "acceptDeemedTxns": true,
                  "addressProviderId": "1237800298651584417",
                  "businessName": "Setu",
                  "businessType": "PROPRIETARY",
                  "createdAt": "2024-05-17T19:17:32+05:30",
                  "documentStatus": "APPROVED",
                  "franchiseName": "Setu UPI",
                  "genre": "ONLINE",
                  "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "legalName": "BrokenTusk Technologies Pvt Ltd",
                  "mcc": "5432",
                  "merchantName": "Quae itaque.",
                  "merchantType": "large",
                  "onboardingType": "aggregator",
                  "paymentAggregatorId": "Minus aliquid et quia.",
                  "paymentModes": [
                    "saving",
                    "lite",
                    "erupi",
                    "rupay_cc",
                    "ppi",
                    "current",
                    "nro",
                    "nre"
                  ],
                  "productAccountId": "Temporibus dignissimos minus iure voluptatem fuga.",
                  "products": [
                    "pay_single",
                    "pay_multi",
                    "tpv",
                    "tpv_plus",
                    "intent_autopay"
                  ],
                  "route": {
                    "chargeTransfer": [
                      {
                        "accountIfsc": "Consequatur officia.",
                        "accountNumber": "Asperiores qui.",
                        "remarks": "Nihil est doloremque et voluptatem quas.",
                        "value": 0.5209121384380389
                      },
                      {
                        "accountIfsc": "Consequatur officia.",
                        "accountNumber": "Asperiores qui.",
                        "remarks": "Nihil est doloremque et voluptatem quas.",
                        "value": 0.5209121384380389
                      }
                    ],
                    "chargeTransferType": "Percentage",
                    "ownerId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                    "ownerType": "merchant",
                    "transferType": "Percentage",
                    "transfers": [
                      {
                        "accountIfsc": "Suscipit cumque iste molestiae cumque.",
                        "accountNumber": "Officiis et explicabo voluptatem nesciunt.",
                        "remarks": "Veniam sit inventore modi modi qui.",
                        "value": 0.03737973982778193
                      },
                      {
                        "accountIfsc": "Suscipit cumque iste molestiae cumque.",
                        "accountNumber": "Officiis et explicabo voluptatem nesciunt.",
                        "remarks": "Veniam sit inventore modi modi qui.",
                        "value": 0.03737973982778193
                      },
                      {
                        "accountIfsc": "Suscipit cumque iste molestiae cumque.",
                        "accountNumber": "Officiis et explicabo voluptatem nesciunt.",
                        "remarks": "Veniam sit inventore modi modi qui.",
                        "value": 0.03737973982778193
                      }
                    ]
                  },
                  "settlement": {
                    "cycles": [
                      "Ea modi.",
                      "Nihil dolor exercitationem dolorem aut.",
                      "Amet maxime dolor labore eum."
                    ],
                    "frequency": "TPlusOne",
                    "isEnabled": true,
                    "onhold": true,
                    "payoutAdjustable": true,
                    "reconRequired": false,
                    "type": "Gross",
                    "types": [
                      "Gross",
                      "Net",
                      "Direct"
                    ]
                  },
                  "settlementTransfers": "Dolorem quis.",
                  "standardAccountId": "Non corporis dolor id ex reprehenderit.",
                  "transactionStatus": "active",
                  "vpaHandles": [
                    "pineaxis"
                  ],
                  "vpaPrefix": "acmecorp.*"
                }
              }
            }
          },
          "400": {
            "description": "Bad request: Bad Request response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not found: Not Found response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error: Internal Server Error response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt_header_Authorization": []
          }
        ]
      }
    },
    "/api/v1/merchants/{id}/status": {
      "put": {
        "tags": [
          "merchant"
        ],
        "summary": "Merchant transaction status update",
        "description": "API to be used to update merchant transaction status",
        "operationId": "merchant#updateTxnStatus",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the resource, which is the same the id returned in the Create \u003cresource\u003e API response",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id of the resource, which is the same the id returned in the Create \u003cresource\u003e API response",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTxnStatusRequestBody"
              },
              "example": {
                "transactionStatus": "active"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK response.",
            "headers": {
              "requestId": {
                "schema": {
                  "type": "string",
                  "example": "cjqml1f2e5ocq2mesej0"
                },
                "example": "cjqml1f2e5ocq2mesej0"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MerchantResponse"
                },
                "example": {
                  "acceptDeemedTxns": true,
                  "addressProviderId": "1237800298651584417",
                  "businessName": "Setu",
                  "businessType": "PROPRIETARY",
                  "createdAt": "2024-05-17T19:17:32+05:30",
                  "documentStatus": "APPROVED",
                  "franchiseName": "Setu UPI",
                  "genre": "ONLINE",
                  "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "legalName": "BrokenTusk Technologies Pvt Ltd",
                  "mcc": "5432",
                  "merchantName": "Distinctio ad voluptas et qui ut soluta.",
                  "merchantType": "large",
                  "onboardingType": "aggregator",
                  "paymentAggregatorId": "At est totam.",
                  "paymentModes": [
                    "saving",
                    "lite",
                    "erupi",
                    "rupay_cc",
                    "ppi",
                    "current",
                    "nro",
                    "nre"
                  ],
                  "productAccountId": "Quidem repellendus impedit cumque voluptas.",
                  "products": [
                    "pay_single",
                    "pay_multi",
                    "tpv",
                    "tpv_plus",
                    "intent_autopay"
                  ],
                  "route": {
                    "chargeTransfer": [
                      {
                        "accountIfsc": "Consequatur officia.",
                        "accountNumber": "Asperiores qui.",
                        "remarks": "Nihil est doloremque et voluptatem quas.",
                        "value": 0.5209121384380389
                      },
                      {
                        "accountIfsc": "Consequatur officia.",
                        "accountNumber": "Asperiores qui.",
                        "remarks": "Nihil est doloremque et voluptatem quas.",
                        "value": 0.5209121384380389
                      }
                    ],
                    "chargeTransferType": "Percentage",
                    "ownerId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                    "ownerType": "merchant",
                    "transferType": "Percentage",
                    "transfers": [
                      {
                        "accountIfsc": "Suscipit cumque iste molestiae cumque.",
                        "accountNumber": "Officiis et explicabo voluptatem nesciunt.",
                        "remarks": "Veniam sit inventore modi modi qui.",
                        "value": 0.03737973982778193
                      },
                      {
                        "accountIfsc": "Suscipit cumque iste molestiae cumque.",
                        "accountNumber": "Officiis et explicabo voluptatem nesciunt.",
                        "remarks": "Veniam sit inventore modi modi qui.",
                        "value": 0.03737973982778193
                      },
                      {
                        "accountIfsc": "Suscipit cumque iste molestiae cumque.",
                        "accountNumber": "Officiis et explicabo voluptatem nesciunt.",
                        "remarks": "Veniam sit inventore modi modi qui.",
                        "value": 0.03737973982778193
                      }
                    ]
                  },
                  "settlement": {
                    "cycles": [
                      "Ea modi.",
                      "Nihil dolor exercitationem dolorem aut.",
                      "Amet maxime dolor labore eum."
                    ],
                    "frequency": "TPlusOne",
                    "isEnabled": true,
                    "onhold": true,
                    "payoutAdjustable": true,
                    "reconRequired": false,
                    "type": "Gross",
                    "types": [
                      "Gross",
                      "Net",
                      "Direct"
                    ]
                  },
                  "settlementTransfers": "Eveniet assumenda quia.",
                  "standardAccountId": "Eveniet porro corrupti cumque similique.",
                  "transactionStatus": "active",
                  "vpaHandles": [
                    "pineaxis"
                  ],
                  "vpaPrefix": "acmecorp.*"
                }
              }
            }
          },
          "400": {
            "description": "Bad request: Bad Request response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Forbidden response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not found: Not Found response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error: Internal Server Error response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt_header_Authorization": []
          }
        ]
      }
    },
    "/api/v1/resolve/{code}": {
      "get": {
        "tags": [
          "short-link"
        ],
        "summary": "Resolve shortlink",
        "description": "API to resolve a shortlink to its underlying payment context",
        "operationId": "short-link#fetchByShortCode",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "description": "short code used for payment short link",
            "required": true,
            "schema": {
              "type": "string",
              "description": "short code used for payment short link",
              "example": "Np3KnBCM8Om0"
            },
            "example": "Np3KnBCM8Om0"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "headers": {
              "requestId": {
                "schema": {
                  "type": "string",
                  "example": "cjqml1f2e5ocq2mesej0"
                },
                "example": "cjqml1f2e5ocq2mesej0"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResolveShortlinkResponse"
                },
                "example": {
                  "amount": 10000,
                  "closedAt": "2024-06-17T19:17:32+05:30",
                  "createdAt": "2024-05-17T19:17:32+05:30",
                  "currency": "Unde eligendi quaerat voluptatibus eos libero.",
                  "expiryDate": "2024-06-17T19:17:32+05:30",
                  "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "intentLink": "upi://pay?pa=test-auto-pgruosncak@okokaxis\u0026pn=merchant-4\u0026am=100.00\u0026tr=SU1240659756905923780\u0026tn=sample%20single%20use%20qr\u0026cu=INR\u0026mc=1234",
                  "mandateDetails": {
                    "amount": 1000,
                    "customerRevocable": true,
                    "customerVpa": "ram@axis",
                    "endDate": "02012008",
                    "frequency": "monthly",
                    "mandateLiveAt": "2023-09-04 12:08:20.202644 +0530 IST",
                    "reason": {
                      "code": "unable-to-fulfill-request",
                      "desc": "unable-to-fulfill-request",
                      "mandateRevokeReason": "merchant-initiated",
                      "npciErrCategory": "TD",
                      "npciErrCode": "YG",
                      "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
                      "npciRespCode": "YG",
                      "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)",
                      "setuDescription": "Merchant PSP error",
                      "suggestedAction": "Merchant PSP error"
                    },
                    "startDate": "02012006",
                    "status": "pending",
                    "txnId": "BTTZrc5gDFkuCr3n3I0ey4aNtzLOLR7K7aR",
                    "umn": "c27f5fc30d344e9594fce0afa34f8859@mypsp"
                  },
                  "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "merchantName": "Doofenshmirtz Evil Incorporated",
                  "merchantVpa": "fastestupi@pineaxis",
                  "metadata": {
                    "InvoiceNumber": "INV-21-12-009"
                  },
                  "minAmount": 1000,
                  "paymentDetails": {
                    "customerAccountType": "SAVINGS",
                    "customerVpa": "test-auto-tyvmm59i9b@okokaxis",
                    "paymentId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                    "paymentStatus": "initiated",
                    "rrn": "124068997913",
                    "txnId": "SETmBZkQOV0M7wyyP1V4PIFhRSzW5eSjmYI",
                    "txnTs": "2024-06-17T19:17:32+05:30"
                  },
                  "paymentType": "Odio accusantium dolorem repellat ut.",
                  "qrCode": "",
                  "reason": {
                    "code": "unable-to-fulfill-request",
                    "desc": "unable-to-fulfill-request",
                    "mandateRevokeReason": "merchant-initiated",
                    "npciErrCategory": "TD",
                    "npciErrCode": "YG",
                    "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
                    "npciRespCode": "YG",
                    "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)",
                    "setuDescription": "Merchant PSP error",
                    "suggestedAction": "Merchant PSP error"
                  },
                  "refId": "1240689979139556558",
                  "referenceId": "1240689979139556557",
                  "shortLink": "upipay.setu.co/Np3KnBCM8Om0",
                  "status": "active",
                  "transactionNote": "testpay"
                }
              }
            }
          },
          "400": {
            "description": "Bad request: Bad Request response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Forbidden response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not found: Not Found response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error: Internal Server Error response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "BaseSetuAPIErrorModel": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "error code",
            "example": "bad-request"
          },
          "detail": {
            "type": "string",
            "description": "a detailed description of the error",
            "example": "bad-request"
          },
          "docUrl": {
            "type": "string",
            "description": "link to a doc with more information about the error",
            "example": ""
          }
        },
        "example": {
          "code": "bad-request",
          "detail": "bad-request",
          "docUrl": ""
        }
      },
      "BaseSetuAPIErrorModel2": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "error code",
            "example": "bad-request"
          },
          "detail": {
            "type": "string",
            "description": "a detailed description of the error",
            "example": "bad-request"
          },
          "docUrl": {
            "type": "string",
            "description": "link to a doc with more information about the error",
            "example": ""
          },
          "requestId": {
            "type": "string",
            "description": "a unique id associated with a particular request",
            "example": "cjqnn4cupm66hpf0a920"
          }
        },
        "example": {
          "code": "bad-request",
          "detail": "bad-request",
          "docUrl": "",
          "requestId": "cjqnn4cupm66hpf0a920"
        }
      },
      "BeneficiaryAccountResponse": {
        "type": "object",
        "properties": {
          "accountHolderName": {
            "type": "string",
            "description": "account holder name for the settlement bank account",
            "example": "deku"
          },
          "accountNumber": {
            "type": "string",
            "description": "account number for the settlement bank account",
            "example": "1234567890"
          },
          "accountType": {
            "type": "string",
            "description": "account type for the settlement bank account",
            "example": "CURRENT",
            "enum": [
              "CURRENT",
              "SAVINGS"
            ]
          },
          "beneCode": {
            "type": "string",
            "description": "bene code associated with the settlement bank account",
            "example": "1234567890"
          },
          "checkedRegistrationStatusAt": {
            "type": "string",
            "description": "timestamp of the last registration status check",
            "example": "2024-05-17T19:17:32+05:30",
            "format": "date-time"
          },
          "createdAt": {
            "type": "string",
            "description": "RFC 3339 timestamp to indicate the creation date \u0026 time for the resource",
            "example": "2024-05-17T19:17:32+05:30",
            "format": "date-time"
          },
          "id": {
            "type": "string",
            "description": "Id of the resource, which is the same the id returned in the Create \u003cresource\u003e API response",
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "ifsc": {
            "type": "string",
            "description": "ifsc for the settlement bank account",
            "example": "HDFC0000001"
          },
          "isActive": {
            "type": "boolean",
            "description": "defines the validity of the settlement bank account",
            "example": true
          },
          "isVerified": {
            "type": "boolean",
            "description": "defines whether the account has been verified or not",
            "example": true
          },
          "merchantId": {
            "type": "string",
            "description": "Id associated with the merchant on our platform",
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "paymentMode": {
            "type": "string",
            "description": "Payment mode to be use during settlements with the bank account",
            "example": "NEFT",
            "enum": [
              "NEFT",
              "IFT"
            ]
          },
          "registrationFailureReason": {
            "$ref": "#/components/schemas/BeneficiaryRegistrationFailureReason"
          },
          "registrationStatus": {
            "type": "string",
            "description": "status of the beneficiary registration",
            "example": "not_initiated",
            "enum": [
              "not_initiated",
              "initiated",
              "success",
              "failed"
            ]
          }
        },
        "example": {
          "accountHolderName": "deku",
          "accountNumber": "1234567890",
          "accountType": "CURRENT",
          "beneCode": "1234567890",
          "checkedRegistrationStatusAt": "2024-05-17T19:17:32+05:30",
          "createdAt": "2024-05-17T19:17:32+05:30",
          "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
          "ifsc": "HDFC0000001",
          "isActive": true,
          "isVerified": true,
          "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
          "paymentMode": "NEFT",
          "registrationFailureReason": {
            "code": "16",
            "desc": "Invalid account ifsc code"
          },
          "registrationStatus": "not_initiated"
        }
      },
      "BeneficiaryRegistrationFailureReason": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "beneficiary registration failure code",
            "example": "16"
          },
          "desc": {
            "type": "string",
            "description": "beneficiary registration failure description",
            "example": "Invalid account ifsc code"
          }
        },
        "example": {
          "code": "16",
          "desc": "Invalid account ifsc code"
        }
      },
      "CheckAvailabilityRequestBody": {
        "type": "object",
        "properties": {
          "vpa": {
            "type": "string",
            "description": "VPA to be created",
            "example": "fastestupi@pineaxis",
            "pattern": "^[a-z0-9.-]*@[a-z]*$",
            "minLength": 1
          }
        },
        "example": {
          "vpa": "fastestupi@pineaxis"
        },
        "required": [
          "vpa"
        ]
      },
      "CheckVpaAvailabilityResponse": {
        "type": "object",
        "properties": {
          "availabilityStatus": {
            "type": "string",
            "description": "indicates if given vpa is available for use or not",
            "example": "available",
            "enum": [
              "available",
              "not_available"
            ]
          },
          "merchantId": {
            "type": "string",
            "description": "Id associated with the merchant on our platform",
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "vpa": {
            "type": "string",
            "description": "UPI id of the merchant to be used to collect payments",
            "example": "fastestupi@pineaxis",
            "pattern": "^[a-z0-9.-]*@[a-z]*$"
          }
        },
        "example": {
          "availabilityStatus": "available",
          "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
          "vpa": "fastestupi@pineaxis"
        }
      },
      "CompactMerchantResponse": {
        "type": "object",
        "properties": {
          "acceptDeemedTxns": {
            "type": "boolean",
            "description": "Indicates whether deemed txns are to be accepted or not for the Merchant",
            "example": true
          },
          "businessName": {
            "type": "string",
            "description": "Brand name or Consumer facing name",
            "example": "Setu",
            "pattern": "^[a-zA-Z0-9 ]+$",
            "minLength": 1,
            "maxLength": 99
          },
          "businessType": {
            "type": "string",
            "description": "Incorporation type",
            "example": "PROPRIETARY",
            "enum": [
              "PROPRIETARY",
              "PARTNERSHIP",
              "PRIVATE",
              "PUBLIC",
              "OTHERS"
            ]
          },
          "createdAt": {
            "type": "string",
            "description": "RFC 3339 timestamp to indicate the creation date \u0026 time for the resource",
            "example": "2024-05-17T19:17:32+05:30",
            "format": "date-time"
          },
          "franchiseName": {
            "type": "string",
            "description": "Franchise name",
            "example": "Setu UPI",
            "pattern": "^[a-zA-Z0-9 ]+$"
          },
          "genre": {
            "type": "string",
            "description": "Online / Offline",
            "example": "ONLINE",
            "enum": [
              "ONLINE",
              "OFFLINE"
            ]
          },
          "id": {
            "type": "string",
            "description": "Id of the resource, which is the same the id returned in the Create \u003cresource\u003e API response",
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "legalName": {
            "type": "string",
            "description": "Legal name as per incorporation documents",
            "example": "BrokenTusk Technologies Pvt Ltd",
            "pattern": "^[a-zA-Z0-9 ]+$",
            "minLength": 1,
            "maxLength": 99
          },
          "mcc": {
            "type": "string",
            "description": "Category of business operation",
            "example": "5432"
          },
          "merchantName": {
            "type": "string",
            "example": "Velit ullam."
          },
          "merchantType": {
            "type": "string",
            "description": "merchant type",
            "example": "large",
            "enum": [
              "small",
              "large"
            ]
          },
          "onboardingType": {
            "type": "string",
            "description": "onboarding type",
            "default": "aggregator",
            "example": "aggregator",
            "enum": [
              "bank",
              "aggregator"
            ]
          },
          "paymentModes": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "bankwallet",
              "enum": [
                "saving",
                "default",
                "lite",
                "erupi",
                "rupay_cc",
                "ppi",
                "bankwallet",
                "current",
                "nro",
                "nre",
                "sod",
                "uod"
              ]
            },
            "description": "payment modes allowed for merchants",
            "example": [
              "saving",
              "lite",
              "erupi",
              "rupay_cc",
              "ppi",
              "current",
              "nro",
              "nre"
            ]
          },
          "products": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "recur_tpv",
              "enum": [
                "pay_single",
                "pay_multi",
                "offline_qr",
                "collect",
                "autopay",
                "recur_tpv",
                "pay_single_tpv",
                "pay_single_tpv_plus",
                "single_block_multi_debit",
                "reserve",
                "single_block_multi_debit_tpv",
                "reserve_tpv"
              ]
            },
            "description": "products allowed for merchants",
            "example": [
              "pay_single",
              "pay_multi",
              "tpv",
              "tpv_plus",
              "intent_autopay"
            ]
          },
          "route": {
            "$ref": "#/components/schemas/RouteConfiguration"
          },
          "settlement": {
            "$ref": "#/components/schemas/SettlementConfigurationObj"
          },
          "settlementTransfers": {
            "type": "string",
            "example": "Ut suscipit."
          },
          "transactionStatus": {
            "type": "string",
            "description": "Current Transaction Status of the Merchant",
            "example": "active",
            "enum": [
              "active",
              "inactive",
              "test",
              "live_high_risk",
              "blocked"
            ]
          },
          "vpaHandles": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "Omnis ut."
            },
            "description": "handles merchant supports",
            "example": [
              "pineaxis"
            ]
          },
          "vpaPrefix": {
            "type": "string",
            "description": "VPA prefix according to which the VPA needs to be registered",
            "example": "acmecorp.*"
          }
        },
        "example": {
          "acceptDeemedTxns": true,
          "businessName": "Setu",
          "businessType": "PROPRIETARY",
          "createdAt": "2024-05-17T19:17:32+05:30",
          "franchiseName": "Setu UPI",
          "genre": "ONLINE",
          "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
          "legalName": "BrokenTusk Technologies Pvt Ltd",
          "mcc": "5432",
          "merchantName": "Eos accusantium et dolores voluptatem corporis.",
          "merchantType": "large",
          "onboardingType": "aggregator",
          "paymentModes": [
            "saving",
            "lite",
            "erupi",
            "rupay_cc",
            "ppi",
            "current",
            "nro",
            "nre"
          ],
          "products": [
            "pay_single",
            "pay_multi",
            "tpv",
            "tpv_plus",
            "intent_autopay"
          ],
          "route": {
            "chargeTransfer": [
              {
                "accountIfsc": "Consequatur officia.",
                "accountNumber": "Asperiores qui.",
                "remarks": "Nihil est doloremque et voluptatem quas.",
                "value": 0.5209121384380389
              },
              {
                "accountIfsc": "Consequatur officia.",
                "accountNumber": "Asperiores qui.",
                "remarks": "Nihil est doloremque et voluptatem quas.",
                "value": 0.5209121384380389
              }
            ],
            "chargeTransferType": "Percentage",
            "ownerId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
            "ownerType": "merchant",
            "transferType": "Percentage",
            "transfers": [
              {
                "accountIfsc": "Suscipit cumque iste molestiae cumque.",
                "accountNumber": "Officiis et explicabo voluptatem nesciunt.",
                "remarks": "Veniam sit inventore modi modi qui.",
                "value": 0.03737973982778193
              },
              {
                "accountIfsc": "Suscipit cumque iste molestiae cumque.",
                "accountNumber": "Officiis et explicabo voluptatem nesciunt.",
                "remarks": "Veniam sit inventore modi modi qui.",
                "value": 0.03737973982778193
              },
              {
                "accountIfsc": "Suscipit cumque iste molestiae cumque.",
                "accountNumber": "Officiis et explicabo voluptatem nesciunt.",
                "remarks": "Veniam sit inventore modi modi qui.",
                "value": 0.03737973982778193
              }
            ]
          },
          "settlement": {
            "cycles": [
              "Ea modi.",
              "Nihil dolor exercitationem dolorem aut.",
              "Amet maxime dolor labore eum."
            ],
            "frequency": "TPlusOne",
            "isEnabled": true,
            "onhold": true,
            "payoutAdjustable": true,
            "reconRequired": false,
            "type": "Gross",
            "types": [
              "Gross",
              "Net",
              "Direct"
            ]
          },
          "settlementTransfers": "Est et aut minima.",
          "transactionStatus": "active",
          "vpaHandles": [
            "pineaxis"
          ],
          "vpaPrefix": "acmecorp.*"
        }
      },
      "CreateCollectResponse": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "integer",
            "description": "paise denominated value that needs to be collected from the user",
            "example": 10000,
            "minimum": 0,
            "maximum": 100000000000000000
          },
          "closedAt": {
            "type": "string",
            "description": "RFC 3339 timestamp to indicate the closure date \u0026 time",
            "example": "2024-05-17T19:17:32+05:30",
            "format": "date-time"
          },
          "createdAt": {
            "type": "string",
            "description": "RFC 3339 timestamp to indicate the creation date \u0026 time for the resource",
            "example": "2024-05-17T19:17:32+05:30",
            "format": "date-time"
          },
          "customerVpa": {
            "type": "string",
            "description": "UPI id of the customer to whom the collect request should be sent to",
            "example": "aadhitya@okaxis",
            "pattern": "^[A-Za-z0-9.-]*@[a-zA-Z0-9.-]*$"
          },
          "expireAfter": {
            "type": "integer",
            "description": "Expiry after (in minutes) for the collect request, the collect request will move to a closed state after this time has elapsed",
            "default": 30,
            "example": 2,
            "minimum": 1,
            "maximum": 64800
          },
          "id": {
            "type": "string",
            "description": "Id of the resource, which is the same the id returned in the Create \u003cresource\u003e API response",
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "merchantId": {
            "type": "string",
            "description": "Id associated with the merchant on our platform",
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "merchantVpa": {
            "type": "string",
            "description": "UPI id of the merchant on which the payments are collected",
            "example": "fastestupi@pineaxis"
          },
          "metadata": {
            "type": "string",
            "description": "field provided for the merchant to add additional key-value pairs",
            "example": {
              "InvoiceNumber": "INV-21-12-009"
            },
            "format": "binary"
          },
          "refId": {
            "type": "string",
            "description": "NPCI transaction refId",
            "example": "1240689979139556558",
            "pattern": "^[a-zA-Z0-9]*$",
            "minLength": 1,
            "maxLength": 35
          },
          "referenceId": {
            "type": "string",
            "description": "Id to be used by merchant to identify the collect request on our platform, this can be the customer's invoice number or loan number",
            "example": "1240689979139556557",
            "minLength": 1,
            "maxLength": 255
          },
          "status": {
            "type": "string",
            "description": "status defining the validity of the collect request",
            "example": "active",
            "enum": [
              "active",
              "paid",
              "closed"
            ]
          },
          "transactionNote": {
            "type": "string",
            "description": "note displayed to the customer at the payment page",
            "example": "Payment for loan repayment",
            "pattern": "^[^(){}\\[\\]\u003c\u003e]*$",
            "minLength": 1,
            "maxLength": 50
          }
        },
        "example": {
          "amount": 10000,
          "closedAt": "2024-05-17T19:17:32+05:30",
          "createdAt": "2024-05-17T19:17:32+05:30",
          "customerVpa": "aadhitya@okaxis",
          "expireAfter": 2,
          "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
          "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
          "merchantVpa": "fastestupi@pineaxis",
          "metadata": {
            "InvoiceNumber": "INV-21-12-009"
          },
          "refId": "1240689979139556558",
          "referenceId": "1240689979139556557",
          "status": "active",
          "transactionNote": "Payment for loan repayment"
        }
      },
      "CreateDqrResponse": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "integer",
            "description": "Amount (in paise) that needs to be collected from the user. If populated this value gets displayed on the payer PSP's payment page",
            "example": 10000,
            "minimum": 100
          },
          "createdAt": {
            "type": "string",
            "description": "RFC 3339 timestamp to indicate the creation date \u0026 time for the resource",
            "example": "2024-05-17T19:17:32+05:30",
            "format": "date-time"
          },
          "expiryDate": {
            "type": "string",
            "description": "RFC 3339 timestamp to indicate the expiry date \u0026 time",
            "example": "2024-06-17T19:17:32+05:30",
            "format": "date-time"
          },
          "id": {
            "type": "string",
            "description": "Id of the resource, which is the same the id returned in the Create \u003cresource\u003e API response",
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "intentLink": {
            "type": "string",
            "description": "A UPI pay intent link built according to the spec enforced by NPCI",
            "example": "upi://pay?pa=test-auto-pgruosncak@okokaxis\u0026pn=merchant-4\u0026am=100.00\u0026tr=SU1240659756905923780\u0026tn=sample%20single%20use%20qr\u0026cu=INR\u0026mc=1234"
          },
          "merchantId": {
            "type": "string",
            "description": "Id associated with the merchant on our platform",
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "merchantVpa": {
            "type": "string",
            "description": "UPI id of the merchant on which the payments are collected",
            "example": "fastestupi@pineaxis",
            "pattern": "^[a-z0-9.-]*@[a-zA-Z]*$"
          },
          "metadata": {
            "type": "object",
            "description": "field provided for the merchant to add additional key-value pairs",
            "example": {
              "Aut est corporis.": "Voluptas exercitationem.",
              "Ex non voluptatibus est autem repellat.": "Rerum est repellendus aut placeat.",
              "Sed nihil hic.": "Culpa itaque consequatur est sed dolores soluta."
            },
            "maxLength": 5,
            "additionalProperties": {
              "type": "string",
              "example": "Recusandae sit numquam quia."
            }
          },
          "minAmount": {
            "type": "integer",
            "description": "Minimum amount (in paise) - on setting this value the amount field on the PSP's payment page becomes editable and the customer can pay an amount equal to or greater than the minimum amount",
            "example": 1000,
            "minimum": 100
          },
          "qrCode": {
            "type": "string",
            "description": "QR code for the generated intent link in the form of base64 encoded string",
            "example": ""
          },
          "refId": {
            "type": "string",
            "description": "NPCI transaction refId",
            "example": "1240689979139556558",
            "pattern": "^[a-zA-Z0-9]*$",
            "minLength": 1,
            "maxLength": 35
          },
          "referenceId": {
            "type": "string",
            "description": "reference id in the merchant's system",
            "example": "1240689979139556557",
            "minLength": 1,
            "maxLength": 255
          },
          "shortLink": {
            "type": "string",
            "description": "A shortened URL for the given intent link",
            "example": "upipay.setu.co/Np3KnBCM8Om0"
          },
          "status": {
            "type": "string",
            "description": "status defining the validity of the payment link",
            "example": "active",
            "enum": [
              "inactive",
              "active",
              "paid",
              "closed"
            ]
          },
          "transactionNote": {
            "type": "string",
            "description": "Transaction note displayed to the customer at the payer PSP's payment page",
            "example": "testpay"
          }
        },
        "example": {
          "amount": 10000,
          "createdAt": "2024-05-17T19:17:32+05:30",
          "expiryDate": "2024-06-17T19:17:32+05:30",
          "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
          "intentLink": "upi://pay?pa=test-auto-pgruosncak@okokaxis\u0026pn=merchant-4\u0026am=100.00\u0026tr=SU1240659756905923780\u0026tn=sample%20single%20use%20qr\u0026cu=INR\u0026mc=1234",
          "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
          "merchantVpa": "fastestupi@pineaxis",
          "metadata": {
            "Aperiam inventore.": "Quis ex accusamus maiores illum magni veniam.",
            "Id a rerum error impedit distinctio quia.": "Quasi voluptatum a.",
            "Molestiae esse sunt.": "Consectetur aliquid impedit."
          },
          "minAmount": 1000,
          "qrCode": "",
          "refId": "1240689979139556558",
          "referenceId": "1240689979139556557",
          "shortLink": "upipay.setu.co/Np3KnBCM8Om0",
          "status": "active",
          "transactionNote": "testpay"
        }
      },
      "CreateMandateResponse": {
        "type": "object",
        "properties": {
          "allowMultipleDebit": {
            "type": "boolean",
            "description": "Allow multiple debits for the mandate",
            "default": false,
            "example": true
          },
          "amount": {
            "type": "integer",
            "description": "Amount(in paise) of the mandate",
            "example": 1000,
            "minimum": 100,
            "maximum": 20000000
          },
          "amountRule": {
            "type": "string",
            "description": "Rule for verifying the debit amount is within range of specified amount_limit",
            "example": "max",
            "enum": [
              "max",
              "exact"
            ]
          },
          "autoExecute": {
            "type": "boolean",
            "description": "Auto execute of the mandate",
            "example": true
          },
          "autoPreNotify": {
            "type": "boolean",
            "description": "Auto pre notify of the mandate",
            "example": true
          },
          "autoRefundFirstExecutionAmount": {
            "type": "boolean",
            "description": "Enable auto refund of first execution amount",
            "default": false,
            "example": false
          },
          "blockFunds": {
            "type": "boolean",
            "description": "Block funds for the mandate",
            "default": false,
            "example": true
          },
          "createdAt": {
            "type": "string",
            "description": "RFC 3339 timestamp to indicate the creation date \u0026 time for the resource",
            "example": "2024-05-17T19:17:32+05:30",
            "format": "date-time"
          },
          "creationMode": {
            "type": "string",
            "description": "Creation mode of the mandate",
            "example": "qr",
            "enum": [
              "collect",
              "intent"
            ]
          },
          "currency": {
            "type": "string",
            "description": "Currency in which the mandate payment will be executed",
            "default": "INR",
            "example": "INR",
            "enum": [
              "INR"
            ]
          },
          "customerRevocable": {
            "type": "boolean",
            "example": true
          },
          "customerVpa": {
            "type": "string",
            "description": "UPI id of the customer from which payments are made",
            "example": "ram@axis",
            "pattern": "^[a-zA-Z0-9.-]*@[a-zA-Z0-9.-]*$"
          },
          "endDate": {
            "type": "string",
            "description": "End date of the mandate (ddmmyyyy)",
            "example": "02012008"
          },
          "expireAfter": {
            "type": "integer",
            "description": "Number of minutes after which the mandate creation request will expire",
            "default": 2,
            "example": 2,
            "minimum": 2,
            "maximum": 64800
          },
          "firstExecutionAmount": {
            "type": "integer",
            "description": "First execution amount(in paise) of the mandate",
            "default": 0,
            "example": 1000,
            "minimum": 0,
            "maximum": 20000000
          },
          "frequency": {
            "type": "string",
            "description": "Frequency of the mandate",
            "example": "monthly",
            "enum": [
              "one time",
              "weekly",
              "daily",
              "fortnightly",
              "monthly",
              "bi monthly",
              "quarterly",
              "half yearly",
              "yearly",
              "as presented"
            ]
          },
          "id": {
            "type": "string",
            "description": "Id of the resource, which is the same the id returned in the Create \u003cresource\u003e API response",
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "initiationMode": {
            "type": "string",
            "description": "Initiation mode of the mandate",
            "example": "00",
            "enum": [
              "00",
              "01",
              "04"
            ]
          },
          "intentLink": {
            "type": "string",
            "description": "Intent link for the mandate request",
            "example": "upi://mandate?pa=deku040920232@okokaxis\u0026pn=merchant-1\u0026validitystart=31121995\u0026validityend=31121996\u0026am=100.00\u0026amrule=MAX\u0026recur=one%20time\u0026recurvalue=0\u0026recurtype=on\u0026tr=SETgv8wOOCElAtpzfbAEXqcKvN8QPfunAhI\u0026cu=INR\u0026mc=1234\u0026mode=04\u0026purpose=14\u0026rev=N\u0026share=Y\u0026qrexpire=04092023\u0026block=N\u0026orgid=000000\u0026version=2.0\u0026txnType=create\u0026tid=SETgv8wOOCElAtpzfbAEXqcKvN8QPfunAhI"
          },
          "maxAmountLimit": {
            "type": "integer",
            "description": "Maximum amount(in paise) for which a mandate transaction can be executed",
            "example": 1000,
            "minimum": 100,
            "maximum": 20000000
          },
          "merchantId": {
            "type": "string",
            "description": "Id of the merchant who created the mandate",
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "merchantVpa": {
            "type": "string",
            "description": "UPI id of the merchant on which the payments are collected",
            "example": "fastestupi@pineaxis",
            "pattern": "^[a-z0-9.-]*@[a-zA-Z]*$"
          },
          "purpose": {
            "type": "string",
            "description": "Purpose of the mandate",
            "default": "14",
            "example": "14",
            "enum": [
              "00",
              "14",
              "76",
              "01"
            ]
          },
          "qrCode": {
            "type": "string",
            "description": "QR code for the generated intent link in the form of base64 encoded string",
            "example": ""
          },
          "recurrenceRule": {
            "type": "string",
            "description": "Recurrence rule of the mandate",
            "default": "on",
            "example": "on",
            "enum": [
              "on",
              "before",
              "after"
            ]
          },
          "recurrenceValue": {
            "type": "integer",
            "description": "Recurrence value of the mandate",
            "example": 1,
            "minimum": 0,
            "maximum": 31
          },
          "referenceId": {
            "type": "string",
            "description": "Merchant reference id of the mandate",
            "example": "ABC1234789",
            "minLength": 5,
            "maxLength": 50
          },
          "shareToPayee": {
            "type": "boolean",
            "example": false
          },
          "shortCode": {
            "type": "string",
            "description": "Short code for the generated intent link in the form of base64 encoded string",
            "example": "TlNssqA7wlZC"
          },
          "shortLink": {
            "type": "string",
            "description": "Short link for the generated intent link in the form of base64 encoded string",
            "example": "https://upi.setu.pe/TlNssqA7wlZC"
          },
          "showFirstExecutionAmountToPayer": {
            "type": "boolean",
            "description": "Show first execution amount (fam) on payer apps",
            "default": false,
            "example": false
          },
          "startDate": {
            "type": "string",
            "description": "Start date of the mandate (ddmmyyyy)",
            "example": "02012006"
          },
          "status": {
            "type": "string",
            "description": "Status of the mandate",
            "example": "pending",
            "enum": [
              "pending",
              "live",
              "paused",
              "revoked",
              "rejected",
              "completed"
            ]
          },
          "transactionNote": {
            "type": "string",
            "description": "Transaction note of the mandate",
            "example": "Transaction note",
            "pattern": "^[^(){}\\[\\]\u003c\u003e]*$",
            "maxLength": 50
          },
          "txnId": {
            "type": "string",
            "description": "NPCI transaction id",
            "example": "BTTZrc5gDFkuCr3n3I0ey4aNtzLOLR7K7aR",
            "pattern": "^[a-zA-Z0-9]*$",
            "minLength": 35,
            "maxLength": 35
          }
        },
        "example": {
          "allowMultipleDebit": true,
          "amount": 1000,
          "amountRule": "max",
          "autoExecute": true,
          "autoPreNotify": true,
          "autoRefundFirstExecutionAmount": false,
          "blockFunds": true,
          "createdAt": "2024-05-17T19:17:32+05:30",
          "creationMode": "qr",
          "currency": "INR",
          "customerRevocable": true,
          "customerVpa": "ram@axis",
          "endDate": "02012008",
          "expireAfter": 2,
          "firstExecutionAmount": 1000,
          "frequency": "monthly",
          "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
          "initiationMode": "00",
          "intentLink": "upi://mandate?pa=deku040920232@okokaxis\u0026pn=merchant-1\u0026validitystart=31121995\u0026validityend=31121996\u0026am=100.00\u0026amrule=MAX\u0026recur=one%20time\u0026recurvalue=0\u0026recurtype=on\u0026tr=SETgv8wOOCElAtpzfbAEXqcKvN8QPfunAhI\u0026cu=INR\u0026mc=1234\u0026mode=04\u0026purpose=14\u0026rev=N\u0026share=Y\u0026qrexpire=04092023\u0026block=N\u0026orgid=000000\u0026version=2.0\u0026txnType=create\u0026tid=SETgv8wOOCElAtpzfbAEXqcKvN8QPfunAhI",
          "maxAmountLimit": 1000,
          "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
          "merchantVpa": "fastestupi@pineaxis",
          "purpose": "14",
          "qrCode": "",
          "recurrenceRule": "on",
          "recurrenceValue": 1,
          "referenceId": "ABC1234789",
          "shareToPayee": false,
          "shortCode": "TlNssqA7wlZC",
          "shortLink": "https://upi.setu.pe/TlNssqA7wlZC",
          "showFirstExecutionAmountToPayer": false,
          "startDate": "02012006",
          "status": "pending",
          "transactionNote": "Transaction note",
          "txnId": "BTTZrc5gDFkuCr3n3I0ey4aNtzLOLR7K7aR"
        }
      },
      "CreateMerchantWrapperRequestBody": {
        "type": "object",
        "properties": {
          "acceptDeemedTxns": {
            "type": "boolean",
            "description": "Indicates whether deemed txns are to be accepted or not for the Merchant",
            "example": true
          },
          "aggregatorAccountId": {
            "type": "string",
            "description": "id of aggregator account associated with merchant",
            "example": "328a928f-e277-4798-8e28-4b19a61a8a23"
          },
          "businessName": {
            "type": "string",
            "description": "Brand name or Consumer facing name",
            "example": "Setu",
            "pattern": "^[a-zA-Z0-9 ]+$",
            "minLength": 1,
            "maxLength": 99
          },
          "businessType": {
            "type": "string",
            "description": "Incorporation type",
            "example": "PROPRIETARY",
            "enum": [
              "PROPRIETARY",
              "PARTNERSHIP",
              "PRIVATE",
              "PUBLIC",
              "OTHERS"
            ]
          },
          "franchiseName": {
            "type": "string",
            "description": "Franchise name",
            "example": "Setu UPI",
            "pattern": "^[a-zA-Z0-9 ]+$"
          },
          "genre": {
            "type": "string",
            "description": "Online / Offline",
            "example": "ONLINE",
            "enum": [
              "ONLINE",
              "OFFLINE"
            ]
          },
          "legalName": {
            "type": "string",
            "description": "Legal name as per incorporation documents",
            "example": "BrokenTusk Technologies Pvt Ltd",
            "pattern": "^[a-zA-Z0-9 ]+$",
            "minLength": 1,
            "maxLength": 99
          },
          "mcc": {
            "type": "string",
            "description": "Category of business operation",
            "example": "5432"
          },
          "merchantName": {
            "type": "string",
            "example": "Architecto quisquam laudantium id occaecati dolorum animi."
          },
          "merchantType": {
            "type": "string",
            "description": "merchant type",
            "example": "large",
            "enum": [
              "small",
              "large"
            ]
          },
          "onboardingType": {
            "type": "string",
            "description": "onboarding type",
            "default": "aggregator",
            "example": "aggregator",
            "enum": [
              "bank",
              "aggregator"
            ]
          },
          "paymentModes": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "uod",
              "enum": [
                "saving",
                "default",
                "lite",
                "erupi",
                "rupay_cc",
                "ppi",
                "bankwallet",
                "current",
                "nro",
                "nre",
                "sod",
                "uod"
              ]
            },
            "description": "payment modes allowed for merchants",
            "example": [
              "saving",
              "lite",
              "erupi",
              "rupay_cc",
              "ppi",
              "current",
              "nro",
              "nre"
            ]
          },
          "productAccountId": {
            "type": "string",
            "description": "id of product account associated with merchant",
            "example": "328a928f-e277-4798-8e28-4b19a61a8a22",
            "minLength": 1
          },
          "products": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "autopay",
              "enum": [
                "pay_single",
                "pay_multi",
                "offline_qr",
                "collect",
                "autopay",
                "recur_tpv",
                "pay_single_tpv",
                "pay_single_tpv_plus",
                "single_block_multi_debit",
                "reserve",
                "single_block_multi_debit_tpv",
                "reserve_tpv"
              ]
            },
            "description": "products allowed for merchants",
            "example": [
              "pay_single",
              "pay_multi",
              "tpv",
              "tpv_plus",
              "intent_autopay"
            ]
          },
          "settlement": {
            "$ref": "#/components/schemas/SettlementConfigurationObj"
          },
          "settlementTransfers": {
            "type": "string",
            "example": "Rerum ex quam."
          },
          "standardAccountId": {
            "type": "string",
            "description": "id of standard account associated with merchant",
            "example": "328a928f-e277-4798-8e28-4b19a61a8a22",
            "minLength": 1
          },
          "vpaHandles": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "Voluptates eius exercitationem enim qui."
            },
            "description": "handles merchant supports",
            "example": [
              "pineaxis"
            ]
          }
        },
        "example": {
          "acceptDeemedTxns": true,
          "aggregatorAccountId": "328a928f-e277-4798-8e28-4b19a61a8a23",
          "businessName": "Setu",
          "businessType": "PROPRIETARY",
          "franchiseName": "Setu UPI",
          "genre": "ONLINE",
          "legalName": "BrokenTusk Technologies Pvt Ltd",
          "mcc": "5432",
          "merchantName": "Voluptatem labore et rem.",
          "merchantType": "large",
          "onboardingType": "aggregator",
          "paymentModes": [
            "saving",
            "lite",
            "erupi",
            "rupay_cc",
            "ppi",
            "current",
            "nro",
            "nre"
          ],
          "productAccountId": "328a928f-e277-4798-8e28-4b19a61a8a22",
          "products": [
            "pay_single",
            "pay_multi",
            "tpv",
            "tpv_plus",
            "intent_autopay"
          ],
          "settlement": {
            "cycles": [
              "Quo et unde.",
              "Ipsum aliquid ea necessitatibus.",
              "Corrupti harum modi suscipit.",
              "Id magni repudiandae."
            ],
            "frequency": "TPlusOne",
            "isEnabled": true,
            "onhold": true,
            "payoutAdjustable": true,
            "reconRequired": false,
            "type": "Gross",
            "types": [
              "Gross",
              "Net",
              "Direct"
            ]
          },
          "settlementTransfers": "Adipisci aut quae quia officiis.",
          "standardAccountId": "328a928f-e277-4798-8e28-4b19a61a8a22",
          "vpaHandles": [
            "pineaxis"
          ]
        },
        "required": [
          "aggregatorAccountId",
          "legalName",
          "businessName",
          "businessType",
          "mcc",
          "genre"
        ]
      },
      "CreateOqrResponse": {
        "type": "object",
        "properties": {
          "createdAt": {
            "type": "string",
            "description": "RFC 3339 timestamp to indicate the creation date \u0026 time for the resource",
            "example": "2024-05-17T19:17:32+05:30",
            "format": "date-time"
          },
          "expiryDate": {
            "type": "string",
            "description": "RFC 3339 timestamp to indicate the expiry date \u0026 time",
            "example": "2024-06-17T19:17:32+05:30",
            "format": "date-time"
          },
          "id": {
            "type": "string",
            "description": "Id of the resource, which is the same the id returned in the Create \u003cresource\u003e API response",
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "intentLink": {
            "type": "string",
            "description": "A UPI pay intent link built according to the spec enforced by NPCI",
            "example": "upi://pay?pa=test-auto-pgruosncak@okokaxis\u0026pn=merchant-4\u0026am=100.00\u0026tr=SU1240659756905923780\u0026tn=samplesingle0useqr\u0026cu=INR\u0026mc=1234"
          },
          "merchantId": {
            "type": "string",
            "description": "Id associated with the merchant on our platform",
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "merchantVpa": {
            "type": "string",
            "description": "UPI id of the merchant on which the payments are collected",
            "example": "fastestupi@pineaxis",
            "pattern": "^[a-z0-9.-]*@[a-zA-Z]*$"
          },
          "referenceId": {
            "type": "string",
            "description": "reference id in the merchant's system",
            "example": "1240689979139556557",
            "minLength": 1,
            "maxLength": 255
          },
          "status": {
            "type": "string",
            "description": "status defining the validity of the payment link",
            "example": "active",
            "enum": [
              "inactive",
              "active",
              "paid",
              "closed"
            ]
          },
          "transactionReference": {
            "type": "string",
            "description": "Transaction reference id circulated by NPCI",
            "example": "1240689979139556558",
            "pattern": "^[a-zA-Z0-9]*$",
            "minLength": 9,
            "maxLength": 35
          }
        },
        "example": {
          "createdAt": "2024-05-17T19:17:32+05:30",
          "expiryDate": "2024-06-17T19:17:32+05:30",
          "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
          "intentLink": "upi://pay?pa=test-auto-pgruosncak@okokaxis\u0026pn=merchant-4\u0026am=100.00\u0026tr=SU1240659756905923780\u0026tn=samplesingle0useqr\u0026cu=INR\u0026mc=1234",
          "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
          "merchantVpa": "fastestupi@pineaxis",
          "referenceId": "1240689979139556557",
          "status": "active",
          "transactionReference": "1240689979139556558"
        }
      },
      "CreateRefundResponse": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "integer",
            "description": "Amount to be refunded back to the customer",
            "example": 10000,
            "format": "int64"
          },
          "createdAt": {
            "type": "string",
            "description": "RFC 3339 timestamp to indicate the creation date \u0026 time for the resource",
            "example": "2024-05-17T19:17:32+05:30",
            "format": "date-time"
          },
          "crn": {
            "type": "string",
            "description": "Refund CRN",
            "example": "UPI123456789"
          },
          "id": {
            "type": "string",
            "description": "Id of the resource, which is the same the id returned in the Create \u003cresource\u003e API response",
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "paymentId": {
            "type": "string",
            "description": "Setu payment id on which merchant wants to raise a refund",
            "example": "01HKSEWQ509Z56CVQNQ2XHGJZ1"
          },
          "reason": {
            "$ref": "#/components/schemas/RefundReason"
          },
          "referenceId": {
            "type": "string",
            "description": "Unique identifier merchant wants to pass to reconcile refunds at their end",
            "example": "BILL12345"
          },
          "remarks": {
            "type": "string",
            "description": "Remarks on why the refund is being initiated",
            "example": "Services not rendered"
          },
          "status": {
            "type": "string",
            "description": "Status of the refund request",
            "example": "success",
            "enum": [
              "pending",
              "initiated",
              "success",
              "failed"
            ]
          },
          "type": {
            "type": "string",
            "description": "type describes how the refund is confirmed",
            "example": "online"
          }
        },
        "example": {
          "amount": 10000,
          "createdAt": "2024-05-17T19:17:32+05:30",
          "crn": "UPI123456789",
          "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
          "paymentId": "01HKSEWQ509Z56CVQNQ2XHGJZ1",
          "reason": {
            "adjCode": "501",
            "adjFlag": "RRC",
            "errCode": "refund-disabled",
            "npciErrCode": "R21",
            "npciErrDesc": "ONLINE REFUND IS DISABLED IN UPI"
          },
          "referenceId": "BILL12345",
          "remarks": "Services not rendered",
          "status": "success",
          "type": "online"
        }
      },
      "CreateRequestBody": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "integer",
            "description": "paise denominated value that needs to be collected from the user",
            "example": 10000,
            "minimum": 0,
            "maximum": 100000000000000000
          },
          "customerVpa": {
            "type": "string",
            "description": "UPI id of the customer to whom the collect request should be sent to",
            "example": "aadhitya@okaxis",
            "pattern": "^[A-Za-z0-9.-]*@[a-zA-Z0-9.-]*$"
          },
          "expireAfter": {
            "type": "integer",
            "description": "Expiry after (in minutes) for the collect request, the collect request will move to a closed state after this time has elapsed",
            "default": 30,
            "example": 2,
            "minimum": 1,
            "maximum": 64800
          },
          "merchantVpa": {
            "type": "string",
            "description": "UPI id of the merchant on which the payments are collected",
            "example": "fastestupi@pineaxis"
          },
          "metadata": {
            "type": "string",
            "description": "field provided for the merchant to add additional key-value pairs",
            "example": {
              "InvoiceNumber": "INV-21-12-009"
            },
            "format": "binary"
          },
          "referenceId": {
            "type": "string",
            "description": "Id to be used by merchant to identify the collect request on our platform, this can be the customer's invoice number or loan number",
            "example": "1240689979139556557",
            "minLength": 1,
            "maxLength": 255
          },
          "transactionNote": {
            "type": "string",
            "description": "note displayed to the customer at the payment page",
            "example": "Payment for loan repayment",
            "pattern": "^[^(){}\\[\\]\u003c\u003e]*$",
            "minLength": 1,
            "maxLength": 50
          }
        },
        "example": {
          "amount": 10000,
          "customerVpa": "aadhitya@okaxis",
          "expireAfter": 2,
          "merchantVpa": "fastestupi@pineaxis",
          "metadata": {
            "InvoiceNumber": "INV-21-12-009"
          },
          "referenceId": "1240689979139556557",
          "transactionNote": "Payment for loan repayment"
        },
        "required": [
          "merchantVpa",
          "customerVpa",
          "amount"
        ]
      },
      "CreateRequestBody2": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "integer",
            "description": "Amount (in paise) that needs to be collected from the user. If populated this value gets displayed on the payer PSP's payment page",
            "example": 10000,
            "minimum": 100
          },
          "expiryDate": {
            "type": "string",
            "description": "RFC 3339 timestamp to indicate the expiry date \u0026 time",
            "example": "2024-06-17T19:17:32+05:30",
            "format": "date-time"
          },
          "merchantVpa": {
            "type": "string",
            "description": "UPI id of the merchant on which the payments are collected",
            "example": "fastestupi@pineaxis",
            "pattern": "^[a-z0-9.-]*@[a-zA-Z]*$"
          },
          "metadata": {
            "type": "object",
            "description": "field provided for the merchant to add additional key-value pairs",
            "example": {
              "Et vero impedit nisi sed.": "Praesentium dolor eum quidem aut debitis illo.",
              "Excepturi distinctio qui porro molestiae et.": "Rerum quidem.",
              "Iusto officia repudiandae voluptatem ipsum.": "Et perspiciatis nesciunt veritatis."
            },
            "maxLength": 5,
            "additionalProperties": {
              "type": "string",
              "example": "Velit voluptatem quibusdam porro ea voluptatem at."
            }
          },
          "minAmount": {
            "type": "integer",
            "description": "Minimum amount (in paise) - on setting this value the amount field on the PSP's payment page becomes editable and the customer can pay an amount equal to or greater than the minimum amount",
            "example": 1000,
            "minimum": 100
          },
          "referenceId": {
            "type": "string",
            "description": "reference id in the merchant's system",
            "example": "1240689979139556557",
            "minLength": 1,
            "maxLength": 255
          },
          "transactionNote": {
            "type": "string",
            "description": "Transaction note displayed to the customer at the payer PSP's payment page",
            "example": "testpay"
          }
        },
        "example": {
          "amount": 10000,
          "expiryDate": "2024-06-17T19:17:32+05:30",
          "merchantVpa": "fastestupi@pineaxis",
          "metadata": {
            "Eos ut.": "Esse hic dolorem rem et.",
            "Et non nesciunt dolor dignissimos rerum.": "Nihil ipsa molestiae.",
            "Libero iusto rem est incidunt eaque atque.": "Et nisi."
          },
          "minAmount": 1000,
          "referenceId": "1240689979139556557",
          "transactionNote": "testpay"
        },
        "required": [
          "merchantVpa"
        ]
      },
      "CreateRequestBody3": {
        "type": "object",
        "properties": {
          "intentLink": {
            "type": "string",
            "description": "A UPI pay intent link built according to the spec enforced by NPCI",
            "example": "upi://pay?pa=test-auto-pgruosncak@okokaxis\u0026pn=merchant-4\u0026am=100.00\u0026tr=SU1240659756905923780\u0026tn=samplesingle0useqr\u0026cu=INR\u0026mc=1234"
          },
          "merchantVpa": {
            "type": "string",
            "description": "UPI id of the merchant on which the payments are collected",
            "example": "fastestupi@pineaxis",
            "pattern": "^[a-z0-9.-]*@[a-zA-Z]*$"
          },
          "referenceId": {
            "type": "string",
            "description": "reference id in the merchant's system",
            "example": "1240689979139556557",
            "minLength": 1,
            "maxLength": 255
          },
          "transactionReference": {
            "type": "string",
            "description": "Transaction reference id circulated by NPCI",
            "example": "1240689979139556558",
            "pattern": "^[a-zA-Z0-9]*$",
            "minLength": 9,
            "maxLength": 35
          }
        },
        "example": {
          "intentLink": "upi://pay?pa=test-auto-pgruosncak@okokaxis\u0026pn=merchant-4\u0026am=100.00\u0026tr=SU1240659756905923780\u0026tn=samplesingle0useqr\u0026cu=INR\u0026mc=1234",
          "merchantVpa": "fastestupi@pineaxis",
          "referenceId": "1240689979139556557",
          "transactionReference": "1240689979139556558"
        },
        "required": [
          "merchantVpa",
          "transactionReference",
          "intentLink"
        ]
      },
      "CreateRequestBody4": {
        "type": "object",
        "properties": {
          "accountHolderName": {
            "type": "string",
            "description": "account holder name for the settlement bank account",
            "example": "deku"
          },
          "accountNumber": {
            "type": "string",
            "description": "account number for the settlement bank account",
            "example": "1234567890"
          },
          "accountType": {
            "type": "string",
            "description": "account type for the settlement bank account",
            "example": "CURRENT",
            "enum": [
              "CURRENT",
              "SAVINGS"
            ]
          },
          "ifsc": {
            "type": "string",
            "description": "ifsc for the settlement bank account",
            "example": "HDFC0000001"
          }
        },
        "example": {
          "accountHolderName": "deku",
          "accountNumber": "1234567890",
          "accountType": "CURRENT",
          "ifsc": "HDFC0000001"
        },
        "required": [
          "accountHolderName",
          "accountNumber",
          "ifsc"
        ]
      },
      "CreateRequestBody5": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "integer",
            "description": "Amount (in paise) that needs to be collected from the user. If populated this value gets displayed on the payer PSP's payment page",
            "example": 10000,
            "minimum": 100
          },
          "expiryDate": {
            "type": "string",
            "description": "RFC 3339 timestamp to indicate the expiry date \u0026 time",
            "example": "2024-06-17T19:17:32+05:30",
            "format": "date-time"
          },
          "merchantVpa": {
            "type": "string",
            "description": "UPI id of the merchant on which the payments are collected",
            "example": "fastestupi@pineaxis",
            "pattern": "^[a-z0-9.-]*@[a-zA-Z]*$"
          },
          "metadata": {
            "type": "string",
            "description": "field provided for the merchant to add additional key-value pairs",
            "example": {
              "InvoiceNumber": "INV-21-12-009"
            },
            "format": "binary"
          },
          "minAmount": {
            "type": "integer",
            "description": "Minimum amount (in paise) - on setting this value the amount field on the PSP's payment page becomes editable and the customer can pay an amount equal to or greater than the minimum amount",
            "example": 1000,
            "minimum": 100
          },
          "referenceId": {
            "type": "string",
            "description": "reference id in the merchant's system",
            "example": "1240689979139556557",
            "minLength": 1,
            "maxLength": 255
          },
          "transactionNote": {
            "type": "string",
            "description": "Transaction note displayed to the customer at the payment page",
            "example": "Payment for loan repayment"
          }
        },
        "example": {
          "amount": 10000,
          "expiryDate": "2024-06-17T19:17:32+05:30",
          "merchantVpa": "fastestupi@pineaxis",
          "metadata": {
            "InvoiceNumber": "INV-21-12-009"
          },
          "minAmount": 1000,
          "referenceId": "1240689979139556557",
          "transactionNote": "Payment for loan repayment"
        },
        "required": [
          "merchantVpa"
        ]
      },
      "CreateRequestBody6": {
        "type": "object",
        "properties": {
          "referenceId": {
            "type": "string",
            "description": "reference id in the merchant's system",
            "example": "1240689979139556557",
            "minLength": 1,
            "maxLength": 255
          },
          "vpa": {
            "type": "string",
            "description": "UPI id of the merchant to be used to collect payments",
            "example": "fastestupi@pineaxis",
            "pattern": "^[a-z0-9.-]*@[a-z]*$"
          }
        },
        "example": {
          "referenceId": "1240689979139556557",
          "vpa": "fastestupi@pineaxis"
        },
        "required": [
          "vpa"
        ]
      },
      "CreateRequestBody7": {
        "type": "object",
        "properties": {
          "allowMultipleDebit": {
            "type": "boolean",
            "description": "Allow multiple debits for the mandate",
            "default": false,
            "example": true
          },
          "amount": {
            "type": "integer",
            "description": "Amount(in paise) of the mandate",
            "example": 1000,
            "minimum": 100,
            "maximum": 20000000
          },
          "amountRule": {
            "type": "string",
            "description": "Rule for verifying the debit amount is within range of specified amount_limit",
            "example": "max",
            "enum": [
              "max",
              "exact"
            ]
          },
          "autoExecute": {
            "type": "boolean",
            "description": "Auto execute of the mandate",
            "default": true,
            "example": true
          },
          "autoPreNotify": {
            "type": "boolean",
            "description": "Auto pre notify of the mandate",
            "default": true,
            "example": true
          },
          "autoRefundFirstExecutionAmount": {
            "type": "boolean",
            "description": "Enable auto refund of first execution amount",
            "default": false,
            "example": false
          },
          "blockFunds": {
            "type": "boolean",
            "description": "Block funds for the mandate",
            "default": false,
            "example": true
          },
          "creationMode": {
            "type": "string",
            "description": "Creation mode of the mandate",
            "example": "qr",
            "enum": [
              "collect",
              "intent"
            ]
          },
          "currency": {
            "type": "string",
            "description": "Currency in which the mandate payment will be executed",
            "default": "INR",
            "example": "INR",
            "enum": [
              "INR"
            ]
          },
          "customerRevocable": {
            "type": "boolean",
            "default": true,
            "example": false
          },
          "customerVpa": {
            "type": "string",
            "description": "UPI id of the customer from which payments are made",
            "example": "ram@axis",
            "pattern": "^[a-zA-Z0-9.-]*@[a-zA-Z0-9.-]*$"
          },
          "endDate": {
            "type": "string",
            "description": "End date of the mandate (ddmmyyyy)",
            "example": "02012008"
          },
          "expireAfter": {
            "type": "integer",
            "description": "Number of minutes after which the mandate creation request will expire",
            "default": 2,
            "example": 2,
            "minimum": 2,
            "maximum": 64800
          },
          "firstExecutionAmount": {
            "type": "integer",
            "description": "First execution amount(in paise) of the mandate",
            "default": 0,
            "example": 1000,
            "minimum": 0,
            "maximum": 20000000
          },
          "frequency": {
            "type": "string",
            "description": "Frequency of the mandate",
            "example": "monthly",
            "enum": [
              "one time",
              "weekly",
              "daily",
              "fortnightly",
              "monthly",
              "bi monthly",
              "quarterly",
              "half yearly",
              "yearly",
              "as presented"
            ]
          },
          "ifscMatchType": {
            "type": "string",
            "description": "IFSC match type for the mandate",
            "default": "CompleteIFSCMatch",
            "example": "CompleteIFSCMatch",
            "enum": [
              "CompleteIFSCMatch",
              "BankCodeMatch"
            ]
          },
          "initiationMode": {
            "type": "string",
            "description": "Initiation mode of the mandate",
            "example": "00",
            "enum": [
              "00",
              "01",
              "04"
            ]
          },
          "merchantVpa": {
            "type": "string",
            "description": "UPI id of the merchant on which the payments are collected",
            "example": "fastestupi@pineaxis",
            "pattern": "^[a-z0-9.-]*@[a-zA-Z]*$"
          },
          "purpose": {
            "type": "string",
            "description": "Purpose of the mandate",
            "default": "14",
            "example": "14",
            "enum": [
              "00",
              "14",
              "76",
              "01"
            ]
          },
          "recurrenceRule": {
            "type": "string",
            "description": "Recurrence rule of the mandate",
            "default": "on",
            "example": "on",
            "enum": [
              "on",
              "before",
              "after"
            ]
          },
          "recurrenceValue": {
            "type": "integer",
            "description": "Recurrence value of the mandate",
            "example": 1,
            "minimum": 0,
            "maximum": 31
          },
          "referenceId": {
            "type": "string",
            "description": "Merchant reference id of the mandate",
            "example": "ABC1234789",
            "minLength": 1,
            "maxLength": 255
          },
          "shareToPayee": {
            "type": "boolean",
            "default": true,
            "example": false
          },
          "showFirstExecutionAmountToPayer": {
            "type": "boolean",
            "description": "Show first execution amount (fam) on payer apps",
            "default": false,
            "example": false
          },
          "startDate": {
            "type": "string",
            "description": "Start date of the mandate (ddmmyyyy)",
            "example": "02012006"
          },
          "transactionNote": {
            "type": "string",
            "description": "Transaction note of the mandate",
            "example": "Transaction note",
            "pattern": "^[^(){}\\[\\]\u003c\u003e]*$",
            "maxLength": 50
          }
        },
        "example": {
          "allowMultipleDebit": true,
          "amount": 1000,
          "amountRule": "max",
          "autoExecute": true,
          "autoPreNotify": true,
          "autoRefundFirstExecutionAmount": false,
          "blockFunds": true,
          "creationMode": "qr",
          "currency": "INR",
          "customerRevocable": false,
          "customerVpa": "ram@axis",
          "endDate": "02012008",
          "expireAfter": 2,
          "firstExecutionAmount": 1000,
          "frequency": "monthly",
          "ifscMatchType": "CompleteIFSCMatch",
          "initiationMode": "01",
          "merchantVpa": "fastestupi@pineaxis",
          "purpose": "14",
          "recurrenceRule": "on",
          "recurrenceValue": 1,
          "referenceId": "ABC1234789",
          "shareToPayee": false,
          "showFirstExecutionAmountToPayer": false,
          "startDate": "02012006",
          "transactionNote": "Transaction note"
        },
        "required": [
          "startDate",
          "endDate",
          "amount",
          "currency",
          "amountRule",
          "frequency",
          "transactionNote",
          "purpose",
          "initiationMode",
          "creationMode",
          "merchantVpa"
        ]
      },
      "CreateRequestBody8": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "integer",
            "description": "Amount to be refunded back to the customer",
            "example": 10000,
            "format": "int64"
          },
          "crn": {
            "type": "string",
            "description": "Refund CRN",
            "example": "UPI123456789"
          },
          "paymentId": {
            "type": "string",
            "description": "Setu payment id on which merchant wants to raise a refund",
            "example": "01HKSEWQ509Z56CVQNQ2XHGJZ1"
          },
          "referenceId": {
            "type": "string",
            "description": "Unique identifier merchant wants to pass to reconcile refunds at their end",
            "example": "BILL12345"
          },
          "remarks": {
            "type": "string",
            "description": "Remarks on why the refund is being initiated",
            "example": "Services not rendered"
          },
          "type": {
            "type": "string",
            "description": "type describes how the refund is confirmed",
            "example": "online"
          }
        },
        "example": {
          "amount": 10000,
          "crn": "UPI123456789",
          "paymentId": "01HKSEWQ509Z56CVQNQ2XHGJZ1",
          "referenceId": "BILL12345",
          "remarks": "Services not rendered",
          "type": "online"
        },
        "required": [
          "paymentId",
          "amount"
        ]
      },
      "CreateSqrResponse": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "integer",
            "description": "Amount (in paise) that needs to be collected from the user. If populated this value gets displayed on the payer PSP's payment page",
            "example": 10000,
            "minimum": 100
          },
          "createdAt": {
            "type": "string",
            "description": "RFC 3339 timestamp to indicate the creation date \u0026 time for the resource",
            "example": "2024-05-17T19:17:32+05:30",
            "format": "date-time"
          },
          "currency": {
            "type": "string",
            "example": "Iure laborum."
          },
          "expiryDate": {
            "type": "string",
            "description": "RFC 3339 timestamp to indicate the expiry date \u0026 time",
            "example": "2024-06-17T19:17:32+05:30",
            "format": "date-time"
          },
          "id": {
            "type": "string",
            "description": "Id of the resource, which is the same the id returned in the Create \u003cresource\u003e API response",
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "intentLink": {
            "type": "string",
            "description": "A UPI pay intent link built according to the spec enforced by NPCI",
            "example": "upi://pay?pa=test-auto-pgruosncak@okokaxis\u0026pn=merchant-4\u0026am=100.00\u0026tr=SU1240659756905923780\u0026tn=samplesingle0useqr\u0026cu=INR\u0026mc=1234"
          },
          "merchantId": {
            "type": "string",
            "description": "Id associated with the merchant on our platform",
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "merchantVpa": {
            "type": "string",
            "description": "UPI id of the merchant on which the payments are collected",
            "example": "fastestupi@pineaxis",
            "pattern": "^[a-z0-9.-]*@[a-zA-Z]*$"
          },
          "metadata": {
            "type": "string",
            "description": "field provided for the merchant to add additional key-value pairs",
            "example": {
              "InvoiceNumber": "INV-21-12-009"
            },
            "format": "binary"
          },
          "minAmount": {
            "type": "integer",
            "description": "Minimum amount (in paise) - on setting this value the amount field on the PSP's payment page becomes editable and the customer can pay an amount equal to or greater than the minimum amount",
            "example": 1000,
            "minimum": 100
          },
          "qrCode": {
            "type": "string",
            "description": "QR code for the generated intent link in the form of base64 encoded string",
            "example": ""
          },
          "refId": {
            "type": "string",
            "description": "Transaction reference id circulated by NPCI",
            "example": "1240689979139556558",
            "pattern": "^[a-zA-Z0-9]*$",
            "minLength": 1,
            "maxLength": 35
          },
          "referenceId": {
            "type": "string",
            "description": "reference id in the merchant's system",
            "example": "1240689979139556557",
            "minLength": 1,
            "maxLength": 255
          },
          "shortLink": {
            "type": "string",
            "description": "A shortened URL for the given intent link",
            "example": "upipay.setu.co/Np3KnBCM8Om0"
          },
          "status": {
            "type": "string",
            "description": "status defining the validity of the payment link",
            "example": "active",
            "enum": [
              "inactive",
              "active",
              "paid",
              "closed"
            ]
          },
          "transactionNote": {
            "type": "string",
            "description": "Transaction note displayed to the customer at the payment page",
            "example": "Payment for loan repayment"
          }
        },
        "example": {
          "amount": 10000,
          "createdAt": "2024-05-17T19:17:32+05:30",
          "currency": "Aut veritatis.",
          "expiryDate": "2024-06-17T19:17:32+05:30",
          "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
          "intentLink": "upi://pay?pa=test-auto-pgruosncak@okokaxis\u0026pn=merchant-4\u0026am=100.00\u0026tr=SU1240659756905923780\u0026tn=samplesingle0useqr\u0026cu=INR\u0026mc=1234",
          "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
          "merchantVpa": "fastestupi@pineaxis",
          "metadata": {
            "InvoiceNumber": "INV-21-12-009"
          },
          "minAmount": 1000,
          "qrCode": "",
          "refId": "1240689979139556558",
          "referenceId": "1240689979139556557",
          "shortLink": "upipay.setu.co/Np3KnBCM8Om0",
          "status": "active",
          "transactionNote": "Payment for loan repayment"
        }
      },
      "CreateTPVPlusRequestBody": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "integer",
            "description": "Amount (in paise) that needs to be collected from the user. If populated this value gets displayed on the payer PSP's payment page",
            "example": 10000,
            "minimum": 100
          },
          "bankCodes": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "Blanditiis facilis ullam at velit debitis."
            },
            "description": "bank codes to be validated, first 4 characters of ifsc",
            "example": [
              "ICIC",
              "HDFC",
              "FDRL"
            ],
            "maxItems": 10
          },
          "createdAt": {
            "type": "string",
            "description": "RFC 3339 timestamp to indicate the creation date \u0026 time for the resource",
            "example": "2024-05-17T19:17:32+05:30",
            "format": "date-time"
          },
          "expireAfter": {
            "type": "integer",
            "description": "Expire after (in minutes) for the transaction",
            "example": 10,
            "format": "int64"
          },
          "id": {
            "type": "string",
            "description": "Id of the resource, which is the same the id returned in the Create \u003cresource\u003e API response",
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "intentLink": {
            "type": "string",
            "description": "upi link for the payment link",
            "example": "upi://pay?pa=test-auto-pgruosncak@okokaxis\u0026pn=merchant-4\u0026am=100.00\u0026tr=SU1240659756905923780\u0026tn=samplesingleuseqr\u0026cu=INR\u0026mc=1234"
          },
          "merchantVpa": {
            "type": "string",
            "description": "UPI id of the merchant on which the payments are collected",
            "example": "fastestupi@pineaxis",
            "pattern": "^[a-z0-9.-]*@[a-zA-Z]*$"
          },
          "metadata": {
            "type": "string",
            "description": "field provided for the merchant to add additional key-value pairs",
            "example": {
              "InvoiceNumber": "INV-21-12-009"
            },
            "format": "binary"
          },
          "minAmount": {
            "type": "integer",
            "description": "Minimum amount (in paise) - on setting this value the amount field on the PSP's payment page becomes editable and the customer can pay an amount equal to or greater than the minimum amount",
            "example": 1000,
            "minimum": 100
          },
          "payerApps": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "Molestiae ea."
            },
            "description": "payer apps to be validated",
            "example": [
              "gpay",
              "phonepe",
              "paytm",
              "amazonpay"
            ],
            "maxItems": 10
          },
          "payerVPAs": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "Tenetur quasi magnam quam vero."
            },
            "description": "VPAs of the payer to be validated",
            "example": [
              "aadhitya@okhdfc",
              "ram@okaxis"
            ],
            "maxItems": 10
          },
          "qrCode": {
            "type": "string",
            "description": "QR code for the payment link",
            "example": ""
          },
          "reason": {
            "$ref": "#/components/schemas/Reason"
          },
          "refId": {
            "type": "string",
            "description": "NPCI transaction refId",
            "example": "1240689979139556558",
            "pattern": "^[a-zA-Z0-9]*$",
            "minLength": 1,
            "maxLength": 35
          },
          "referenceId": {
            "type": "string",
            "description": "Reference id provided by the merchant",
            "example": "1240689979139556556"
          },
          "shortLink": {
            "type": "string",
            "description": "short link for the payment link",
            "example": "upipay.setu.co/Np3KnBCM8Om0"
          },
          "status": {
            "type": "string",
            "description": "status defining the validity of the payment",
            "example": "active",
            "enum": [
              "paid",
              "closed",
              "active"
            ]
          },
          "transactionNote": {
            "type": "string",
            "description": "transaction note for the transaction",
            "example": "test transaction",
            "pattern": "^[^(){}\\[\\]\u003c\u003e]*$",
            "maxLength": 50
          }
        },
        "example": {
          "amount": 10000,
          "bankCodes": [
            "ICIC",
            "HDFC",
            "FDRL"
          ],
          "createdAt": "2024-05-17T19:17:32+05:30",
          "expireAfter": 10,
          "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
          "intentLink": "upi://pay?pa=test-auto-pgruosncak@okokaxis\u0026pn=merchant-4\u0026am=100.00\u0026tr=SU1240659756905923780\u0026tn=samplesingleuseqr\u0026cu=INR\u0026mc=1234",
          "merchantVpa": "fastestupi@pineaxis",
          "metadata": {
            "InvoiceNumber": "INV-21-12-009"
          },
          "minAmount": 1000,
          "payerApps": [
            "gpay",
            "phonepe",
            "paytm",
            "amazonpay"
          ],
          "payerVPAs": [
            "aadhitya@okhdfc",
            "ram@okaxis"
          ],
          "qrCode": "",
          "reason": {
            "code": "unable-to-fulfill-request",
            "desc": "unable-to-fulfill-request",
            "mandateRevokeReason": "merchant-initiated",
            "npciErrCategory": "TD",
            "npciErrCode": "YG",
            "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
            "npciRespCode": "YG",
            "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)",
            "setuDescription": "Merchant PSP error",
            "suggestedAction": "Merchant PSP error"
          },
          "refId": "1240689979139556558",
          "referenceId": "1240689979139556556",
          "shortLink": "upipay.setu.co/Np3KnBCM8Om0",
          "status": "active",
          "transactionNote": "test transaction"
        },
        "required": [
          "merchantVpa"
        ]
      },
      "CreateTPVPlusResponse": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "integer",
            "description": "Amount (in paise) that needs to be collected from the user. If populated this value gets displayed on the payer PSP's payment page",
            "example": 10000,
            "minimum": 100
          },
          "bankCodes": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "Dignissimos quod dolores minima aperiam quia delectus."
            },
            "description": "bank codes to be validated, first 4 characters of ifsc",
            "example": [
              "ICIC",
              "HDFC",
              "FDRL"
            ],
            "maxItems": 10
          },
          "createdAt": {
            "type": "string",
            "description": "RFC 3339 timestamp to indicate the creation date \u0026 time for the resource",
            "example": "2024-05-17T19:17:32+05:30",
            "format": "date-time"
          },
          "expireAfter": {
            "type": "integer",
            "description": "Expire after (in minutes) for the transaction",
            "example": 10,
            "format": "int64"
          },
          "id": {
            "type": "string",
            "description": "Id of the resource, which is the same the id returned in the Create \u003cresource\u003e API response",
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "intentLink": {
            "type": "string",
            "description": "upi link for the payment link",
            "example": "upi://pay?pa=test-auto-pgruosncak@okokaxis\u0026pn=merchant-4\u0026am=100.00\u0026tr=SU1240659756905923780\u0026tn=samplesingleuseqr\u0026cu=INR\u0026mc=1234"
          },
          "merchantId": {
            "type": "string",
            "description": "Id associated with the merchant on our platform",
            "example": "1240689979139556556"
          },
          "merchantVpa": {
            "type": "string",
            "description": "UPI id of the merchant on which the payments are collected",
            "example": "fastestupi@pineaxis",
            "pattern": "^[a-z0-9.-]*@[a-zA-Z]*$"
          },
          "metadata": {
            "type": "string",
            "description": "field provided for the merchant to add additional key-value pairs",
            "example": {
              "InvoiceNumber": "INV-21-12-009"
            },
            "format": "binary"
          },
          "minAmount": {
            "type": "integer",
            "description": "Minimum amount (in paise) - on setting this value the amount field on the PSP's payment page becomes editable and the customer can pay an amount equal to or greater than the minimum amount",
            "example": 1000,
            "minimum": 100
          },
          "payerApps": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "Aliquid soluta quaerat et."
            },
            "description": "payer apps to be validated",
            "example": [
              "gpay",
              "phonepe",
              "paytm",
              "amazonpay"
            ],
            "maxItems": 10
          },
          "payerVPAs": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "Dolor et eum."
            },
            "description": "VPAs of the payer to be validated",
            "example": [
              "aadhitya@okhdfc",
              "ram@okaxis"
            ],
            "maxItems": 10
          },
          "qrCode": {
            "type": "string",
            "description": "QR code for the payment link",
            "example": ""
          },
          "reason": {
            "$ref": "#/components/schemas/Reason"
          },
          "refId": {
            "type": "string",
            "description": "NPCI transaction refId",
            "example": "1240689979139556558",
            "pattern": "^[a-zA-Z0-9]*$",
            "minLength": 1,
            "maxLength": 35
          },
          "referenceId": {
            "type": "string",
            "description": "Reference id provided by the merchant",
            "example": "1240689979139556556"
          },
          "requestId": {
            "type": "string",
            "example": "cjqml1f2e5ocq2mesej0"
          },
          "shortLink": {
            "type": "string",
            "description": "short link for the payment link",
            "example": "upipay.setu.co/Np3KnBCM8Om0"
          },
          "status": {
            "type": "string",
            "description": "status defining the validity of the payment",
            "example": "active",
            "enum": [
              "paid",
              "closed",
              "active"
            ]
          },
          "transactionNote": {
            "type": "string",
            "description": "transaction note for the transaction",
            "example": "test transaction",
            "pattern": "^[^(){}\\[\\]\u003c\u003e]*$",
            "maxLength": 50
          }
        },
        "example": {
          "amount": 10000,
          "bankCodes": [
            "ICIC",
            "HDFC",
            "FDRL"
          ],
          "createdAt": "2024-05-17T19:17:32+05:30",
          "expireAfter": 10,
          "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
          "intentLink": "upi://pay?pa=test-auto-pgruosncak@okokaxis\u0026pn=merchant-4\u0026am=100.00\u0026tr=SU1240659756905923780\u0026tn=samplesingleuseqr\u0026cu=INR\u0026mc=1234",
          "merchantId": "1240689979139556556",
          "merchantVpa": "fastestupi@pineaxis",
          "metadata": {
            "InvoiceNumber": "INV-21-12-009"
          },
          "minAmount": 1000,
          "payerApps": [
            "gpay",
            "phonepe",
            "paytm",
            "amazonpay"
          ],
          "payerVPAs": [
            "aadhitya@okhdfc",
            "ram@okaxis"
          ],
          "qrCode": "",
          "reason": {
            "code": "unable-to-fulfill-request",
            "desc": "unable-to-fulfill-request",
            "mandateRevokeReason": "merchant-initiated",
            "npciErrCategory": "TD",
            "npciErrCode": "YG",
            "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
            "npciRespCode": "YG",
            "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)",
            "setuDescription": "Merchant PSP error",
            "suggestedAction": "Merchant PSP error"
          },
          "refId": "1240689979139556558",
          "referenceId": "1240689979139556556",
          "requestId": "cjqml1f2e5ocq2mesej0",
          "shortLink": "upipay.setu.co/Np3KnBCM8Om0",
          "status": "active",
          "transactionNote": "test transaction"
        }
      },
      "CreateTPVRequestBody": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "integer",
            "description": "Amount (in paise) that needs to be collected from the user. If populated this value gets displayed on the payer PSP's payment page",
            "example": 10000,
            "minimum": 100
          },
          "expireAfter": {
            "type": "integer",
            "description": "Expire after (in minutes) for the transaction",
            "example": 10,
            "format": "int64"
          },
          "ifscMatchType": {
            "type": "string",
            "description": "Type of IFSC matching to be performed",
            "default": "CompleteIFSCMatch",
            "example": "CompleteIFSCMatch",
            "enum": [
              "BankCodeMatch",
              "CompleteIFSCMatch"
            ]
          },
          "merchantVpa": {
            "type": "string",
            "description": "UPI id of the merchant on which the payments are collected",
            "example": "fastestupi@pineaxis",
            "pattern": "^[a-z0-9.-]*@[a-zA-Z]*$"
          },
          "metadata": {
            "type": "string",
            "description": "field provided for the merchant to add additional key-value pairs",
            "example": {
              "InvoiceNumber": "INV-21-12-009"
            },
            "format": "binary"
          },
          "minAmount": {
            "type": "integer",
            "description": "Minimum amount (in paise) - on setting this value the amount field on the PSP's payment page becomes editable and the customer can pay an amount equal to or greater than the minimum amount",
            "example": 1000,
            "minimum": 100
          },
          "primaryAccount": {
            "$ref": "#/components/schemas/TPVAccountDetail"
          },
          "referenceId": {
            "type": "string",
            "description": "Reference id provided by the merchant",
            "example": "1240689979139556556"
          },
          "secondaryAccounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TPVAccountDetail"
            },
            "description": "secondary accounts for the tpv transaction",
            "example": [
              {
                "IFSC": "SBIN0000001",
                "accountName": "deku",
                "accountNumber": "1234567890"
              },
              {
                "IFSC": "SBIN0000001",
                "accountName": "deku",
                "accountNumber": "1234567890"
              }
            ]
          },
          "transactionNote": {
            "type": "string",
            "description": "transaction note for the transaction",
            "example": "test transaction"
          }
        },
        "example": {
          "amount": 10000,
          "expireAfter": 10,
          "ifscMatchType": "BankCodeMatch",
          "merchantVpa": "fastestupi@pineaxis",
          "metadata": {
            "InvoiceNumber": "INV-21-12-009"
          },
          "minAmount": 1000,
          "primaryAccount": {
            "IFSC": "SBIN0000001",
            "accountName": "deku",
            "accountNumber": "1234567890"
          },
          "referenceId": "1240689979139556556",
          "secondaryAccounts": [
            {
              "IFSC": "SBIN0000001",
              "accountName": "deku",
              "accountNumber": "1234567890"
            },
            {
              "IFSC": "SBIN0000001",
              "accountName": "deku",
              "accountNumber": "1234567890"
            },
            {
              "IFSC": "SBIN0000001",
              "accountName": "deku",
              "accountNumber": "1234567890"
            },
            {
              "IFSC": "SBIN0000001",
              "accountName": "deku",
              "accountNumber": "1234567890"
            }
          ],
          "transactionNote": "test transaction"
        },
        "required": [
          "merchantVpa",
          "primaryAccount"
        ]
      },
      "CreateTPVRequestBody2": {
        "type": "object",
        "properties": {
          "allowMultipleDebit": {
            "type": "boolean",
            "description": "Allow multiple debits for the mandate",
            "default": false,
            "example": true
          },
          "amount": {
            "type": "integer",
            "description": "Amount(in paise) of the mandate",
            "example": 1000,
            "minimum": 100,
            "maximum": 20000000
          },
          "amountRule": {
            "type": "string",
            "description": "Rule for verifying the debit amount is within range of specified amount_limit",
            "example": "max",
            "enum": [
              "max",
              "exact"
            ]
          },
          "autoExecute": {
            "type": "boolean",
            "description": "Auto execute of the mandate",
            "default": true,
            "example": true
          },
          "autoPreNotify": {
            "type": "boolean",
            "description": "Auto pre notify of the mandate",
            "default": true,
            "example": true
          },
          "autoRefundFirstExecutionAmount": {
            "type": "boolean",
            "description": "Enable auto refund of first execution amount",
            "default": false,
            "example": false
          },
          "blockFunds": {
            "type": "boolean",
            "description": "Block funds for the mandate",
            "default": false,
            "example": true
          },
          "creationMode": {
            "type": "string",
            "description": "Creation mode of the mandate",
            "example": "qr",
            "enum": [
              "collect",
              "intent"
            ]
          },
          "currency": {
            "type": "string",
            "description": "Currency in which the mandate payment will be executed",
            "default": "INR",
            "example": "INR",
            "enum": [
              "INR"
            ]
          },
          "customerRevocable": {
            "type": "boolean",
            "default": true,
            "example": false
          },
          "customerVpa": {
            "type": "string",
            "description": "UPI id of the customer from which payments are made",
            "example": "ram@axis",
            "pattern": "^[a-zA-Z0-9.-]*@[a-zA-Z0-9.-]*$"
          },
          "endDate": {
            "type": "string",
            "description": "End date of the mandate (ddmmyyyy)",
            "example": "02012008"
          },
          "expireAfter": {
            "type": "integer",
            "description": "Number of minutes after which the mandate creation request will expire",
            "default": 2,
            "example": 2,
            "minimum": 2,
            "maximum": 64800
          },
          "firstExecutionAmount": {
            "type": "integer",
            "description": "First execution amount(in paise) of the mandate",
            "default": 0,
            "example": 1000,
            "minimum": 0,
            "maximum": 20000000
          },
          "frequency": {
            "type": "string",
            "description": "Frequency of the mandate",
            "example": "monthly",
            "enum": [
              "one time",
              "weekly",
              "daily",
              "fortnightly",
              "monthly",
              "bi monthly",
              "quarterly",
              "half yearly",
              "yearly",
              "as presented"
            ]
          },
          "ifscMatchType": {
            "type": "string",
            "description": "IFSC match type for the mandate",
            "default": "CompleteIFSCMatch",
            "example": "CompleteIFSCMatch",
            "enum": [
              "CompleteIFSCMatch",
              "BankCodeMatch"
            ]
          },
          "initiationMode": {
            "type": "string",
            "description": "Initiation mode of the mandate",
            "example": "01",
            "enum": [
              "00",
              "01",
              "04"
            ]
          },
          "merchantVpa": {
            "type": "string",
            "description": "UPI id of the merchant on which the payments are collected",
            "example": "fastestupi@pineaxis",
            "pattern": "^[a-z0-9.-]*@[a-zA-Z]*$"
          },
          "primaryAccount": {
            "$ref": "#/components/schemas/TPVAccountDetail"
          },
          "purpose": {
            "type": "string",
            "description": "Purpose of the mandate",
            "default": "14",
            "example": "14",
            "enum": [
              "00",
              "14",
              "76",
              "01"
            ]
          },
          "recurrenceRule": {
            "type": "string",
            "description": "Recurrence rule of the mandate",
            "default": "on",
            "example": "on",
            "enum": [
              "on",
              "before",
              "after"
            ]
          },
          "recurrenceValue": {
            "type": "integer",
            "description": "Recurrence value of the mandate",
            "example": 1,
            "minimum": 0,
            "maximum": 31
          },
          "referenceId": {
            "type": "string",
            "description": "Merchant reference id of the mandate",
            "example": "ABC1234789",
            "minLength": 1,
            "maxLength": 255
          },
          "secondaryAccounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TPVAccountDetail"
            },
            "description": "Secondary account details",
            "example": [
              {
                "IFSC": "SBIN0000001",
                "accountName": "deku",
                "accountNumber": "1234567890"
              },
              {
                "IFSC": "SBIN0000001",
                "accountName": "deku",
                "accountNumber": "1234567890"
              }
            ]
          },
          "shareToPayee": {
            "type": "boolean",
            "default": true,
            "example": false
          },
          "showFirstExecutionAmountToPayer": {
            "type": "boolean",
            "description": "Show first execution amount (fam) on payer apps",
            "default": false,
            "example": false
          },
          "startDate": {
            "type": "string",
            "description": "Start date of the mandate (ddmmyyyy)",
            "example": "02012006"
          },
          "transactionNote": {
            "type": "string",
            "description": "Transaction note of the mandate",
            "example": "Transaction note",
            "pattern": "^[^(){}\\[\\]\u003c\u003e]*$",
            "maxLength": 50
          }
        },
        "example": {
          "allowMultipleDebit": true,
          "amount": 1000,
          "amountRule": "max",
          "autoExecute": true,
          "autoPreNotify": true,
          "autoRefundFirstExecutionAmount": false,
          "blockFunds": true,
          "creationMode": "qr",
          "currency": "INR",
          "customerRevocable": false,
          "customerVpa": "ram@axis",
          "endDate": "02012008",
          "expireAfter": 2,
          "firstExecutionAmount": 1000,
          "frequency": "monthly",
          "ifscMatchType": "CompleteIFSCMatch",
          "initiationMode": "04",
          "merchantVpa": "fastestupi@pineaxis",
          "primaryAccount": {
            "IFSC": "SBIN0000001",
            "accountName": "deku",
            "accountNumber": "1234567890"
          },
          "purpose": "14",
          "recurrenceRule": "on",
          "recurrenceValue": 1,
          "referenceId": "ABC1234789",
          "secondaryAccounts": [
            {
              "IFSC": "SBIN0000001",
              "accountName": "deku",
              "accountNumber": "1234567890"
            },
            {
              "IFSC": "SBIN0000001",
              "accountName": "deku",
              "accountNumber": "1234567890"
            },
            {
              "IFSC": "SBIN0000001",
              "accountName": "deku",
              "accountNumber": "1234567890"
            },
            {
              "IFSC": "SBIN0000001",
              "accountName": "deku",
              "accountNumber": "1234567890"
            }
          ],
          "shareToPayee": false,
          "showFirstExecutionAmountToPayer": false,
          "startDate": "02012006",
          "transactionNote": "Transaction note"
        },
        "required": [
          "startDate",
          "endDate",
          "amount",
          "currency",
          "amountRule",
          "frequency",
          "transactionNote",
          "purpose",
          "initiationMode",
          "creationMode",
          "merchantVpa",
          "primaryAccount"
        ]
      },
      "CreateTPVResponse": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "integer",
            "description": "Amount (in paise) that needs to be collected from the user. If populated this value gets displayed on the payer PSP's payment page",
            "example": 10000,
            "minimum": 100
          },
          "closedAt": {
            "type": "string",
            "example": "Aut consectetur et quibusdam fuga."
          },
          "createdAt": {
            "type": "string",
            "description": "RFC 3339 timestamp to indicate the creation date \u0026 time for the resource",
            "example": "2024-05-17T19:17:32+05:30",
            "format": "date-time"
          },
          "expireAfter": {
            "type": "integer",
            "description": "Expire after (in minutes) for the transaction",
            "example": 10,
            "format": "int64"
          },
          "id": {
            "type": "string",
            "description": "id associated with the tpv",
            "example": "1240689979139556556"
          },
          "ifscMatchType": {
            "type": "string",
            "example": "Et aliquam eaque."
          },
          "intentLink": {
            "type": "string",
            "description": "upi link for the payment link",
            "example": "upi://pay?pa=test-auto-pgruosncak@okokaxis\u0026pn=merchant-4\u0026am=100.00\u0026tr=SU1240659756905923780\u0026tn=sample%20single%20use%20qr\u0026cu=INR\u0026mc=1234"
          },
          "merchantId": {
            "type": "string",
            "description": "Id associated with the merchant on our platform",
            "example": "1240689979139556556"
          },
          "merchantVpa": {
            "type": "string",
            "description": "UPI id of the merchant on which the payments are collected",
            "example": "fastestupi@pineaxis",
            "pattern": "^[a-z0-9.-]*@[a-zA-Z]*$"
          },
          "metadata": {
            "type": "string",
            "description": "field provided for the merchant to add additional key-value pairs",
            "example": {
              "InvoiceNumber": "INV-21-12-009"
            },
            "format": "binary"
          },
          "minAmount": {
            "type": "integer",
            "description": "Minimum amount (in paise) - on setting this value the amount field on the PSP's payment page becomes editable and the customer can pay an amount equal to or greater than the minimum amount",
            "example": 1000,
            "minimum": 100
          },
          "primaryAccount": {
            "$ref": "#/components/schemas/TPVAccountDetailResponse"
          },
          "qrCode": {
            "type": "string",
            "description": "QR code for the payment link",
            "example": ""
          },
          "reason": {
            "$ref": "#/components/schemas/Reason"
          },
          "refId": {
            "type": "string",
            "description": "NPCI transaction refId",
            "example": "1240689979139556558",
            "pattern": "^[a-zA-Z0-9]*$",
            "minLength": 1,
            "maxLength": 35
          },
          "referenceId": {
            "type": "string",
            "description": "Reference id provided by the merchant",
            "example": "1240689979139556556"
          },
          "requestId": {
            "type": "string",
            "example": "cjqml1f2e5ocq2mesej0"
          },
          "secondaryAccounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TPVAccountDetailResponse"
            },
            "description": "secondary accounts for the tpv transaction",
            "example": [
              {
                "IFSC": "SBIN0000001",
                "encryptedAccountName": "5e884898da28047151d0e56f8dc629277",
                "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                "hashedAccountName": "5e884898da28047151d0e56f8dc629277",
                "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                "maskedAccountName": "R*M*E*S*",
                "maskedAccountNumber": "**** **** **** 7890"
              },
              {
                "IFSC": "SBIN0000001",
                "encryptedAccountName": "5e884898da28047151d0e56f8dc629277",
                "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                "hashedAccountName": "5e884898da28047151d0e56f8dc629277",
                "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                "maskedAccountName": "R*M*E*S*",
                "maskedAccountNumber": "**** **** **** 7890"
              },
              {
                "IFSC": "SBIN0000001",
                "encryptedAccountName": "5e884898da28047151d0e56f8dc629277",
                "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                "hashedAccountName": "5e884898da28047151d0e56f8dc629277",
                "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                "maskedAccountName": "R*M*E*S*",
                "maskedAccountNumber": "**** **** **** 7890"
              },
              {
                "IFSC": "SBIN0000001",
                "encryptedAccountName": "5e884898da28047151d0e56f8dc629277",
                "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                "hashedAccountName": "5e884898da28047151d0e56f8dc629277",
                "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                "maskedAccountName": "R*M*E*S*",
                "maskedAccountNumber": "**** **** **** 7890"
              }
            ]
          },
          "shortLink": {
            "type": "string",
            "description": "short link for the payment link",
            "example": "upipay.setu.co/Np3KnBCM8Om0"
          },
          "status": {
            "type": "string",
            "description": "status defining the validity of the payment",
            "example": "active",
            "enum": [
              "paid",
              "closed",
              "active"
            ]
          },
          "transactionNote": {
            "type": "string",
            "description": "transaction note for the transaction",
            "example": "test transaction"
          }
        },
        "example": {
          "amount": 10000,
          "closedAt": "Mollitia delectus maxime voluptatem explicabo deleniti.",
          "createdAt": "2024-05-17T19:17:32+05:30",
          "expireAfter": 10,
          "id": "1240689979139556556",
          "ifscMatchType": "Cum cum ratione et est temporibus.",
          "intentLink": "upi://pay?pa=test-auto-pgruosncak@okokaxis\u0026pn=merchant-4\u0026am=100.00\u0026tr=SU1240659756905923780\u0026tn=sample%20single%20use%20qr\u0026cu=INR\u0026mc=1234",
          "merchantId": "1240689979139556556",
          "merchantVpa": "fastestupi@pineaxis",
          "metadata": {
            "InvoiceNumber": "INV-21-12-009"
          },
          "minAmount": 1000,
          "primaryAccount": {
            "IFSC": "SBIN0000001",
            "encryptedAccountName": "5e884898da28047151d0e56f8dc629277",
            "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
            "hashedAccountName": "5e884898da28047151d0e56f8dc629277",
            "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
            "maskedAccountName": "R*M*E*S*",
            "maskedAccountNumber": "**** **** **** 7890"
          },
          "qrCode": "",
          "reason": {
            "code": "unable-to-fulfill-request",
            "desc": "unable-to-fulfill-request",
            "mandateRevokeReason": "merchant-initiated",
            "npciErrCategory": "TD",
            "npciErrCode": "YG",
            "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
            "npciRespCode": "YG",
            "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)",
            "setuDescription": "Merchant PSP error",
            "suggestedAction": "Merchant PSP error"
          },
          "refId": "1240689979139556558",
          "referenceId": "1240689979139556556",
          "requestId": "cjqml1f2e5ocq2mesej0",
          "secondaryAccounts": [
            {
              "IFSC": "SBIN0000001",
              "encryptedAccountName": "5e884898da28047151d0e56f8dc629277",
              "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
              "hashedAccountName": "5e884898da28047151d0e56f8dc629277",
              "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
              "maskedAccountName": "R*M*E*S*",
              "maskedAccountNumber": "**** **** **** 7890"
            },
            {
              "IFSC": "SBIN0000001",
              "encryptedAccountName": "5e884898da28047151d0e56f8dc629277",
              "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
              "hashedAccountName": "5e884898da28047151d0e56f8dc629277",
              "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
              "maskedAccountName": "R*M*E*S*",
              "maskedAccountNumber": "**** **** **** 7890"
            }
          ],
          "shortLink": "upipay.setu.co/Np3KnBCM8Om0",
          "status": "active",
          "transactionNote": "test transaction"
        }
      },
      "CreateTpvMandateResponse": {
        "type": "object",
        "properties": {
          "allowMultipleDebit": {
            "type": "boolean",
            "description": "Allow multiple debits for the mandate",
            "default": false,
            "example": true
          },
          "amount": {
            "type": "integer",
            "description": "Amount(in paise) of the mandate",
            "example": 1000,
            "minimum": 100,
            "maximum": 20000000
          },
          "amountRule": {
            "type": "string",
            "description": "Rule for verifying the debit amount is within range of specified amount_limit",
            "example": "max",
            "enum": [
              "max",
              "exact"
            ]
          },
          "autoExecute": {
            "type": "boolean",
            "description": "Auto execute of the mandate",
            "example": true
          },
          "autoPreNotify": {
            "type": "boolean",
            "description": "Auto pre notify of the mandate",
            "example": true
          },
          "autoRefundFirstExecutionAmount": {
            "type": "boolean",
            "description": "Enable auto refund of first execution amount",
            "default": false,
            "example": false
          },
          "blockFunds": {
            "type": "boolean",
            "description": "Block funds for the mandate",
            "default": false,
            "example": true
          },
          "createdAt": {
            "type": "string",
            "description": "RFC 3339 timestamp to indicate the creation date \u0026 time for the resource",
            "example": "2024-05-17T19:17:32+05:30",
            "format": "date-time"
          },
          "creationMode": {
            "type": "string",
            "description": "Creation mode of the mandate",
            "example": "qr",
            "enum": [
              "collect",
              "intent"
            ]
          },
          "currency": {
            "type": "string",
            "description": "Currency in which the mandate payment will be executed",
            "default": "INR",
            "example": "INR",
            "enum": [
              "INR"
            ]
          },
          "customerRevocable": {
            "type": "boolean",
            "example": true
          },
          "customerVpa": {
            "type": "string",
            "description": "UPI id of the customer from which payments are made",
            "example": "ram@axis",
            "pattern": "^[a-zA-Z0-9.-]*@[a-zA-Z0-9.-]*$"
          },
          "endDate": {
            "type": "string",
            "description": "End date of the mandate (ddmmyyyy)",
            "example": "02012008"
          },
          "expireAfter": {
            "type": "integer",
            "description": "Number of minutes after which the mandate creation request will expire",
            "default": 2,
            "example": 2,
            "minimum": 2,
            "maximum": 64800
          },
          "firstExecutionAmount": {
            "type": "integer",
            "description": "First execution amount(in paise) of the mandate",
            "default": 0,
            "example": 1000,
            "minimum": 0,
            "maximum": 20000000
          },
          "frequency": {
            "type": "string",
            "description": "Frequency of the mandate",
            "example": "monthly",
            "enum": [
              "one time",
              "weekly",
              "daily",
              "fortnightly",
              "monthly",
              "bi monthly",
              "quarterly",
              "half yearly",
              "yearly",
              "as presented"
            ]
          },
          "id": {
            "type": "string",
            "description": "Id of the resource, which is the same the id returned in the Create \u003cresource\u003e API response",
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "ifscMatchType": {
            "type": "string",
            "description": "IFSC match type for the mandate",
            "example": "CompleteIFSCMatch",
            "enum": [
              "CompleteIFSCMatch",
              "BankCodeMatch"
            ]
          },
          "initiationMode": {
            "type": "string",
            "description": "Initiation mode of the mandate",
            "example": "00",
            "enum": [
              "00",
              "01",
              "04"
            ]
          },
          "intentLink": {
            "type": "string",
            "description": "Intent link for the mandate request",
            "example": "upi://mandate?pa=deku040920232@okokaxis\u0026pn=merchant-1\u0026validitystart=31121995\u0026validityend=31121996\u0026am=100.00\u0026amrule=MAX\u0026recur=one%20time\u0026recurvalue=0\u0026recurtype=on\u0026tr=SETgv8wOOCElAtpzfbAEXqcKvN8QPfunAhI\u0026cu=INR\u0026mc=1234\u0026mode=04\u0026purpose=14\u0026rev=N\u0026share=Y\u0026qrexpire=04092023\u0026block=N\u0026orgid=000000\u0026version=2.0\u0026txnType=create\u0026tid=SETgv8wOOCElAtpzfbAEXqcKvN8QPfunAhI"
          },
          "maxAmountLimit": {
            "type": "integer",
            "description": "Maximum amount(in paise) for which a mandate transaction can be executed",
            "example": 1000,
            "minimum": 100,
            "maximum": 20000000
          },
          "merchantId": {
            "type": "string",
            "description": "Id of the merchant who created the mandate",
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "merchantVpa": {
            "type": "string",
            "description": "UPI id of the merchant on which the payments are collected",
            "example": "fastestupi@pineaxis",
            "pattern": "^[a-z0-9.-]*@[a-zA-Z]*$"
          },
          "primaryAccount": {
            "$ref": "#/components/schemas/TPVAccountDetailResponse"
          },
          "purpose": {
            "type": "string",
            "description": "Purpose of the mandate",
            "default": "14",
            "example": "14",
            "enum": [
              "00",
              "14",
              "76",
              "01"
            ]
          },
          "qrCode": {
            "type": "string",
            "description": "QR code for the generated intent link in the form of base64 encoded string",
            "example": ""
          },
          "recurrenceRule": {
            "type": "string",
            "description": "Recurrence rule of the mandate",
            "default": "on",
            "example": "on",
            "enum": [
              "on",
              "before",
              "after"
            ]
          },
          "recurrenceValue": {
            "type": "integer",
            "description": "Recurrence value of the mandate",
            "example": 1,
            "minimum": 0,
            "maximum": 31
          },
          "referenceId": {
            "type": "string",
            "description": "Merchant reference id of the mandate",
            "example": "ABC1234789",
            "minLength": 5,
            "maxLength": 50
          },
          "secondaryAccounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TPVAccountDetailResponse"
            },
            "description": "secondary accounts for the recur tpv transaction",
            "example": [
              {
                "IFSC": "SBIN0000001",
                "encryptedAccountName": "5e884898da28047151d0e56f8dc629277",
                "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                "hashedAccountName": "5e884898da28047151d0e56f8dc629277",
                "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                "maskedAccountName": "R*M*E*S*",
                "maskedAccountNumber": "**** **** **** 7890"
              },
              {
                "IFSC": "SBIN0000001",
                "encryptedAccountName": "5e884898da28047151d0e56f8dc629277",
                "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                "hashedAccountName": "5e884898da28047151d0e56f8dc629277",
                "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                "maskedAccountName": "R*M*E*S*",
                "maskedAccountNumber": "**** **** **** 7890"
              }
            ]
          },
          "shareToPayee": {
            "type": "boolean",
            "example": false
          },
          "shortCode": {
            "type": "string",
            "description": "Short code for the generated intent link in the form of base64 encoded string",
            "example": "TlNssqA7wlZC"
          },
          "shortLink": {
            "type": "string",
            "description": "Short link for the generated intent link in the form of base64 encoded string",
            "example": "https://upi.setu.pe/TlNssqA7wlZC"
          },
          "showFirstExecutionAmountToPayer": {
            "type": "boolean",
            "description": "Show first execution amount (fam) on payer apps",
            "default": false,
            "example": false
          },
          "startDate": {
            "type": "string",
            "description": "Start date of the mandate (ddmmyyyy)",
            "example": "02012006"
          },
          "status": {
            "type": "string",
            "description": "Status of the mandate",
            "example": "pending",
            "enum": [
              "pending",
              "live",
              "paused",
              "revoked",
              "rejected",
              "completed"
            ]
          },
          "transactionNote": {
            "type": "string",
            "description": "Transaction note of the mandate",
            "example": "Transaction note",
            "pattern": "^[^(){}\\[\\]\u003c\u003e]*$",
            "maxLength": 50
          },
          "txnId": {
            "type": "string",
            "description": "NPCI transaction id",
            "example": "BTTZrc5gDFkuCr3n3I0ey4aNtzLOLR7K7aR",
            "pattern": "^[a-zA-Z0-9]*$",
            "minLength": 35,
            "maxLength": 35
          }
        },
        "example": {
          "allowMultipleDebit": true,
          "amount": 1000,
          "amountRule": "max",
          "autoExecute": true,
          "autoPreNotify": true,
          "autoRefundFirstExecutionAmount": false,
          "blockFunds": true,
          "createdAt": "2024-05-17T19:17:32+05:30",
          "creationMode": "qr",
          "currency": "INR",
          "customerRevocable": true,
          "customerVpa": "ram@axis",
          "endDate": "02012008",
          "expireAfter": 2,
          "firstExecutionAmount": 1000,
          "frequency": "monthly",
          "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
          "ifscMatchType": "CompleteIFSCMatch",
          "initiationMode": "04",
          "intentLink": "upi://mandate?pa=deku040920232@okokaxis\u0026pn=merchant-1\u0026validitystart=31121995\u0026validityend=31121996\u0026am=100.00\u0026amrule=MAX\u0026recur=one%20time\u0026recurvalue=0\u0026recurtype=on\u0026tr=SETgv8wOOCElAtpzfbAEXqcKvN8QPfunAhI\u0026cu=INR\u0026mc=1234\u0026mode=04\u0026purpose=14\u0026rev=N\u0026share=Y\u0026qrexpire=04092023\u0026block=N\u0026orgid=000000\u0026version=2.0\u0026txnType=create\u0026tid=SETgv8wOOCElAtpzfbAEXqcKvN8QPfunAhI",
          "maxAmountLimit": 1000,
          "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
          "merchantVpa": "fastestupi@pineaxis",
          "primaryAccount": {
            "IFSC": "SBIN0000001",
            "encryptedAccountName": "5e884898da28047151d0e56f8dc629277",
            "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
            "hashedAccountName": "5e884898da28047151d0e56f8dc629277",
            "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
            "maskedAccountName": "R*M*E*S*",
            "maskedAccountNumber": "**** **** **** 7890"
          },
          "purpose": "14",
          "qrCode": "",
          "recurrenceRule": "on",
          "recurrenceValue": 1,
          "referenceId": "ABC1234789",
          "secondaryAccounts": [
            {
              "IFSC": "SBIN0000001",
              "encryptedAccountName": "5e884898da28047151d0e56f8dc629277",
              "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
              "hashedAccountName": "5e884898da28047151d0e56f8dc629277",
              "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
              "maskedAccountName": "R*M*E*S*",
              "maskedAccountNumber": "**** **** **** 7890"
            },
            {
              "IFSC": "SBIN0000001",
              "encryptedAccountName": "5e884898da28047151d0e56f8dc629277",
              "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
              "hashedAccountName": "5e884898da28047151d0e56f8dc629277",
              "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
              "maskedAccountName": "R*M*E*S*",
              "maskedAccountNumber": "**** **** **** 7890"
            },
            {
              "IFSC": "SBIN0000001",
              "encryptedAccountName": "5e884898da28047151d0e56f8dc629277",
              "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
              "hashedAccountName": "5e884898da28047151d0e56f8dc629277",
              "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
              "maskedAccountName": "R*M*E*S*",
              "maskedAccountNumber": "**** **** **** 7890"
            }
          ],
          "shareToPayee": false,
          "shortCode": "TlNssqA7wlZC",
          "shortLink": "https://upi.setu.pe/TlNssqA7wlZC",
          "showFirstExecutionAmountToPayer": false,
          "startDate": "02012006",
          "status": "pending",
          "transactionNote": "Transaction note",
          "txnId": "BTTZrc5gDFkuCr3n3I0ey4aNtzLOLR7K7aR"
        }
      },
      "Cursor": {
        "type": "object",
        "properties": {
          "current": {
            "type": "string",
            "description": "Cursor to the current page",
            "example": "MDFBUlozTkRFS1RTVjRSUkZGUTY5RzVGQVY="
          },
          "next": {
            "type": "string",
            "description": "Cursor to the next page",
            "example": "MDFBUlozTkRFS1RTVjRSUkZGUTY5RzVGQVY="
          },
          "previous": {
            "type": "string",
            "description": "Cursor to the previous page",
            "example": "MDFBUlozTkRFS1RTVjRSUkZGUTY5RzVGQVY="
          }
        },
        "example": {
          "current": "MDFBUlozTkRFS1RTVjRSUkZGUTY5RzVGQVY=",
          "next": "MDFBUlozTkRFS1RTVjRSUkZGUTY5RzVGQVY=",
          "previous": "MDFBUlozTkRFS1RTVjRSUkZGUTY5RzVGQVY="
        }
      },
      "DoCustomerVpaVerificationRequestBody": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "Porro magni qui impedit dignissimos recusandae nobis."
          },
          "status": {
            "type": "string",
            "example": "invalid",
            "enum": [
              "pending",
              "valid",
              "invalid",
              "failed"
            ]
          }
        },
        "example": {
          "id": "Dolor omnis.",
          "status": "valid"
        },
        "required": [
          "id",
          "status"
        ]
      },
      "DoPaymentRequestBody": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "integer",
            "description": "Payment amount in paise",
            "example": 3962136265526269517,
            "format": "int64"
          },
          "offerId": {
            "type": "string",
            "example": "Similique dolor non adipisci molestias."
          },
          "payeeVpa": {
            "type": "string",
            "description": "VPA of the payee - merchant VPA",
            "example": "Nesciunt eum."
          },
          "payerAccountDetails": {
            "$ref": "#/components/schemas/PayerAccountDetails"
          },
          "payerName": {
            "type": "string",
            "description": "name of the payer - payer account name",
            "example": "Fuga in doloribus sed aperiam."
          },
          "payerRespCode": {
            "type": "string",
            "description": "Payer respCode received from NPCI (in case of failure)",
            "example": "Nihil atque provident nulla debitis."
          },
          "payerVpa": {
            "type": "string",
            "description": "VPA of the payer - customer VPA",
            "example": "Excepturi impedit qui maxime quo omnis voluptatem."
          },
          "refId": {
            "type": "string",
            "description": "Product instance ID",
            "example": "Est illum impedit est deserunt."
          }
        },
        "example": {
          "amount": 8894369764494536263,
          "offerId": "Molestiae quo reprehenderit.",
          "payeeVpa": "Laboriosam voluptatum in et.",
          "payerAccountDetails": {
            "accountNumber": "Delectus omnis quidem recusandae reprehenderit eos.",
            "accountType": "Deserunt ut aliquam ullam itaque sequi.",
            "ifsc": "Dolorem quod expedita fuga aut qui."
          },
          "payerName": "Sunt nisi sit facilis.",
          "payerRespCode": "Consequatur deserunt tenetur omnis.",
          "payerVpa": "Suscipit explicabo adipisci quo officiis accusantium.",
          "refId": "Quidem aliquam hic eum temporibus."
        },
        "required": [
          "refId",
          "payerVpa",
          "payeeVpa"
        ]
      },
      "ExecuteRequestBody": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "integer",
            "description": "Amount of the mandate",
            "example": 1000,
            "minimum": 100,
            "maximum": 20000000
          },
          "referenceId": {
            "type": "string",
            "description": "Merchant reference id of the mandate",
            "example": "ABC1234789",
            "minLength": 1,
            "maxLength": 255
          },
          "remark": {
            "type": "string",
            "description": "Remark for the mandate transaction",
            "example": "Transaction for car loan emi",
            "pattern": "^[^(){}\\[\\]\u003c\u003e]*$"
          },
          "sequenceNumber": {
            "type": "integer",
            "description": "Sequence number of the mandate",
            "example": 1,
            "format": "int64"
          },
          "umn": {
            "type": "string",
            "description": "Unique mandate number",
            "example": "123456789"
          }
        },
        "example": {
          "amount": 1000,
          "referenceId": "ABC1234789",
          "remark": "Transaction for car loan emi",
          "sequenceNumber": 1,
          "umn": "123456789"
        },
        "required": [
          "umn",
          "amount",
          "sequenceNumber"
        ]
      },
      "ExpireDqrByIDResponse": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "integer",
            "description": "Amount (in paise) that needs to be collected from the user. If populated this value gets displayed on the payer PSP's payment page",
            "example": 10000,
            "minimum": 100
          },
          "closedAt": {
            "type": "string",
            "description": "RFC 3339 timestamp to indicate the closure date \u0026 time",
            "example": "2024-06-17T19:17:32+05:30",
            "format": "date-time"
          },
          "createdAt": {
            "type": "string",
            "description": "RFC 3339 timestamp to indicate the creation date \u0026 time for the resource",
            "example": "2024-05-17T19:17:32+05:30",
            "format": "date-time"
          },
          "expiryDate": {
            "type": "string",
            "description": "RFC 3339 timestamp to indicate the expiry date \u0026 time",
            "example": "2024-06-17T19:17:32+05:30",
            "format": "date-time"
          },
          "id": {
            "type": "string",
            "description": "Id of the resource, which is the same the id returned in the Create \u003cresource\u003e API response",
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "intentLink": {
            "type": "string",
            "description": "A UPI pay intent link built according to the spec enforced by NPCI",
            "example": "upi://pay?pa=test-auto-pgruosncak@okokaxis\u0026pn=merchant-4\u0026am=100.00\u0026tr=SU1240659756905923780\u0026tn=sample%20single%20use%20qr\u0026cu=INR\u0026mc=1234"
          },
          "merchantId": {
            "type": "string",
            "description": "Id associated with the merchant on our platform",
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "merchantVpa": {
            "type": "string",
            "description": "UPI id of the merchant on which the payments are collected",
            "example": "fastestupi@pineaxis",
            "pattern": "^[a-z0-9.-]*@[a-zA-Z]*$"
          },
          "metadata": {
            "type": "object",
            "description": "field provided for the merchant to add additional key-value pairs",
            "example": {
              "Aut eligendi quia voluptates saepe ex.": "Neque qui quasi sit.",
              "Eum nam et cum esse.": "Porro enim rerum omnis corrupti dolorem.",
              "Maiores ut alias.": "Officia illo ea incidunt voluptatum."
            },
            "maxLength": 5,
            "additionalProperties": {
              "type": "string",
              "example": "Illum a et deserunt."
            }
          },
          "minAmount": {
            "type": "integer",
            "description": "Minimum amount (in paise) - on setting this value the amount field on the PSP's payment page becomes editable and the customer can pay an amount equal to or greater than the minimum amount",
            "example": 1000,
            "minimum": 100
          },
          "qrCode": {
            "type": "string",
            "description": "QR code for the generated intent link in the form of base64 encoded string",
            "example": ""
          },
          "reason": {
            "$ref": "#/components/schemas/Reason"
          },
          "refId": {
            "type": "string",
            "description": "NPCI transaction refId",
            "example": "1240689979139556558",
            "pattern": "^[a-zA-Z0-9]*$",
            "minLength": 1,
            "maxLength": 35
          },
          "referenceId": {
            "type": "string",
            "description": "reference id in the merchant's system",
            "example": "1240689979139556557",
            "minLength": 1,
            "maxLength": 255
          },
          "shortLink": {
            "type": "string",
            "description": "A shortened URL for the given intent link",
            "example": "upipay.setu.co/Np3KnBCM8Om0"
          },
          "status": {
            "type": "string",
            "description": "status defining the validity of the payment link",
            "example": "active",
            "enum": [
              "inactive",
              "active",
              "paid",
              "closed"
            ]
          },
          "transactionNote": {
            "type": "string",
            "description": "Transaction note displayed to the customer at the payer PSP's payment page",
            "example": "testpay"
          }
        },
        "example": {
          "amount": 10000,
          "closedAt": "2024-06-17T19:17:32+05:30",
          "createdAt": "2024-05-17T19:17:32+05:30",
          "expiryDate": "2024-06-17T19:17:32+05:30",
          "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
          "intentLink": "upi://pay?pa=test-auto-pgruosncak@okokaxis\u0026pn=merchant-4\u0026am=100.00\u0026tr=SU1240659756905923780\u0026tn=sample%20single%20use%20qr\u0026cu=INR\u0026mc=1234",
          "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
          "merchantVpa": "fastestupi@pineaxis",
          "metadata": {
            "Commodi earum repudiandae.": "Odio dolores dolores odio aut.",
            "Enim eos et ipsa magni beatae.": "Delectus et.",
            "Et voluptas dolor et impedit voluptatem aliquid.": "Omnis et laborum ut dolorem vero cum."
          },
          "minAmount": 1000,
          "qrCode": "",
          "reason": {
            "code": "unable-to-fulfill-request",
            "desc": "unable-to-fulfill-request",
            "mandateRevokeReason": "merchant-initiated",
            "npciErrCategory": "TD",
            "npciErrCode": "YG",
            "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
            "npciRespCode": "YG",
            "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)",
            "setuDescription": "Merchant PSP error",
            "suggestedAction": "Merchant PSP error"
          },
          "refId": "1240689979139556558",
          "referenceId": "1240689979139556557",
          "shortLink": "upipay.setu.co/Np3KnBCM8Om0",
          "status": "active",
          "transactionNote": "testpay"
        }
      },
      "FetchCollectResponse": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "integer",
            "description": "paise denominated value that needs to be collected from the user",
            "example": 10000,
            "minimum": 0,
            "maximum": 100000000000000000
          },
          "closedAt": {
            "type": "string",
            "description": "RFC 3339 timestamp to indicate the closure date \u0026 time",
            "example": "2024-05-17T19:17:32+05:30",
            "format": "date-time"
          },
          "createdAt": {
            "type": "string",
            "description": "RFC 3339 timestamp to indicate the creation date \u0026 time for the resource",
            "example": "2024-05-17T19:17:32+05:30",
            "format": "date-time"
          },
          "customerVpa": {
            "type": "string",
            "description": "UPI id of the customer to whom the collect request should be sent to",
            "example": "aadhitya@okaxis",
            "pattern": "^[A-Za-z0-9.-]*@[a-zA-Z0-9.-]*$"
          },
          "expireAfter": {
            "type": "integer",
            "description": "Expiry after (in minutes) for the collect request, the collect request will move to a closed state after this time has elapsed",
            "default": 30,
            "example": 2,
            "minimum": 1,
            "maximum": 64800
          },
          "id": {
            "type": "string",
            "description": "Id of the resource, which is the same the id returned in the Create \u003cresource\u003e API response",
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "merchantId": {
            "type": "string",
            "description": "Id associated with the merchant on our platform",
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "merchantVpa": {
            "type": "string",
            "description": "UPI id of the merchant on which the payments are collected",
            "example": "fastestupi@pineaxis"
          },
          "metadata": {
            "type": "string",
            "description": "field provided for the merchant to add additional key-value pairs",
            "example": {
              "InvoiceNumber": "INV-21-12-009"
            },
            "format": "binary"
          },
          "paymentDetails": {
            "$ref": "#/components/schemas/PaymentDetails"
          },
          "reason": {
            "$ref": "#/components/schemas/Reason"
          },
          "refId": {
            "type": "string",
            "description": "NPCI transaction refId",
            "example": "1240689979139556558",
            "pattern": "^[a-zA-Z0-9]*$",
            "minLength": 1,
            "maxLength": 35
          },
          "referenceId": {
            "type": "string",
            "description": "Id to be used by merchant to identify the collect request on our platform, this can be the customer's invoice number or loan number",
            "example": "1240689979139556557",
            "minLength": 1,
            "maxLength": 255
          },
          "status": {
            "type": "string",
            "description": "status defining the validity of the collect request",
            "example": "active",
            "enum": [
              "active",
              "paid",
              "closed"
            ]
          },
          "transactionNote": {
            "type": "string",
            "description": "note displayed to the customer at the payment page",
            "example": "Payment for loan repayment",
            "pattern": "^[^(){}\\[\\]\u003c\u003e]*$",
            "minLength": 1,
            "maxLength": 50
          }
        },
        "example": {
          "amount": 10000,
          "closedAt": "2024-05-17T19:17:32+05:30",
          "createdAt": "2024-05-17T19:17:32+05:30",
          "customerVpa": "aadhitya@okaxis",
          "expireAfter": 2,
          "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
          "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
          "merchantVpa": "fastestupi@pineaxis",
          "metadata": {
            "InvoiceNumber": "INV-21-12-009"
          },
          "paymentDetails": {
            "customerAccountType": "SAVINGS",
            "customerVpa": "test-auto-tyvmm59i9b@okokaxis",
            "paymentId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
            "paymentStatus": "initiated",
            "rrn": "124068997913",
            "txnId": "SETmBZkQOV0M7wyyP1V4PIFhRSzW5eSjmYI",
            "txnTs": "2024-06-17T19:17:32+05:30"
          },
          "reason": {
            "code": "unable-to-fulfill-request",
            "desc": "unable-to-fulfill-request",
            "mandateRevokeReason": "merchant-initiated",
            "npciErrCategory": "TD",
            "npciErrCode": "YG",
            "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
            "npciRespCode": "YG",
            "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)",
            "setuDescription": "Merchant PSP error",
            "suggestedAction": "Merchant PSP error"
          },
          "refId": "1240689979139556558",
          "referenceId": "1240689979139556557",
          "status": "active",
          "transactionNote": "Payment for loan repayment"
        }
      },
      "FetchCustomerVpaByIDResponse": {
        "type": "object",
        "properties": {
          "createdAt": {
            "type": "string",
            "description": "ISO 8601 timestamp to indicate the creation date \u0026 time for the verification request",
            "example": "2024-05-17T19:17:32+05:30",
            "format": "date-time"
          },
          "customerAccountType": {
            "type": "string",
            "description": "account type of the customer",
            "example": "SAVINGS",
            "enum": [
              "SAVINGS",
              "CURRENT",
              "CREDIT"
            ]
          },
          "customerVpa": {
            "type": "string",
            "description": "UPI id of the customer that needs to be verified",
            "example": "ram@okhdfc",
            "pattern": "^[a-zA-Z0-9.-]*@[a-zA-Z0-9.-]*$"
          },
          "id": {
            "type": "string",
            "description": "ID of the request",
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "merchantId": {
            "type": "string",
            "description": "Id associated with the merchant on our platform",
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "reason": {
            "$ref": "#/components/schemas/Reason"
          },
          "referenceId": {
            "type": "string",
            "description": "Id to be used by merchant to identify the verifcation request on our platform",
            "example": "1240689979139556557",
            "minLength": 1,
            "maxLength": 255
          },
          "status": {
            "type": "string",
            "description": "status defining the validity of the customer vpa",
            "example": "pending",
            "enum": [
              "pending",
              "valid",
              "invalid",
              "failed"
            ]
          }
        },
        "example": {
          "createdAt": "2024-05-17T19:17:32+05:30",
          "customerAccountType": "SAVINGS",
          "customerVpa": "ram@okhdfc",
          "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
          "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
          "reason": {
            "code": "unable-to-fulfill-request",
            "desc": "unable-to-fulfill-request",
            "mandateRevokeReason": "merchant-initiated",
            "npciErrCategory": "TD",
            "npciErrCode": "YG",
            "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
            "npciRespCode": "YG",
            "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)",
            "setuDescription": "Merchant PSP error",
            "suggestedAction": "Merchant PSP error"
          },
          "referenceId": "1240689979139556557",
          "status": "pending"
        }
      },
      "FetchDqrByIDResponse": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "integer",
            "description": "Amount (in paise) that needs to be collected from the user. If populated this value gets displayed on the payer PSP's payment page",
            "example": 10000,
            "minimum": 100
          },
          "closedAt": {
            "type": "string",
            "description": "RFC 3339 timestamp to indicate the closure date \u0026 time",
            "example": "2024-06-17T19:17:32+05:30",
            "format": "date-time"
          },
          "createdAt": {
            "type": "string",
            "description": "RFC 3339 timestamp to indicate the creation date \u0026 time for the resource",
            "example": "2024-05-17T19:17:32+05:30",
            "format": "date-time"
          },
          "expiryDate": {
            "type": "string",
            "description": "RFC 3339 timestamp to indicate the expiry date \u0026 time",
            "example": "2024-06-17T19:17:32+05:30",
            "format": "date-time"
          },
          "id": {
            "type": "string",
            "description": "Id of the resource, which is the same the id returned in the Create \u003cresource\u003e API response",
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "intentLink": {
            "type": "string",
            "description": "A UPI pay intent link built according to the spec enforced by NPCI",
            "example": "upi://pay?pa=test-auto-pgruosncak@okokaxis\u0026pn=merchant-4\u0026am=100.00\u0026tr=SU1240659756905923780\u0026tn=sample%20single%20use%20qr\u0026cu=INR\u0026mc=1234"
          },
          "merchantId": {
            "type": "string",
            "description": "Id associated with the merchant on our platform",
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "merchantVpa": {
            "type": "string",
            "description": "UPI id of the merchant on which the payments are collected",
            "example": "fastestupi@pineaxis",
            "pattern": "^[a-z0-9.-]*@[a-zA-Z]*$"
          },
          "metadata": {
            "type": "object",
            "description": "field provided for the merchant to add additional key-value pairs",
            "example": {
              "Qui placeat.": "Consectetur rerum magnam a id explicabo.",
              "Repellendus cupiditate consectetur.": "Repudiandae voluptatem.",
              "Sequi fugiat fugiat eligendi dicta doloremque.": "Dolorem distinctio ut facere minus."
            },
            "maxLength": 5,
            "additionalProperties": {
              "type": "string",
              "example": "Eaque qui."
            }
          },
          "minAmount": {
            "type": "integer",
            "description": "Minimum amount (in paise) - on setting this value the amount field on the PSP's payment page becomes editable and the customer can pay an amount equal to or greater than the minimum amount",
            "example": 1000,
            "minimum": 100
          },
          "paymentDetails": {
            "$ref": "#/components/schemas/PaymentDetails"
          },
          "qrCode": {
            "type": "string",
            "description": "QR code for the generated intent link in the form of base64 encoded string",
            "example": ""
          },
          "reason": {
            "$ref": "#/components/schemas/Reason"
          },
          "refId": {
            "type": "string",
            "description": "NPCI transaction refId",
            "example": "1240689979139556558",
            "pattern": "^[a-zA-Z0-9]*$",
            "minLength": 1,
            "maxLength": 35
          },
          "referenceId": {
            "type": "string",
            "description": "reference id in the merchant's system",
            "example": "1240689979139556557",
            "minLength": 1,
            "maxLength": 255
          },
          "shortLink": {
            "type": "string",
            "description": "A shortened URL for the given intent link",
            "example": "upipay.setu.co/Np3KnBCM8Om0"
          },
          "status": {
            "type": "string",
            "description": "status defining the validity of the payment link",
            "example": "active",
            "enum": [
              "inactive",
              "active",
              "paid",
              "closed"
            ]
          },
          "transactionNote": {
            "type": "string",
            "description": "Transaction note displayed to the customer at the payer PSP's payment page",
            "example": "testpay"
          }
        },
        "example": {
          "amount": 10000,
          "closedAt": "2024-06-17T19:17:32+05:30",
          "createdAt": "2024-05-17T19:17:32+05:30",
          "expiryDate": "2024-06-17T19:17:32+05:30",
          "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
          "intentLink": "upi://pay?pa=test-auto-pgruosncak@okokaxis\u0026pn=merchant-4\u0026am=100.00\u0026tr=SU1240659756905923780\u0026tn=sample%20single%20use%20qr\u0026cu=INR\u0026mc=1234",
          "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
          "merchantVpa": "fastestupi@pineaxis",
          "metadata": {
            "Blanditiis perspiciatis nihil velit perspiciatis.": "Soluta omnis repellendus voluptatem recusandae delectus.",
            "Id voluptas praesentium est est.": "Voluptate eos sequi quasi ipsa neque.",
            "Labore ratione.": "Voluptas porro accusantium natus."
          },
          "minAmount": 1000,
          "paymentDetails": {
            "customerAccountType": "SAVINGS",
            "customerVpa": "test-auto-tyvmm59i9b@okokaxis",
            "paymentId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
            "paymentStatus": "initiated",
            "rrn": "124068997913",
            "txnId": "SETmBZkQOV0M7wyyP1V4PIFhRSzW5eSjmYI",
            "txnTs": "2024-06-17T19:17:32+05:30"
          },
          "qrCode": "",
          "reason": {
            "code": "unable-to-fulfill-request",
            "desc": "unable-to-fulfill-request",
            "mandateRevokeReason": "merchant-initiated",
            "npciErrCategory": "TD",
            "npciErrCode": "YG",
            "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
            "npciRespCode": "YG",
            "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)",
            "setuDescription": "Merchant PSP error",
            "suggestedAction": "Merchant PSP error"
          },
          "refId": "1240689979139556558",
          "referenceId": "1240689979139556557",
          "shortLink": "upipay.setu.co/Np3KnBCM8Om0",
          "status": "active",
          "transactionNote": "testpay"
        }
      },
      "FetchMandateExecutionResponse": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "integer",
            "description": "Amount of the mandate",
            "example": 1000,
            "minimum": 100,
            "maximum": 20000000
          },
          "createdAt": {
            "type": "string",
            "description": "RFC 3339 timestamp to indicate the creation date \u0026 time for the resource",
            "example": "2024-05-17T19:17:32+05:30",
            "format": "date-time"
          },
          "id": {
            "type": "string",
            "description": "Id of the resource, which is the same the id returned in the Create \u003cresource\u003e API response",
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "mandateId": {
            "type": "string",
            "description": "Id of the mandate that needs to be executed",
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "merchantId": {
            "type": "string",
            "description": "Id of the merchant who created the mandate",
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "payment": {
            "$ref": "#/components/schemas/PaymentDetails"
          },
          "reason": {
            "$ref": "#/components/schemas/Reason"
          },
          "referenceId": {
            "type": "string",
            "description": "Merchant reference id of the mandate",
            "example": "ABC1234789",
            "minLength": 5,
            "maxLength": 50
          },
          "remark": {
            "type": "string",
            "description": "Remark for the mandate transaction",
            "example": "Transaction for car loan emi"
          },
          "sequenceNumber": {
            "type": "integer",
            "description": "Sequence number of the mandate",
            "example": 1,
            "format": "int64"
          },
          "status": {
            "type": "string",
            "description": "Status of the mandate execution request",
            "example": "live",
            "enum": [
              "pending",
              "initiated",
              "success",
              "failed"
            ]
          },
          "txnId": {
            "type": "string",
            "description": "NPCI transaction id",
            "example": "BTTZrc5gDFkuCr3n3I0ey4aNtzLOLR7K7aR",
            "pattern": "^[a-zA-Z0-9]*$",
            "minLength": 35,
            "maxLength": 35
          },
          "umn": {
            "type": "string",
            "description": "Unique mandate number",
            "example": "c27f5fc30d344e9594fce0afa34f8859@mypsp"
          },
          "unblockedAmount": {
            "type": "integer",
            "description": "Amount unblocked from the reserve mandate",
            "example": 1,
            "format": "int64"
          }
        },
        "example": {
          "amount": 1000,
          "createdAt": "2024-05-17T19:17:32+05:30",
          "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
          "mandateId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
          "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
          "payment": {
            "customerAccountType": "SAVINGS",
            "customerVpa": "test-auto-tyvmm59i9b@okokaxis",
            "paymentId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
            "paymentStatus": "initiated",
            "rrn": "124068997913",
            "txnId": "SETmBZkQOV0M7wyyP1V4PIFhRSzW5eSjmYI",
            "txnTs": "2024-06-17T19:17:32+05:30"
          },
          "reason": {
            "code": "unable-to-fulfill-request",
            "desc": "unable-to-fulfill-request",
            "mandateRevokeReason": "merchant-initiated",
            "npciErrCategory": "TD",
            "npciErrCode": "YG",
            "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
            "npciRespCode": "YG",
            "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)",
            "setuDescription": "Merchant PSP error",
            "suggestedAction": "Merchant PSP error"
          },
          "referenceId": "ABC1234789",
          "remark": "Transaction for car loan emi",
          "sequenceNumber": 1,
          "status": "live",
          "txnId": "BTTZrc5gDFkuCr3n3I0ey4aNtzLOLR7K7aR",
          "umn": "c27f5fc30d344e9594fce0afa34f8859@mypsp",
          "unblockedAmount": 1
        }
      },
      "FetchMandateOperationResponse": {
        "type": "object",
        "properties": {
          "amountLimit": {
            "type": "integer",
            "description": "Maximum amount for which a mandate transaction can be executed",
            "example": 1000,
            "minimum": 10000,
            "maximum": 2000000000
          },
          "createdAt": {
            "type": "string",
            "description": "ISO 8601 timestamp to indicate the creation date \u0026 time for the mandate operation request",
            "example": "2024-05-17T19:17:32+05:30",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "description": "End date of the mandate",
            "example": "02012006"
          },
          "expireAfter": {
            "type": "integer",
            "description": "Number of minutes after which the mandate update request will expire",
            "default": 2,
            "example": 2,
            "minimum": 2,
            "maximum": 64800
          },
          "id": {
            "type": "string",
            "description": "Id of the mandate request resource",
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "intentLink": {
            "type": "string",
            "example": "upi://mandate?pa=deku040920232@okokaxis\u0026validitystart=31121995\u0026validityend=30122025\u0026am=901.00\u0026amrule=max\u0026recur=one%20time\u0026recurvalue=0\u0026recurtype=on\u0026cu=INR\u0026mc=1234\u0026mode=01\u0026purpose=14\u0026rev=N\u0026block=N\u0026txnType=update\u0026umn=SETUS7mxYHK1A6yXhxJsoKM7yxKqC2r0\u0026tid=SETM3Iij4WQrtEUbOUFkTpQp2EpR5wqy5Ou"
          },
          "mandateId": {
            "type": "string",
            "description": "Id of the mandate resource",
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "merchantId": {
            "type": "string",
            "description": "Id of the merchant who created the mandate",
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "mode": {
            "type": "string",
            "description": "Mandate operation mode",
            "example": "qr",
            "enum": [
              "collect",
              "qr",
              "intent"
            ]
          },
          "qrCode": {
            "type": "string",
            "description": "QR code for the generated intent link in the form of base64 encoded string",
            "example": ""
          },
          "reason": {
            "$ref": "#/components/schemas/Reason"
          },
          "referenceId": {
            "type": "string",
            "description": "Merchant reference id of the mandate",
            "example": "ABC1234789",
            "minLength": 5,
            "maxLength": 255
          },
          "status": {
            "type": "string",
            "example": "pending",
            "enum": [
              "pending",
              "initiated",
              "success",
              "failed"
            ]
          },
          "txnId": {
            "type": "string",
            "description": "NPCI transaction id",
            "example": "BTTZrc5gDFkuCr3n3I0ey4aNtzLOLR7K7aR",
            "pattern": "^[a-zA-Z0-9]*$",
            "minLength": 35,
            "maxLength": 35
          },
          "type": {
            "type": "string",
            "description": "Mandate operation type",
            "example": "Sed qui quia enim enim."
          },
          "umn": {
            "type": "string",
            "description": "Unique mandate number",
            "example": "c27f5fc30d344e9594fce0afa34f8859@mypsp"
          }
        },
        "example": {
          "amountLimit": 1000,
          "createdAt": "2024-05-17T19:17:32+05:30",
          "endDate": "02012006",
          "expireAfter": 2,
          "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
          "intentLink": "upi://mandate?pa=deku040920232@okokaxis\u0026validitystart=31121995\u0026validityend=30122025\u0026am=901.00\u0026amrule=max\u0026recur=one%20time\u0026recurvalue=0\u0026recurtype=on\u0026cu=INR\u0026mc=1234\u0026mode=01\u0026purpose=14\u0026rev=N\u0026block=N\u0026txnType=update\u0026umn=SETUS7mxYHK1A6yXhxJsoKM7yxKqC2r0\u0026tid=SETM3Iij4WQrtEUbOUFkTpQp2EpR5wqy5Ou",
          "mandateId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
          "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
          "mode": "qr",
          "qrCode": "",
          "reason": {
            "code": "unable-to-fulfill-request",
            "desc": "unable-to-fulfill-request",
            "mandateRevokeReason": "merchant-initiated",
            "npciErrCategory": "TD",
            "npciErrCode": "YG",
            "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
            "npciRespCode": "YG",
            "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)",
            "setuDescription": "Merchant PSP error",
            "suggestedAction": "Merchant PSP error"
          },
          "referenceId": "ABC1234789",
          "status": "pending",
          "txnId": "BTTZrc5gDFkuCr3n3I0ey4aNtzLOLR7K7aR",
          "type": "Nam corrupti quaerat odio magnam inventore dolorem.",
          "umn": "c27f5fc30d344e9594fce0afa34f8859@mypsp"
        }
      },
      "FetchMandatePreDebitNotificationResponse": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "integer",
            "description": "Amount of the mandate",
            "example": 1000,
            "minimum": 100,
            "maximum": 20000000
          },
          "createdAt": {
            "type": "string",
            "description": "RFC 3339 timestamp to indicate the creation date \u0026 time for the resource",
            "example": "2024-05-17T19:17:32+05:30",
            "format": "date-time"
          },
          "executionDate": {
            "type": "string",
            "description": "Execution date of the mandate",
            "example": "02012006"
          },
          "id": {
            "type": "string",
            "description": "Id of the resource, which is the same the id returned in the Create \u003cresource\u003e API response",
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "mandateId": {
            "type": "string",
            "description": "Id of the mandate that needs to be notified",
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "merchantId": {
            "type": "string",
            "description": "Id of the merchant who created the mandate",
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "reason": {
            "$ref": "#/components/schemas/Reason"
          },
          "referenceId": {
            "type": "string",
            "description": "Merchant reference id of the mandate",
            "example": "ABC1234789",
            "minLength": 5,
            "maxLength": 50
          },
          "sequenceNumber": {
            "type": "integer",
            "description": "Sequence number of the mandate",
            "example": 1,
            "format": "int64"
          },
          "status": {
            "type": "string",
            "description": "Status of the pre debit notification request",
            "example": "success",
            "enum": [
              "pending",
              "initiated",
              "success",
              "failed"
            ]
          },
          "txnId": {
            "type": "string",
            "description": "NPCI transaction id",
            "example": "BTTZrc5gDFkuCr3n3I0ey4aNtzLOLR7K7aR",
            "pattern": "^[a-zA-Z0-9]*$",
            "minLength": 35,
            "maxLength": 35
          },
          "umn": {
            "type": "string",
            "description": "Unique mandate number",
            "example": "c27f5fc30d344e9594fce0afa34f8859@mypsp"
          }
        },
        "example": {
          "amount": 1000,
          "createdAt": "2024-05-17T19:17:32+05:30",
          "executionDate": "02012006",
          "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
          "mandateId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
          "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
          "reason": {
            "code": "unable-to-fulfill-request",
            "desc": "unable-to-fulfill-request",
            "mandateRevokeReason": "merchant-initiated",
            "npciErrCategory": "TD",
            "npciErrCode": "YG",
            "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
            "npciRespCode": "YG",
            "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)",
            "setuDescription": "Merchant PSP error",
            "suggestedAction": "Merchant PSP error"
          },
          "referenceId": "ABC1234789",
          "sequenceNumber": 1,
          "status": "success",
          "txnId": "BTTZrc5gDFkuCr3n3I0ey4aNtzLOLR7K7aR",
          "umn": "c27f5fc30d344e9594fce0afa34f8859@mypsp"
        }
      },
      "FetchMandateResponse": {
        "type": "object",
        "properties": {
          "allowMultipleDebit": {
            "type": "boolean",
            "description": "Allow multiple debits for the mandate",
            "default": false,
            "example": true
          },
          "amount": {
            "type": "integer",
            "description": "Amount(in paise) of the mandate",
            "example": 1000,
            "minimum": 100,
            "maximum": 20000000
          },
          "amountRule": {
            "type": "string",
            "description": "Rule for verifying the debit amount is within range of specified amount_limit",
            "example": "max",
            "enum": [
              "max",
              "exact"
            ]
          },
          "autoExecute": {
            "type": "boolean",
            "description": "Auto execute of the mandate",
            "example": true
          },
          "autoPreNotify": {
            "type": "boolean",
            "description": "Auto pre notify of the mandate",
            "example": true
          },
          "autoRefundFirstExecutionAmount": {
            "type": "boolean",
            "description": "Enable auto refund of first execution amount",
            "default": false,
            "example": false
          },
          "blockFunds": {
            "type": "boolean",
            "description": "Block funds for the mandate",
            "default": false,
            "example": true
          },
          "createdAt": {
            "type": "string",
            "description": "RFC 3339 timestamp to indicate the creation date \u0026 time for the resource",
            "example": "2024-05-17T19:17:32+05:30",
            "format": "date-time"
          },
          "creationMode": {
            "type": "string",
            "description": "Creation mode of the mandate",
            "example": "qr",
            "enum": [
              "collect",
              "intent"
            ]
          },
          "currency": {
            "type": "string",
            "description": "Currency in which the mandate payment will be executed",
            "default": "INR",
            "example": "INR",
            "enum": [
              "INR"
            ]
          },
          "customerRevocable": {
            "type": "boolean",
            "example": true
          },
          "customerVpa": {
            "type": "string",
            "description": "UPI id of the customer from which payments are made",
            "example": "ram@axis",
            "pattern": "^[a-zA-Z0-9.-]*@[a-zA-Z0-9.-]*$"
          },
          "endDate": {
            "type": "string",
            "description": "End date of the mandate (ddmmyyyy)",
            "example": "02012008"
          },
          "expireAfter": {
            "type": "integer",
            "description": "Number of minutes after which the mandate creation request will expire",
            "default": 2,
            "example": 2,
            "minimum": 2,
            "maximum": 64800
          },
          "firstExecutionAmount": {
            "type": "integer",
            "description": "First execution amount(in paise) of the mandate",
            "default": 0,
            "example": 1000,
            "minimum": 0,
            "maximum": 20000000
          },
          "frequency": {
            "type": "string",
            "description": "Frequency of the mandate",
            "example": "monthly",
            "enum": [
              "one time",
              "weekly",
              "daily",
              "fortnightly",
              "monthly",
              "bi monthly",
              "quarterly",
              "half yearly",
              "yearly",
              "as presented"
            ]
          },
          "id": {
            "type": "string",
            "description": "Id of the resource, which is the same the id returned in the Create \u003cresource\u003e API response",
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "ifscMatchType": {
            "type": "string",
            "description": "IFSC match type for the mandate",
            "example": "CompleteIFSCMatch",
            "enum": [
              "CompleteIFSCMatch",
              "BankCodeMatch"
            ]
          },
          "initiationMode": {
            "type": "string",
            "description": "Initiation mode of the mandate",
            "example": "01",
            "enum": [
              "00",
              "01",
              "04"
            ]
          },
          "intentLink": {
            "type": "string",
            "description": "Intent link for the mandate request",
            "example": "upi://mandate?pa=deku040920232@okokaxis\u0026pn=merchant-1\u0026validitystart=31121995\u0026validityend=31121996\u0026am=100.00\u0026amrule=MAX\u0026recur=one%20time\u0026recurvalue=0\u0026recurtype=on\u0026tr=SETgv8wOOCElAtpzfbAEXqcKvN8QPfunAhI\u0026cu=INR\u0026mc=1234\u0026mode=04\u0026purpose=14\u0026rev=N\u0026share=Y\u0026qrexpire=04092023\u0026block=N\u0026orgid=000000\u0026version=2.0\u0026txnType=create\u0026tid=SETgv8wOOCElAtpzfbAEXqcKvN8QPfunAhI"
          },
          "mandateLiveAt": {
            "type": "string",
            "description": "ISO 8601 timestamp to indicate when the mandate transitioned to live state",
            "example": "2023-09-04 12:08:20.202644 +0530 IST",
            "format": "date-time"
          },
          "maxAmountLimit": {
            "type": "integer",
            "description": "Maximum amount(in paise) for which a mandate transaction can be executed",
            "example": 1000,
            "minimum": 100,
            "maximum": 20000000
          },
          "merchantId": {
            "type": "string",
            "description": "Id of the merchant who created the mandate",
            "example": "Praesentium magnam assumenda accusamus nulla ut omnis."
          },
          "merchantVpa": {
            "type": "string",
            "description": "UPI id of the merchant on which the payments are collected",
            "example": "fastestupi@pineaxis",
            "pattern": "^[a-z0-9.-]*@[a-zA-Z]*$"
          },
          "paymentDetails": {
            "$ref": "#/components/schemas/PaymentDetails"
          },
          "primaryAccount": {
            "$ref": "#/components/schemas/TPVAccountDetailResponse"
          },
          "productConfigId": {
            "type": "string",
            "description": "Configuration Id of the product",
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "purpose": {
            "type": "string",
            "description": "Purpose of the mandate",
            "default": "14",
            "example": "14",
            "enum": [
              "00",
              "14",
              "76",
              "01"
            ]
          },
          "qrCode": {
            "type": "string",
            "description": "QR code for the generated intent link in the form of base64 encoded string",
            "example": ""
          },
          "reason": {
            "$ref": "#/components/schemas/Reason"
          },
          "recurrenceRule": {
            "type": "string",
            "description": "Recurrence rule of the mandate",
            "default": "on",
            "example": "on",
            "enum": [
              "on",
              "before",
              "after"
            ]
          },
          "recurrenceValue": {
            "type": "integer",
            "description": "Recurrence value of the mandate",
            "example": 1,
            "minimum": 0,
            "maximum": 31
          },
          "referenceId": {
            "type": "string",
            "description": "Merchant reference id of the mandate",
            "example": "ABC1234789",
            "minLength": 5,
            "maxLength": 50
          },
          "secondaryAccounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TPVAccountDetailResponse"
            },
            "description": "secondary accounts for the recur tpv transaction",
            "example": [
              {
                "IFSC": "SBIN0000001",
                "encryptedAccountName": "5e884898da28047151d0e56f8dc629277",
                "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                "hashedAccountName": "5e884898da28047151d0e56f8dc629277",
                "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                "maskedAccountName": "R*M*E*S*",
                "maskedAccountNumber": "**** **** **** 7890"
              },
              {
                "IFSC": "SBIN0000001",
                "encryptedAccountName": "5e884898da28047151d0e56f8dc629277",
                "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                "hashedAccountName": "5e884898da28047151d0e56f8dc629277",
                "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                "maskedAccountName": "R*M*E*S*",
                "maskedAccountNumber": "**** **** **** 7890"
              }
            ]
          },
          "shareToPayee": {
            "type": "boolean",
            "example": false
          },
          "shortCode": {
            "type": "string",
            "description": "Short code for the generated intent link in the form of base64 encoded string",
            "example": "TlNssqA7wlZC"
          },
          "shortLink": {
            "type": "string",
            "description": "Short link for the generated intent link in the form of base64 encoded string",
            "example": "https://upi.setu.pe/TlNssqA7wlZC"
          },
          "showFirstExecutionAmountToPayer": {
            "type": "boolean",
            "description": "Show first execution amount (fam) on payer apps",
            "default": false,
            "example": false
          },
          "startDate": {
            "type": "string",
            "description": "Start date of the mandate (ddmmyyyy)",
            "example": "02012006"
          },
          "status": {
            "type": "string",
            "description": "Status of the mandate",
            "example": "pending",
            "enum": [
              "pending",
              "live",
              "paused",
              "revoked",
              "rejected",
              "completed"
            ]
          },
          "transactionNote": {
            "type": "string",
            "description": "Transaction note of the mandate",
            "example": "Transaction note",
            "pattern": "^[^(){}\\[\\]\u003c\u003e]*$",
            "maxLength": 50
          },
          "txnId": {
            "type": "string",
            "description": "NPCI transaction id",
            "example": "BTTZrc5gDFkuCr3n3I0ey4aNtzLOLR7K7aR",
            "pattern": "^[a-zA-Z0-9]*$",
            "minLength": 35,
            "maxLength": 35
          },
          "umn": {
            "type": "string",
            "description": "Unique mandate number",
            "example": "c27f5fc30d344e9594fce0afa34f8859@mypsp"
          }
        },
        "example": {
          "allowMultipleDebit": true,
          "amount": 1000,
          "amountRule": "max",
          "autoExecute": true,
          "autoPreNotify": true,
          "autoRefundFirstExecutionAmount": false,
          "blockFunds": true,
          "createdAt": "2024-05-17T19:17:32+05:30",
          "creationMode": "qr",
          "currency": "INR",
          "customerRevocable": true,
          "customerVpa": "ram@axis",
          "endDate": "02012008",
          "expireAfter": 2,
          "firstExecutionAmount": 1000,
          "frequency": "monthly",
          "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
          "ifscMatchType": "CompleteIFSCMatch",
          "initiationMode": "00",
          "intentLink": "upi://mandate?pa=deku040920232@okokaxis\u0026pn=merchant-1\u0026validitystart=31121995\u0026validityend=31121996\u0026am=100.00\u0026amrule=MAX\u0026recur=one%20time\u0026recurvalue=0\u0026recurtype=on\u0026tr=SETgv8wOOCElAtpzfbAEXqcKvN8QPfunAhI\u0026cu=INR\u0026mc=1234\u0026mode=04\u0026purpose=14\u0026rev=N\u0026share=Y\u0026qrexpire=04092023\u0026block=N\u0026orgid=000000\u0026version=2.0\u0026txnType=create\u0026tid=SETgv8wOOCElAtpzfbAEXqcKvN8QPfunAhI",
          "mandateLiveAt": "2023-09-04 12:08:20.202644 +0530 IST",
          "maxAmountLimit": 1000,
          "merchantId": "Mollitia dolor quae officia.",
          "merchantVpa": "fastestupi@pineaxis",
          "paymentDetails": {
            "customerAccountType": "SAVINGS",
            "customerVpa": "test-auto-tyvmm59i9b@okokaxis",
            "paymentId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
            "paymentStatus": "initiated",
            "rrn": "124068997913",
            "txnId": "SETmBZkQOV0M7wyyP1V4PIFhRSzW5eSjmYI",
            "txnTs": "2024-06-17T19:17:32+05:30"
          },
          "primaryAccount": {
            "IFSC": "SBIN0000001",
            "encryptedAccountName": "5e884898da28047151d0e56f8dc629277",
            "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
            "hashedAccountName": "5e884898da28047151d0e56f8dc629277",
            "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
            "maskedAccountName": "R*M*E*S*",
            "maskedAccountNumber": "**** **** **** 7890"
          },
          "productConfigId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
          "purpose": "14",
          "qrCode": "",
          "reason": {
            "code": "unable-to-fulfill-request",
            "desc": "unable-to-fulfill-request",
            "mandateRevokeReason": "merchant-initiated",
            "npciErrCategory": "TD",
            "npciErrCode": "YG",
            "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
            "npciRespCode": "YG",
            "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)",
            "setuDescription": "Merchant PSP error",
            "suggestedAction": "Merchant PSP error"
          },
          "recurrenceRule": "on",
          "recurrenceValue": 1,
          "referenceId": "ABC1234789",
          "secondaryAccounts": [
            {
              "IFSC": "SBIN0000001",
              "encryptedAccountName": "5e884898da28047151d0e56f8dc629277",
              "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
              "hashedAccountName": "5e884898da28047151d0e56f8dc629277",
              "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
              "maskedAccountName": "R*M*E*S*",
              "maskedAccountNumber": "**** **** **** 7890"
            },
            {
              "IFSC": "SBIN0000001",
              "encryptedAccountName": "5e884898da28047151d0e56f8dc629277",
              "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
              "hashedAccountName": "5e884898da28047151d0e56f8dc629277",
              "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
              "maskedAccountName": "R*M*E*S*",
              "maskedAccountNumber": "**** **** **** 7890"
            },
            {
              "IFSC": "SBIN0000001",
              "encryptedAccountName": "5e884898da28047151d0e56f8dc629277",
              "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
              "hashedAccountName": "5e884898da28047151d0e56f8dc629277",
              "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
              "maskedAccountName": "R*M*E*S*",
              "maskedAccountNumber": "**** **** **** 7890"
            }
          ],
          "shareToPayee": false,
          "shortCode": "TlNssqA7wlZC",
          "shortLink": "https://upi.setu.pe/TlNssqA7wlZC",
          "showFirstExecutionAmountToPayer": false,
          "startDate": "02012006",
          "status": "pending",
          "transactionNote": "Transaction note",
          "txnId": "BTTZrc5gDFkuCr3n3I0ey4aNtzLOLR7K7aR",
          "umn": "c27f5fc30d344e9594fce0afa34f8859@mypsp"
        }
      },
      "FetchOqrByIDResponse": {
        "type": "object",
        "properties": {
          "closedAt": {
            "type": "string",
            "description": "RFC 3339 timestamp to indicate the closure date \u0026 time",
            "example": "2024-06-17T19:17:32+05:30",
            "format": "date-time"
          },
          "createdAt": {
            "type": "string",
            "description": "RFC 3339 timestamp to indicate the creation date \u0026 time for the resource",
            "example": "2024-05-17T19:17:32+05:30",
            "format": "date-time"
          },
          "expiryDate": {
            "type": "string",
            "description": "RFC 3339 timestamp to indicate the expiry date \u0026 time",
            "example": "2024-06-17T19:17:32+05:30",
            "format": "date-time"
          },
          "id": {
            "type": "string",
            "description": "Id of the resource, which is the same the id returned in the Create \u003cresource\u003e API response",
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "intentLink": {
            "type": "string",
            "description": "A UPI pay intent link built according to the spec enforced by NPCI",
            "example": "upi://pay?pa=test-auto-pgruosncak@okokaxis\u0026pn=merchant-4\u0026am=100.00\u0026tr=SU1240659756905923780\u0026tn=samplesingle0useqr\u0026cu=INR\u0026mc=1234"
          },
          "merchantId": {
            "type": "string",
            "description": "Id associated with the merchant on our platform",
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "merchantVpa": {
            "type": "string",
            "description": "UPI id of the merchant on which the payments are collected",
            "example": "fastestupi@pineaxis",
            "pattern": "^[a-z0-9.-]*@[a-zA-Z]*$"
          },
          "reason": {
            "$ref": "#/components/schemas/Reason"
          },
          "referenceId": {
            "type": "string",
            "description": "reference id in the merchant's system",
            "example": "1240689979139556557",
            "minLength": 1,
            "maxLength": 255
          },
          "status": {
            "type": "string",
            "description": "status defining the validity of the payment link",
            "example": "active",
            "enum": [
              "inactive",
              "active",
              "paid",
              "closed"
            ]
          },
          "transactionReference": {
            "type": "string",
            "description": "Transaction reference id circulated by NPCI",
            "example": "1240689979139556558",
            "pattern": "^[a-zA-Z0-9]*$",
            "minLength": 9,
            "maxLength": 35
          }
        },
        "example": {
          "closedAt": "2024-06-17T19:17:32+05:30",
          "createdAt": "2024-05-17T19:17:32+05:30",
          "expiryDate": "2024-06-17T19:17:32+05:30",
          "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
          "intentLink": "upi://pay?pa=test-auto-pgruosncak@okokaxis\u0026pn=merchant-4\u0026am=100.00\u0026tr=SU1240659756905923780\u0026tn=samplesingle0useqr\u0026cu=INR\u0026mc=1234",
          "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
          "merchantVpa": "fastestupi@pineaxis",
          "reason": {
            "code": "unable-to-fulfill-request",
            "desc": "unable-to-fulfill-request",
            "mandateRevokeReason": "merchant-initiated",
            "npciErrCategory": "TD",
            "npciErrCode": "YG",
            "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
            "npciRespCode": "YG",
            "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)",
            "setuDescription": "Merchant PSP error",
            "suggestedAction": "Merchant PSP error"
          },
          "referenceId": "1240689979139556557",
          "status": "active",
          "transactionReference": "1240689979139556558"
        }
      },
      "FetchPaymentListResponse": {
        "type": "object",
        "properties": {
          "payments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FetchPaymentResponse2"
            },
            "example": [
              {
                "amount": 10000,
                "bin": "652922",
                "createdAt": "2024-05-17T19:17:32+05:30",
                "currency": "INR",
                "customerAccountType": "SAVINGS",
                "customerVpa": "test-auto-tyvmm59i9b@okokaxis",
                "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                "merchantVpa": "test-auto-beibfev2oq@okokaxis",
                "metadata": {
                  "Ab ex cum aperiam provident numquam.": "Nisi sunt voluptates assumenda eveniet qui.",
                  "Dignissimos dolores totam fugiat qui magnam.": "Sunt quo possimus ut qui officiis.",
                  "Ipsa cupiditate dolorum laborum.": "Inventore distinctio voluptatem perspiciatis."
                },
                "productInstanceId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                "reason": {
                  "code": "unable-to-fulfill-request",
                  "desc": "unable-to-fulfill-request",
                  "mandateRevokeReason": "merchant-initiated",
                  "npciErrCategory": "TD",
                  "npciErrCode": "YG",
                  "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
                  "npciRespCode": "YG",
                  "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)",
                  "setuDescription": "Merchant PSP error",
                  "suggestedAction": "Merchant PSP error"
                },
                "refId": "1240689979139556558",
                "referenceId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                "requestId": "cjqml1f2e5ocq2mesej0",
                "rrn": "124068997913",
                "status": "initiated",
                "txnId": "SETmBZkQOV0M7wyyP1V4PIFhRSzW5eSjmYI",
                "txnNote": "testpay",
                "txnTs": "2024-06-17T19:17:32+05:30"
              },
              {
                "amount": 10000,
                "bin": "652922",
                "createdAt": "2024-05-17T19:17:32+05:30",
                "currency": "INR",
                "customerAccountType": "SAVINGS",
                "customerVpa": "test-auto-tyvmm59i9b@okokaxis",
                "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                "merchantVpa": "test-auto-beibfev2oq@okokaxis",
                "metadata": {
                  "Ab ex cum aperiam provident numquam.": "Nisi sunt voluptates assumenda eveniet qui.",
                  "Dignissimos dolores totam fugiat qui magnam.": "Sunt quo possimus ut qui officiis.",
                  "Ipsa cupiditate dolorum laborum.": "Inventore distinctio voluptatem perspiciatis."
                },
                "productInstanceId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                "reason": {
                  "code": "unable-to-fulfill-request",
                  "desc": "unable-to-fulfill-request",
                  "mandateRevokeReason": "merchant-initiated",
                  "npciErrCategory": "TD",
                  "npciErrCode": "YG",
                  "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
                  "npciRespCode": "YG",
                  "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)",
                  "setuDescription": "Merchant PSP error",
                  "suggestedAction": "Merchant PSP error"
                },
                "refId": "1240689979139556558",
                "referenceId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                "requestId": "cjqml1f2e5ocq2mesej0",
                "rrn": "124068997913",
                "status": "initiated",
                "txnId": "SETmBZkQOV0M7wyyP1V4PIFhRSzW5eSjmYI",
                "txnNote": "testpay",
                "txnTs": "2024-06-17T19:17:32+05:30"
              }
            ]
          }
        },
        "example": {
          "payments": [
            {
              "amount": 10000,
              "bin": "652922",
              "createdAt": "2024-05-17T19:17:32+05:30",
              "currency": "INR",
              "customerAccountType": "SAVINGS",
              "customerVpa": "test-auto-tyvmm59i9b@okokaxis",
              "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
              "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
              "merchantVpa": "test-auto-beibfev2oq@okokaxis",
              "metadata": {
                "Ab ex cum aperiam provident numquam.": "Nisi sunt voluptates assumenda eveniet qui.",
                "Dignissimos dolores totam fugiat qui magnam.": "Sunt quo possimus ut qui officiis.",
                "Ipsa cupiditate dolorum laborum.": "Inventore distinctio voluptatem perspiciatis."
              },
              "productInstanceId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
              "reason": {
                "code": "unable-to-fulfill-request",
                "desc": "unable-to-fulfill-request",
                "mandateRevokeReason": "merchant-initiated",
                "npciErrCategory": "TD",
                "npciErrCode": "YG",
                "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
                "npciRespCode": "YG",
                "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)",
                "setuDescription": "Merchant PSP error",
                "suggestedAction": "Merchant PSP error"
              },
              "refId": "1240689979139556558",
              "referenceId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
              "requestId": "cjqml1f2e5ocq2mesej0",
              "rrn": "124068997913",
              "status": "initiated",
              "txnId": "SETmBZkQOV0M7wyyP1V4PIFhRSzW5eSjmYI",
              "txnNote": "testpay",
              "txnTs": "2024-06-17T19:17:32+05:30"
            },
            {
              "amount": 10000,
              "bin": "652922",
              "createdAt": "2024-05-17T19:17:32+05:30",
              "currency": "INR",
              "customerAccountType": "SAVINGS",
              "customerVpa": "test-auto-tyvmm59i9b@okokaxis",
              "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
              "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
              "merchantVpa": "test-auto-beibfev2oq@okokaxis",
              "metadata": {
                "Ab ex cum aperiam provident numquam.": "Nisi sunt voluptates assumenda eveniet qui.",
                "Dignissimos dolores totam fugiat qui magnam.": "Sunt quo possimus ut qui officiis.",
                "Ipsa cupiditate dolorum laborum.": "Inventore distinctio voluptatem perspiciatis."
              },
              "productInstanceId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
              "reason": {
                "code": "unable-to-fulfill-request",
                "desc": "unable-to-fulfill-request",
                "mandateRevokeReason": "merchant-initiated",
                "npciErrCategory": "TD",
                "npciErrCode": "YG",
                "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
                "npciRespCode": "YG",
                "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)",
                "setuDescription": "Merchant PSP error",
                "suggestedAction": "Merchant PSP error"
              },
              "refId": "1240689979139556558",
              "referenceId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
              "requestId": "cjqml1f2e5ocq2mesej0",
              "rrn": "124068997913",
              "status": "initiated",
              "txnId": "SETmBZkQOV0M7wyyP1V4PIFhRSzW5eSjmYI",
              "txnNote": "testpay",
              "txnTs": "2024-06-17T19:17:32+05:30"
            },
            {
              "amount": 10000,
              "bin": "652922",
              "createdAt": "2024-05-17T19:17:32+05:30",
              "currency": "INR",
              "customerAccountType": "SAVINGS",
              "customerVpa": "test-auto-tyvmm59i9b@okokaxis",
              "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
              "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
              "merchantVpa": "test-auto-beibfev2oq@okokaxis",
              "metadata": {
                "Ab ex cum aperiam provident numquam.": "Nisi sunt voluptates assumenda eveniet qui.",
                "Dignissimos dolores totam fugiat qui magnam.": "Sunt quo possimus ut qui officiis.",
                "Ipsa cupiditate dolorum laborum.": "Inventore distinctio voluptatem perspiciatis."
              },
              "productInstanceId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
              "reason": {
                "code": "unable-to-fulfill-request",
                "desc": "unable-to-fulfill-request",
                "mandateRevokeReason": "merchant-initiated",
                "npciErrCategory": "TD",
                "npciErrCode": "YG",
                "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
                "npciRespCode": "YG",
                "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)",
                "setuDescription": "Merchant PSP error",
                "suggestedAction": "Merchant PSP error"
              },
              "refId": "1240689979139556558",
              "referenceId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
              "requestId": "cjqml1f2e5ocq2mesej0",
              "rrn": "124068997913",
              "status": "initiated",
              "txnId": "SETmBZkQOV0M7wyyP1V4PIFhRSzW5eSjmYI",
              "txnNote": "testpay",
              "txnTs": "2024-06-17T19:17:32+05:30"
            }
          ]
        }
      },
      "FetchPaymentResponse": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "integer",
            "description": "paise denominated value collected from the user",
            "example": 10000,
            "format": "int64"
          },
          "bin": {
            "type": "string",
            "description": "bin number",
            "example": "652922"
          },
          "createdAt": {
            "type": "string",
            "description": "RFC 3339 timestamp to indicate the creation date \u0026 time for the resource",
            "example": "2024-05-17T19:17:32+05:30",
            "format": "date-time"
          },
          "currency": {
            "type": "string",
            "description": "indicates the currency used during the transaction",
            "example": "INR"
          },
          "customerAccountType": {
            "type": "string",
            "description": "account type of the customer",
            "example": "SAVINGS",
            "enum": [
              "SAVINGS",
              "CURRENT",
              "CREDIT"
            ]
          },
          "customerVpa": {
            "type": "string",
            "description": "remitter's VPA",
            "example": "test-auto-tyvmm59i9b@okokaxis"
          },
          "id": {
            "type": "string",
            "description": "Id of the resource, which is the same the id returned in the Create \u003cresource\u003e API response",
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "merchantId": {
            "type": "string",
            "description": "Id associated with the merchant on our platform",
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "merchantVpa": {
            "type": "string",
            "description": "VPA used to accept payment",
            "example": "test-auto-beibfev2oq@okokaxis"
          },
          "metadata": {
            "type": "object",
            "description": "metadata",
            "example": {
              "Ad dolor unde aut.": "Qui omnis.",
              "Doloremque recusandae ducimus omnis id.": "Saepe alias dolor rem repudiandae.",
              "Expedita blanditiis velit ea a voluptatem debitis.": "Consequuntur alias harum quam ut corrupti."
            },
            "maxLength": 5,
            "additionalProperties": {
              "type": "string",
              "example": "Autem accusamus."
            }
          },
          "productInstanceId": {
            "type": "string",
            "description": "this is the deeplink / collect request / mandate id associated with the payment",
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "reason": {
            "$ref": "#/components/schemas/Reason"
          },
          "refId": {
            "type": "string",
            "description": "NPCI transaction refId",
            "example": "1240689979139556558"
          },
          "referenceId": {
            "type": "string",
            "description": "reference id in the merchant's system",
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "rrn": {
            "type": "string",
            "description": "NPCI transaction custRef",
            "example": "124068997913"
          },
          "status": {
            "type": "string",
            "description": "status defining the validity of the payment",
            "example": "initiated",
            "enum": [
              "initiated",
              "pending",
              "success",
              "failed"
            ]
          },
          "txnId": {
            "type": "string",
            "description": "NPCI transaction id",
            "example": "SETmBZkQOV0M7wyyP1V4PIFhRSzW5eSjmYI"
          },
          "txnNote": {
            "type": "string",
            "description": "note displayed to the customer at the payment page",
            "example": "testpay"
          },
          "txnTs": {
            "type": "string",
            "description": "RFC 3339 timestamp to indicate the transaction date \u0026 time",
            "example": "2024-06-17T19:17:32+05:30",
            "format": "date-time"
          }
        },
        "example": {
          "amount": 10000,
          "bin": "652922",
          "createdAt": "2024-05-17T19:17:32+05:30",
          "currency": "INR",
          "customerAccountType": "SAVINGS",
          "customerVpa": "test-auto-tyvmm59i9b@okokaxis",
          "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
          "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
          "merchantVpa": "test-auto-beibfev2oq@okokaxis",
          "metadata": {
            "Est non et.": "Fugit quo.",
            "Nihil quae tempora vel.": "Consequatur a laborum dolor.",
            "Non id illo id nisi et recusandae.": "Et sequi."
          },
          "productInstanceId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
          "reason": {
            "code": "unable-to-fulfill-request",
            "desc": "unable-to-fulfill-request",
            "mandateRevokeReason": "merchant-initiated",
            "npciErrCategory": "TD",
            "npciErrCode": "YG",
            "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
            "npciRespCode": "YG",
            "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)",
            "setuDescription": "Merchant PSP error",
            "suggestedAction": "Merchant PSP error"
          },
          "refId": "1240689979139556558",
          "referenceId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
          "rrn": "124068997913",
          "status": "initiated",
          "txnId": "SETmBZkQOV0M7wyyP1V4PIFhRSzW5eSjmYI",
          "txnNote": "testpay",
          "txnTs": "2024-06-17T19:17:32+05:30"
        },
        "required": [
          "merchantVpa",
          "customerVpa",
          "amount",
          "productInstanceId"
        ]
      },
      "FetchPaymentResponse2": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "integer",
            "description": "paise denominated value collected from the user",
            "example": 10000,
            "format": "int64"
          },
          "bin": {
            "type": "string",
            "description": "bin number",
            "example": "652922"
          },
          "createdAt": {
            "type": "string",
            "description": "RFC 3339 timestamp to indicate the creation date \u0026 time for the resource",
            "example": "2024-05-17T19:17:32+05:30",
            "format": "date-time"
          },
          "currency": {
            "type": "string",
            "description": "indicates the currency used during the transaction",
            "example": "INR"
          },
          "customerAccountType": {
            "type": "string",
            "description": "account type of the customer",
            "example": "SAVINGS",
            "enum": [
              "SAVINGS",
              "CURRENT",
              "CREDIT"
            ]
          },
          "customerVpa": {
            "type": "string",
            "description": "remitter's VPA",
            "example": "test-auto-tyvmm59i9b@okokaxis"
          },
          "id": {
            "type": "string",
            "description": "Id of the resource, which is the same the id returned in the Create \u003cresource\u003e API response",
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "merchantId": {
            "type": "string",
            "description": "Id associated with the merchant on our platform",
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "merchantVpa": {
            "type": "string",
            "description": "VPA used to accept payment",
            "example": "test-auto-beibfev2oq@okokaxis"
          },
          "metadata": {
            "type": "object",
            "description": "metadata",
            "example": {
              "Cumque dolor dolore.": "Velit sed a perferendis molestiae reprehenderit.",
              "Ducimus ex animi illo laudantium esse.": "Repellendus repellat vel quibusdam voluptatum sed aliquid.",
              "Non veritatis quia rem in dolore voluptatibus.": "Non voluptatem blanditiis error."
            },
            "maxLength": 5,
            "additionalProperties": {
              "type": "string",
              "example": "Sed eum iure et iste."
            }
          },
          "productInstanceId": {
            "type": "string",
            "description": "this is the deeplink / collect request / mandate id associated with the payment",
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "reason": {
            "$ref": "#/components/schemas/Reason"
          },
          "refId": {
            "type": "string",
            "description": "NPCI transaction refId",
            "example": "1240689979139556558"
          },
          "referenceId": {
            "type": "string",
            "description": "reference id in the merchant's system",
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "requestId": {
            "type": "string",
            "example": "cjqml1f2e5ocq2mesej0"
          },
          "rrn": {
            "type": "string",
            "description": "NPCI transaction custRef",
            "example": "124068997913"
          },
          "status": {
            "type": "string",
            "description": "status defining the validity of the payment",
            "example": "initiated",
            "enum": [
              "initiated",
              "pending",
              "success",
              "failed"
            ]
          },
          "txnId": {
            "type": "string",
            "description": "NPCI transaction id",
            "example": "SETmBZkQOV0M7wyyP1V4PIFhRSzW5eSjmYI"
          },
          "txnNote": {
            "type": "string",
            "description": "note displayed to the customer at the payment page",
            "example": "testpay"
          },
          "txnTs": {
            "type": "string",
            "description": "RFC 3339 timestamp to indicate the transaction date \u0026 time",
            "example": "2024-06-17T19:17:32+05:30",
            "format": "date-time"
          }
        },
        "description": "FetchPaymentResponse is the response type returned by the payment service",
        "example": {
          "amount": 10000,
          "bin": "652922",
          "createdAt": "2024-05-17T19:17:32+05:30",
          "currency": "INR",
          "customerAccountType": "SAVINGS",
          "customerVpa": "test-auto-tyvmm59i9b@okokaxis",
          "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
          "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
          "merchantVpa": "test-auto-beibfev2oq@okokaxis",
          "metadata": {
            "Et incidunt reiciendis.": "Necessitatibus reiciendis molestias nulla fugit et.",
            "Vitae dolore rem quos voluptatem ducimus voluptate.": "Velit impedit odio nostrum qui qui.",
            "Voluptate odit omnis velit qui et.": "Officia qui natus omnis."
          },
          "productInstanceId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
          "reason": {
            "code": "unable-to-fulfill-request",
            "desc": "unable-to-fulfill-request",
            "mandateRevokeReason": "merchant-initiated",
            "npciErrCategory": "TD",
            "npciErrCode": "YG",
            "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
            "npciRespCode": "YG",
            "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)",
            "setuDescription": "Merchant PSP error",
            "suggestedAction": "Merchant PSP error"
          },
          "refId": "1240689979139556558",
          "referenceId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
          "requestId": "cjqml1f2e5ocq2mesej0",
          "rrn": "124068997913",
          "status": "initiated",
          "txnId": "SETmBZkQOV0M7wyyP1V4PIFhRSzW5eSjmYI",
          "txnNote": "testpay",
          "txnTs": "2024-06-17T19:17:32+05:30"
        },
        "required": [
          "merchantVpa",
          "customerVpa",
          "amount",
          "productInstanceId"
        ]
      },
      "FetchSqrByIDResponse": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "integer",
            "description": "Amount (in paise) that needs to be collected from the user. If populated this value gets displayed on the payer PSP's payment page",
            "example": 10000,
            "minimum": 100
          },
          "closedAt": {
            "type": "string",
            "description": "RFC 3339 timestamp to indicate the closure date \u0026 time",
            "example": "2024-06-17T19:17:32+05:30",
            "format": "date-time"
          },
          "createdAt": {
            "type": "string",
            "description": "RFC 3339 timestamp to indicate the creation date \u0026 time for the resource",
            "example": "2024-05-17T19:17:32+05:30",
            "format": "date-time"
          },
          "currency": {
            "type": "string",
            "example": "Laborum cum doloribus et tenetur."
          },
          "expiryDate": {
            "type": "string",
            "description": "RFC 3339 timestamp to indicate the expiry date \u0026 time",
            "example": "2024-06-17T19:17:32+05:30",
            "format": "date-time"
          },
          "id": {
            "type": "string",
            "description": "Id of the resource, which is the same the id returned in the Create \u003cresource\u003e API response",
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "intentLink": {
            "type": "string",
            "description": "A UPI pay intent link built according to the spec enforced by NPCI",
            "example": "upi://pay?pa=test-auto-pgruosncak@okokaxis\u0026pn=merchant-4\u0026am=100.00\u0026tr=SU1240659756905923780\u0026tn=samplesingle0useqr\u0026cu=INR\u0026mc=1234"
          },
          "merchantId": {
            "type": "string",
            "description": "Id associated with the merchant on our platform",
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "merchantVpa": {
            "type": "string",
            "description": "UPI id of the merchant on which the payments are collected",
            "example": "fastestupi@pineaxis",
            "pattern": "^[a-z0-9.-]*@[a-zA-Z]*$"
          },
          "metadata": {
            "type": "string",
            "description": "field provided for the merchant to add additional key-value pairs",
            "example": {
              "InvoiceNumber": "INV-21-12-009"
            },
            "format": "binary"
          },
          "minAmount": {
            "type": "integer",
            "description": "Minimum amount (in paise) - on setting this value the amount field on the PSP's payment page becomes editable and the customer can pay an amount equal to or greater than the minimum amount",
            "example": 1000,
            "minimum": 100
          },
          "productConfigId": {
            "type": "string",
            "description": "id of the product config associated with the qr / payment link",
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "qrCode": {
            "type": "string",
            "description": "QR code for the generated intent link in the form of base64 encoded string",
            "example": ""
          },
          "reason": {
            "$ref": "#/components/schemas/Reason"
          },
          "refId": {
            "type": "string",
            "description": "Transaction reference id circulated by NPCI",
            "example": "1240689979139556558",
            "pattern": "^[a-zA-Z0-9]*$",
            "minLength": 1,
            "maxLength": 35
          },
          "referenceId": {
            "type": "string",
            "description": "reference id in the merchant's system",
            "example": "1240689979139556557",
            "minLength": 1,
            "maxLength": 255
          },
          "shortLink": {
            "type": "string",
            "description": "A shortened URL for the given intent link",
            "example": "upipay.setu.co/Np3KnBCM8Om0"
          },
          "status": {
            "type": "string",
            "description": "status defining the validity of the payment link",
            "example": "active",
            "enum": [
              "inactive",
              "active",
              "paid",
              "closed"
            ]
          },
          "transactionNote": {
            "type": "string",
            "description": "Transaction note displayed to the customer at the payment page",
            "example": "Payment for loan repayment"
          }
        },
        "example": {
          "amount": 10000,
          "closedAt": "2024-06-17T19:17:32+05:30",
          "createdAt": "2024-05-17T19:17:32+05:30",
          "currency": "Vel quia excepturi.",
          "expiryDate": "2024-06-17T19:17:32+05:30",
          "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
          "intentLink": "upi://pay?pa=test-auto-pgruosncak@okokaxis\u0026pn=merchant-4\u0026am=100.00\u0026tr=SU1240659756905923780\u0026tn=samplesingle0useqr\u0026cu=INR\u0026mc=1234",
          "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
          "merchantVpa": "fastestupi@pineaxis",
          "metadata": {
            "InvoiceNumber": "INV-21-12-009"
          },
          "minAmount": 1000,
          "productConfigId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
          "qrCode": "",
          "reason": {
            "code": "unable-to-fulfill-request",
            "desc": "unable-to-fulfill-request",
            "mandateRevokeReason": "merchant-initiated",
            "npciErrCategory": "TD",
            "npciErrCode": "YG",
            "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
            "npciRespCode": "YG",
            "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)",
            "setuDescription": "Merchant PSP error",
            "suggestedAction": "Merchant PSP error"
          },
          "refId": "1240689979139556558",
          "referenceId": "1240689979139556557",
          "shortLink": "upipay.setu.co/Np3KnBCM8Om0",
          "status": "active",
          "transactionNote": "Payment for loan repayment"
        }
      },
      "FetchTPVPlusResponse": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "integer",
            "description": "Amount (in paise) that needs to be collected from the user. If populated this value gets displayed on the payer PSP's payment page",
            "example": 10000,
            "minimum": 100
          },
          "bankCodes": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "Ipsa excepturi qui quibusdam cupiditate."
            },
            "description": "bank codes to be validated, first 4 characters of ifsc",
            "example": [
              "ICIC",
              "HDFC",
              "FDRL"
            ],
            "maxItems": 10
          },
          "createdAt": {
            "type": "string",
            "description": "RFC 3339 timestamp to indicate the creation date \u0026 time for the resource",
            "example": "2024-05-17T19:17:32+05:30",
            "format": "date-time"
          },
          "expireAfter": {
            "type": "integer",
            "description": "Expire after (in minutes) for the transaction",
            "example": 10,
            "format": "int64"
          },
          "id": {
            "type": "string",
            "description": "Id of the resource, which is the same the id returned in the Create \u003cresource\u003e API response",
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "intentLink": {
            "type": "string",
            "description": "upi link for the payment link",
            "example": "upi://pay?pa=test-auto-pgruosncak@okokaxis\u0026pn=merchant-4\u0026am=100.00\u0026tr=SU1240659756905923780\u0026tn=samplesingleuseqr\u0026cu=INR\u0026mc=1234"
          },
          "merchantId": {
            "type": "string",
            "description": "Id associated with the merchant on our platform",
            "example": "1240689979139556556"
          },
          "merchantVpa": {
            "type": "string",
            "description": "UPI id of the merchant on which the payments are collected",
            "example": "fastestupi@pineaxis",
            "pattern": "^[a-z0-9.-]*@[a-zA-Z]*$"
          },
          "metadata": {
            "type": "string",
            "description": "field provided for the merchant to add additional key-value pairs",
            "example": {
              "InvoiceNumber": "INV-21-12-009"
            },
            "format": "binary"
          },
          "minAmount": {
            "type": "integer",
            "description": "Minimum amount (in paise) - on setting this value the amount field on the PSP's payment page becomes editable and the customer can pay an amount equal to or greater than the minimum amount",
            "example": 1000,
            "minimum": 100
          },
          "payerApps": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "Omnis quaerat ipsam consequuntur."
            },
            "description": "payer apps to be validated",
            "example": [
              "gpay",
              "phonepe",
              "paytm",
              "amazonpay"
            ],
            "maxItems": 10
          },
          "payerVPAs": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "Provident sint assumenda."
            },
            "description": "VPAs of the payer to be validated",
            "example": [
              "aadhitya@okhdfc",
              "ram@okaxis"
            ],
            "maxItems": 10
          },
          "paymentDetails": {
            "$ref": "#/components/schemas/PaymentDetails"
          },
          "qrCode": {
            "type": "string",
            "description": "QR code for the payment link",
            "example": ""
          },
          "reason": {
            "$ref": "#/components/schemas/Reason"
          },
          "refId": {
            "type": "string",
            "description": "NPCI transaction refId",
            "example": "1240689979139556558",
            "pattern": "^[a-zA-Z0-9]*$",
            "minLength": 1,
            "maxLength": 35
          },
          "referenceId": {
            "type": "string",
            "description": "Reference id provided by the merchant",
            "example": "1240689979139556556"
          },
          "requestId": {
            "type": "string",
            "example": "cjqml1f2e5ocq2mesej0"
          },
          "shortLink": {
            "type": "string",
            "description": "short link for the payment link",
            "example": "upipay.setu.co/Np3KnBCM8Om0"
          },
          "status": {
            "type": "string",
            "description": "status defining the validity of the payment",
            "example": "active",
            "enum": [
              "paid",
              "closed",
              "active"
            ]
          },
          "transactionNote": {
            "type": "string",
            "description": "transaction note for the transaction",
            "example": "test transaction",
            "pattern": "^[^(){}\\[\\]\u003c\u003e]*$",
            "maxLength": 50
          }
        },
        "example": {
          "amount": 10000,
          "bankCodes": [
            "ICIC",
            "HDFC",
            "FDRL"
          ],
          "createdAt": "2024-05-17T19:17:32+05:30",
          "expireAfter": 10,
          "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
          "intentLink": "upi://pay?pa=test-auto-pgruosncak@okokaxis\u0026pn=merchant-4\u0026am=100.00\u0026tr=SU1240659756905923780\u0026tn=samplesingleuseqr\u0026cu=INR\u0026mc=1234",
          "merchantId": "1240689979139556556",
          "merchantVpa": "fastestupi@pineaxis",
          "metadata": {
            "InvoiceNumber": "INV-21-12-009"
          },
          "minAmount": 1000,
          "payerApps": [
            "gpay",
            "phonepe",
            "paytm",
            "amazonpay"
          ],
          "payerVPAs": [
            "aadhitya@okhdfc",
            "ram@okaxis"
          ],
          "paymentDetails": {
            "customerAccountType": "SAVINGS",
            "customerVpa": "test-auto-tyvmm59i9b@okokaxis",
            "paymentId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
            "paymentStatus": "initiated",
            "rrn": "124068997913",
            "txnId": "SETmBZkQOV0M7wyyP1V4PIFhRSzW5eSjmYI",
            "txnTs": "2024-06-17T19:17:32+05:30"
          },
          "qrCode": "",
          "reason": {
            "code": "unable-to-fulfill-request",
            "desc": "unable-to-fulfill-request",
            "mandateRevokeReason": "merchant-initiated",
            "npciErrCategory": "TD",
            "npciErrCode": "YG",
            "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
            "npciRespCode": "YG",
            "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)",
            "setuDescription": "Merchant PSP error",
            "suggestedAction": "Merchant PSP error"
          },
          "refId": "1240689979139556558",
          "referenceId": "1240689979139556556",
          "requestId": "cjqml1f2e5ocq2mesej0",
          "shortLink": "upipay.setu.co/Np3KnBCM8Om0",
          "status": "active",
          "transactionNote": "test transaction"
        }
      },
      "FetchTPVResponse": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "integer",
            "description": "Amount (in paise) that needs to be collected from the user. If populated this value gets displayed on the payer PSP's payment page",
            "example": 10000,
            "minimum": 100
          },
          "closedAt": {
            "type": "string",
            "example": "Minus earum accusantium impedit."
          },
          "createdAt": {
            "type": "string",
            "description": "RFC 3339 timestamp to indicate the creation date \u0026 time for the resource",
            "example": "2024-05-17T19:17:32+05:30",
            "format": "date-time"
          },
          "expireAfter": {
            "type": "integer",
            "description": "Expire after (in minutes) for the transaction",
            "example": 10,
            "format": "int64"
          },
          "id": {
            "type": "string",
            "description": "id associated with the tpv",
            "example": "1240689979139556556"
          },
          "ifscMatchType": {
            "type": "string",
            "example": "Quidem beatae."
          },
          "intentLink": {
            "type": "string",
            "description": "upi link for the payment link",
            "example": "upi://pay?pa=test-auto-pgruosncak@okokaxis\u0026pn=merchant-4\u0026am=100.00\u0026tr=SU1240659756905923780\u0026tn=sample%20single%20use%20qr\u0026cu=INR\u0026mc=1234"
          },
          "merchantId": {
            "type": "string",
            "description": "Id associated with the merchant on our platform",
            "example": "1240689979139556556"
          },
          "merchantVpa": {
            "type": "string",
            "description": "UPI id of the merchant on which the payments are collected",
            "example": "fastestupi@pineaxis",
            "pattern": "^[a-z0-9.-]*@[a-zA-Z]*$"
          },
          "metadata": {
            "type": "string",
            "description": "field provided for the merchant to add additional key-value pairs",
            "example": {
              "InvoiceNumber": "INV-21-12-009"
            },
            "format": "binary"
          },
          "minAmount": {
            "type": "integer",
            "description": "Minimum amount (in paise) - on setting this value the amount field on the PSP's payment page becomes editable and the customer can pay an amount equal to or greater than the minimum amount",
            "example": 1000,
            "minimum": 100
          },
          "paymentDetails": {
            "$ref": "#/components/schemas/PaymentDetails"
          },
          "primaryAccount": {
            "$ref": "#/components/schemas/TPVAccountDetailResponse"
          },
          "qrCode": {
            "type": "string",
            "description": "QR code for the payment link",
            "example": ""
          },
          "reason": {
            "$ref": "#/components/schemas/Reason"
          },
          "refId": {
            "type": "string",
            "description": "NPCI transaction refId",
            "example": "1240689979139556558",
            "pattern": "^[a-zA-Z0-9]*$",
            "minLength": 1,
            "maxLength": 35
          },
          "referenceId": {
            "type": "string",
            "description": "Reference id provided by the merchant",
            "example": "1240689979139556556"
          },
          "requestId": {
            "type": "string",
            "example": "cjqml1f2e5ocq2mesej0"
          },
          "secondaryAccounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TPVAccountDetailResponse"
            },
            "description": "secondary accounts for the tpv transaction",
            "example": [
              {
                "IFSC": "SBIN0000001",
                "encryptedAccountName": "5e884898da28047151d0e56f8dc629277",
                "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                "hashedAccountName": "5e884898da28047151d0e56f8dc629277",
                "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                "maskedAccountName": "R*M*E*S*",
                "maskedAccountNumber": "**** **** **** 7890"
              },
              {
                "IFSC": "SBIN0000001",
                "encryptedAccountName": "5e884898da28047151d0e56f8dc629277",
                "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                "hashedAccountName": "5e884898da28047151d0e56f8dc629277",
                "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                "maskedAccountName": "R*M*E*S*",
                "maskedAccountNumber": "**** **** **** 7890"
              },
              {
                "IFSC": "SBIN0000001",
                "encryptedAccountName": "5e884898da28047151d0e56f8dc629277",
                "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                "hashedAccountName": "5e884898da28047151d0e56f8dc629277",
                "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                "maskedAccountName": "R*M*E*S*",
                "maskedAccountNumber": "**** **** **** 7890"
              }
            ]
          },
          "shortLink": {
            "type": "string",
            "description": "short link for the payment link",
            "example": "upipay.setu.co/Np3KnBCM8Om0"
          },
          "status": {
            "type": "string",
            "description": "status defining the validity of the payment",
            "example": "active",
            "enum": [
              "paid",
              "closed",
              "active"
            ]
          },
          "transactionNote": {
            "type": "string",
            "description": "transaction note for the transaction",
            "example": "test transaction"
          }
        },
        "example": {
          "amount": 10000,
          "closedAt": "Quod accusamus.",
          "createdAt": "2024-05-17T19:17:32+05:30",
          "expireAfter": 10,
          "id": "1240689979139556556",
          "ifscMatchType": "Cupiditate sapiente.",
          "intentLink": "upi://pay?pa=test-auto-pgruosncak@okokaxis\u0026pn=merchant-4\u0026am=100.00\u0026tr=SU1240659756905923780\u0026tn=sample%20single%20use%20qr\u0026cu=INR\u0026mc=1234",
          "merchantId": "1240689979139556556",
          "merchantVpa": "fastestupi@pineaxis",
          "metadata": {
            "InvoiceNumber": "INV-21-12-009"
          },
          "minAmount": 1000,
          "paymentDetails": {
            "customerAccountType": "SAVINGS",
            "customerVpa": "test-auto-tyvmm59i9b@okokaxis",
            "paymentId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
            "paymentStatus": "initiated",
            "rrn": "124068997913",
            "txnId": "SETmBZkQOV0M7wyyP1V4PIFhRSzW5eSjmYI",
            "txnTs": "2024-06-17T19:17:32+05:30"
          },
          "primaryAccount": {
            "IFSC": "SBIN0000001",
            "encryptedAccountName": "5e884898da28047151d0e56f8dc629277",
            "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
            "hashedAccountName": "5e884898da28047151d0e56f8dc629277",
            "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
            "maskedAccountName": "R*M*E*S*",
            "maskedAccountNumber": "**** **** **** 7890"
          },
          "qrCode": "",
          "reason": {
            "code": "unable-to-fulfill-request",
            "desc": "unable-to-fulfill-request",
            "mandateRevokeReason": "merchant-initiated",
            "npciErrCategory": "TD",
            "npciErrCode": "YG",
            "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
            "npciRespCode": "YG",
            "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)",
            "setuDescription": "Merchant PSP error",
            "suggestedAction": "Merchant PSP error"
          },
          "refId": "1240689979139556558",
          "referenceId": "1240689979139556556",
          "requestId": "cjqml1f2e5ocq2mesej0",
          "secondaryAccounts": [
            {
              "IFSC": "SBIN0000001",
              "encryptedAccountName": "5e884898da28047151d0e56f8dc629277",
              "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
              "hashedAccountName": "5e884898da28047151d0e56f8dc629277",
              "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
              "maskedAccountName": "R*M*E*S*",
              "maskedAccountNumber": "**** **** **** 7890"
            },
            {
              "IFSC": "SBIN0000001",
              "encryptedAccountName": "5e884898da28047151d0e56f8dc629277",
              "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
              "hashedAccountName": "5e884898da28047151d0e56f8dc629277",
              "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
              "maskedAccountName": "R*M*E*S*",
              "maskedAccountNumber": "**** **** **** 7890"
            }
          ],
          "shortLink": "upipay.setu.co/Np3KnBCM8Om0",
          "status": "active",
          "transactionNote": "test transaction"
        }
      },
      "GetRefundbyIDResponse": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "integer",
            "description": "Amount to be refunded back to the customer",
            "example": 10000,
            "format": "int64"
          },
          "createdAt": {
            "type": "string",
            "description": "RFC 3339 timestamp to indicate the creation date \u0026 time for the resource",
            "example": "2024-05-17T19:17:32+05:30",
            "format": "date-time"
          },
          "crn": {
            "type": "string",
            "description": "Refund CRN",
            "example": "UPI123456789"
          },
          "id": {
            "type": "string",
            "description": "Id of the resource, which is the same the id returned in the Create \u003cresource\u003e API response",
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "paymentId": {
            "type": "string",
            "description": "Setu payment id on which merchant wants to raise a refund",
            "example": "01HKSEWQ509Z56CVQNQ2XHGJZ1"
          },
          "reason": {
            "$ref": "#/components/schemas/RefundReason"
          },
          "referenceId": {
            "type": "string",
            "description": "Unique identifier merchant wants to pass to reconcile refunds at their end",
            "example": "BILL12345"
          },
          "remarks": {
            "type": "string",
            "description": "Remarks on why the refund is being initiated",
            "example": "Services not rendered"
          },
          "requestId": {
            "type": "string",
            "example": "cjqml1f2e5ocq2mesej0"
          },
          "status": {
            "type": "string",
            "description": "Status of the refund request",
            "example": "success",
            "enum": [
              "pending",
              "initiated",
              "success",
              "failed"
            ]
          },
          "type": {
            "type": "string",
            "description": "type describes how the refund is confirmed",
            "example": "online"
          }
        },
        "example": {
          "amount": 10000,
          "createdAt": "2024-05-17T19:17:32+05:30",
          "crn": "UPI123456789",
          "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
          "paymentId": "01HKSEWQ509Z56CVQNQ2XHGJZ1",
          "reason": {
            "adjCode": "501",
            "adjFlag": "RRC",
            "errCode": "refund-disabled",
            "npciErrCode": "R21",
            "npciErrDesc": "ONLINE REFUND IS DISABLED IN UPI"
          },
          "referenceId": "BILL12345",
          "remarks": "Services not rendered",
          "requestId": "cjqml1f2e5ocq2mesej0",
          "status": "success",
          "type": "online"
        }
      },
      "GetRefundsByPaymentTxnIDResponse": {
        "type": "object",
        "properties": {
          "paymentTxnId": {
            "type": "string",
            "example": "Sit modi velit voluptatum rerum tenetur autem."
          },
          "refunds": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetRefundbyIDResponse"
            },
            "example": [
              {
                "amount": 10000,
                "createdAt": "2024-05-17T19:17:32+05:30",
                "crn": "UPI123456789",
                "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                "paymentId": "01HKSEWQ509Z56CVQNQ2XHGJZ1",
                "reason": {
                  "adjCode": "501",
                  "adjFlag": "RRC",
                  "errCode": "refund-disabled",
                  "npciErrCode": "R21",
                  "npciErrDesc": "ONLINE REFUND IS DISABLED IN UPI"
                },
                "referenceId": "BILL12345",
                "remarks": "Services not rendered",
                "requestId": "cjqml1f2e5ocq2mesej0",
                "status": "success",
                "type": "online"
              },
              {
                "amount": 10000,
                "createdAt": "2024-05-17T19:17:32+05:30",
                "crn": "UPI123456789",
                "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                "paymentId": "01HKSEWQ509Z56CVQNQ2XHGJZ1",
                "reason": {
                  "adjCode": "501",
                  "adjFlag": "RRC",
                  "errCode": "refund-disabled",
                  "npciErrCode": "R21",
                  "npciErrDesc": "ONLINE REFUND IS DISABLED IN UPI"
                },
                "referenceId": "BILL12345",
                "remarks": "Services not rendered",
                "requestId": "cjqml1f2e5ocq2mesej0",
                "status": "success",
                "type": "online"
              }
            ]
          }
        },
        "example": {
          "paymentTxnId": "Voluptates dolore et ut libero fugiat.",
          "refunds": [
            {
              "amount": 10000,
              "createdAt": "2024-05-17T19:17:32+05:30",
              "crn": "UPI123456789",
              "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
              "paymentId": "01HKSEWQ509Z56CVQNQ2XHGJZ1",
              "reason": {
                "adjCode": "501",
                "adjFlag": "RRC",
                "errCode": "refund-disabled",
                "npciErrCode": "R21",
                "npciErrDesc": "ONLINE REFUND IS DISABLED IN UPI"
              },
              "referenceId": "BILL12345",
              "remarks": "Services not rendered",
              "requestId": "cjqml1f2e5ocq2mesej0",
              "status": "success",
              "type": "online"
            },
            {
              "amount": 10000,
              "createdAt": "2024-05-17T19:17:32+05:30",
              "crn": "UPI123456789",
              "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
              "paymentId": "01HKSEWQ509Z56CVQNQ2XHGJZ1",
              "reason": {
                "adjCode": "501",
                "adjFlag": "RRC",
                "errCode": "refund-disabled",
                "npciErrCode": "R21",
                "npciErrDesc": "ONLINE REFUND IS DISABLED IN UPI"
              },
              "referenceId": "BILL12345",
              "remarks": "Services not rendered",
              "requestId": "cjqml1f2e5ocq2mesej0",
              "status": "success",
              "type": "online"
            },
            {
              "amount": 10000,
              "createdAt": "2024-05-17T19:17:32+05:30",
              "crn": "UPI123456789",
              "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
              "paymentId": "01HKSEWQ509Z56CVQNQ2XHGJZ1",
              "reason": {
                "adjCode": "501",
                "adjFlag": "RRC",
                "errCode": "refund-disabled",
                "npciErrCode": "R21",
                "npciErrDesc": "ONLINE REFUND IS DISABLED IN UPI"
              },
              "referenceId": "BILL12345",
              "remarks": "Services not rendered",
              "requestId": "cjqml1f2e5ocq2mesej0",
              "status": "success",
              "type": "online"
            },
            {
              "amount": 10000,
              "createdAt": "2024-05-17T19:17:32+05:30",
              "crn": "UPI123456789",
              "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
              "paymentId": "01HKSEWQ509Z56CVQNQ2XHGJZ1",
              "reason": {
                "adjCode": "501",
                "adjFlag": "RRC",
                "errCode": "refund-disabled",
                "npciErrCode": "R21",
                "npciErrDesc": "ONLINE REFUND IS DISABLED IN UPI"
              },
              "referenceId": "BILL12345",
              "remarks": "Services not rendered",
              "requestId": "cjqml1f2e5ocq2mesej0",
              "status": "success",
              "type": "online"
            }
          ]
        },
        "required": [
          "refunds"
        ]
      },
      "ListBeneficiaryAccountResponse": {
        "type": "object",
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/PaginationResponse"
          },
          "settlementAccounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BeneficiaryAccountResponse"
            },
            "description": "list of settlement bank accounts",
            "example": [
              {
                "accountHolderName": "deku",
                "accountNumber": "1234567890",
                "accountType": "CURRENT",
                "beneCode": "1234567890",
                "checkedRegistrationStatusAt": "2024-05-17T19:17:32+05:30",
                "createdAt": "2024-05-17T19:17:32+05:30",
                "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                "ifsc": "HDFC0000001",
                "isActive": true,
                "isVerified": true,
                "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                "paymentMode": "NEFT",
                "registrationFailureReason": {
                  "code": "16",
                  "desc": "Invalid account ifsc code"
                },
                "registrationStatus": "not_initiated"
              },
              {
                "accountHolderName": "deku",
                "accountNumber": "1234567890",
                "accountType": "CURRENT",
                "beneCode": "1234567890",
                "checkedRegistrationStatusAt": "2024-05-17T19:17:32+05:30",
                "createdAt": "2024-05-17T19:17:32+05:30",
                "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                "ifsc": "HDFC0000001",
                "isActive": true,
                "isVerified": true,
                "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                "paymentMode": "NEFT",
                "registrationFailureReason": {
                  "code": "16",
                  "desc": "Invalid account ifsc code"
                },
                "registrationStatus": "not_initiated"
              }
            ]
          }
        },
        "example": {
          "meta": {
            "cursor": {
              "current": "MDFBUlozTkRFS1RTVjRSUkZGUTY5RzVGQVY=",
              "next": "MDFBUlozTkRFS1RTVjRSUkZGUTY5RzVGQVY=",
              "previous": "MDFBUlozTkRFS1RTVjRSUkZGUTY5RzVGQVY="
            },
            "filter": [
              "name:foo"
            ],
            "limit": 10,
            "totalRecords": 2142477528
          },
          "settlementAccounts": [
            {
              "accountHolderName": "deku",
              "accountNumber": "1234567890",
              "accountType": "CURRENT",
              "beneCode": "1234567890",
              "checkedRegistrationStatusAt": "2024-05-17T19:17:32+05:30",
              "createdAt": "2024-05-17T19:17:32+05:30",
              "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
              "ifsc": "HDFC0000001",
              "isActive": true,
              "isVerified": true,
              "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
              "paymentMode": "NEFT",
              "registrationFailureReason": {
                "code": "16",
                "desc": "Invalid account ifsc code"
              },
              "registrationStatus": "not_initiated"
            },
            {
              "accountHolderName": "deku",
              "accountNumber": "1234567890",
              "accountType": "CURRENT",
              "beneCode": "1234567890",
              "checkedRegistrationStatusAt": "2024-05-17T19:17:32+05:30",
              "createdAt": "2024-05-17T19:17:32+05:30",
              "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
              "ifsc": "HDFC0000001",
              "isActive": true,
              "isVerified": true,
              "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
              "paymentMode": "NEFT",
              "registrationFailureReason": {
                "code": "16",
                "desc": "Invalid account ifsc code"
              },
              "registrationStatus": "not_initiated"
            },
            {
              "accountHolderName": "deku",
              "accountNumber": "1234567890",
              "accountType": "CURRENT",
              "beneCode": "1234567890",
              "checkedRegistrationStatusAt": "2024-05-17T19:17:32+05:30",
              "createdAt": "2024-05-17T19:17:32+05:30",
              "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
              "ifsc": "HDFC0000001",
              "isActive": true,
              "isVerified": true,
              "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
              "paymentMode": "NEFT",
              "registrationFailureReason": {
                "code": "16",
                "desc": "Invalid account ifsc code"
              },
              "registrationStatus": "not_initiated"
            }
          ]
        }
      },
      "MandateDetails": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "integer",
            "description": "Amount(in paise) of the mandate",
            "example": 1000,
            "minimum": 100,
            "maximum": 20000000
          },
          "customerRevocable": {
            "type": "boolean",
            "example": true
          },
          "customerVpa": {
            "type": "string",
            "description": "UPI id of the customer from which payments are made",
            "example": "ram@axis",
            "pattern": "^[a-zA-Z0-9.-]*@[a-zA-Z0-9.-]*$"
          },
          "endDate": {
            "type": "string",
            "description": "End date of the mandate (ddmmyyyy)",
            "example": "02012008"
          },
          "frequency": {
            "type": "string",
            "description": "Frequency of the mandate",
            "example": "monthly",
            "enum": [
              "one time",
              "weekly",
              "daily",
              "fortnightly",
              "monthly",
              "bi monthly",
              "quarterly",
              "half yearly",
              "yearly",
              "as presented"
            ]
          },
          "mandateLiveAt": {
            "type": "string",
            "description": "ISO 8601 timestamp to indicate when the mandate transitioned to live state",
            "example": "2023-09-04 12:08:20.202644 +0530 IST",
            "format": "date-time"
          },
          "reason": {
            "$ref": "#/components/schemas/Reason"
          },
          "startDate": {
            "type": "string",
            "description": "Start date of the mandate (ddmmyyyy)",
            "example": "02012006"
          },
          "status": {
            "type": "string",
            "description": "Status of the mandate",
            "example": "pending",
            "enum": [
              "pending",
              "live",
              "paused",
              "revoked",
              "rejected",
              "completed"
            ]
          },
          "txnId": {
            "type": "string",
            "description": "NPCI transaction id",
            "example": "BTTZrc5gDFkuCr3n3I0ey4aNtzLOLR7K7aR",
            "pattern": "^[a-zA-Z0-9]*$",
            "minLength": 35,
            "maxLength": 35
          },
          "umn": {
            "type": "string",
            "description": "Unique mandate number",
            "example": "c27f5fc30d344e9594fce0afa34f8859@mypsp"
          }
        },
        "description": "Response for mandate details",
        "example": {
          "amount": 1000,
          "customerRevocable": true,
          "customerVpa": "ram@axis",
          "endDate": "02012008",
          "frequency": "monthly",
          "mandateLiveAt": "2023-09-04 12:08:20.202644 +0530 IST",
          "reason": {
            "code": "unable-to-fulfill-request",
            "desc": "unable-to-fulfill-request",
            "mandateRevokeReason": "merchant-initiated",
            "npciErrCategory": "TD",
            "npciErrCode": "YG",
            "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
            "npciRespCode": "YG",
            "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)",
            "setuDescription": "Merchant PSP error",
            "suggestedAction": "Merchant PSP error"
          },
          "startDate": "02012006",
          "status": "pending",
          "txnId": "BTTZrc5gDFkuCr3n3I0ey4aNtzLOLR7K7aR",
          "umn": "c27f5fc30d344e9594fce0afa34f8859@mypsp"
        }
      },
      "MandateExecutionResponse": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "integer",
            "description": "Amount of the mandate",
            "example": 1000,
            "minimum": 100,
            "maximum": 20000000
          },
          "createdAt": {
            "type": "string",
            "description": "RFC 3339 timestamp to indicate the creation date \u0026 time for the resource",
            "example": "2024-05-17T19:17:32+05:30",
            "format": "date-time"
          },
          "id": {
            "type": "string",
            "description": "Id of the resource, which is the same the id returned in the Create \u003cresource\u003e API response",
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "mandateId": {
            "type": "string",
            "description": "Id of the mandate that needs to be executed",
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "merchantId": {
            "type": "string",
            "description": "Id of the merchant who created the mandate",
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "referenceId": {
            "type": "string",
            "description": "Merchant reference id of the mandate",
            "example": "ABC1234789",
            "minLength": 5,
            "maxLength": 50
          },
          "remark": {
            "type": "string",
            "description": "Remark for the mandate transaction",
            "example": "Transaction for car loan emi"
          },
          "sequenceNumber": {
            "type": "integer",
            "description": "Sequence number of the mandate",
            "example": 1,
            "format": "int64"
          },
          "status": {
            "type": "string",
            "description": "Status of the mandate execution request",
            "example": "live",
            "enum": [
              "pending",
              "initiated",
              "success",
              "failed"
            ]
          },
          "txnId": {
            "type": "string",
            "description": "NPCI transaction id",
            "example": "BTTZrc5gDFkuCr3n3I0ey4aNtzLOLR7K7aR",
            "pattern": "^[a-zA-Z0-9]*$",
            "minLength": 35,
            "maxLength": 35
          },
          "umn": {
            "type": "string",
            "description": "Unique mandate number",
            "example": "c27f5fc30d344e9594fce0afa34f8859@mypsp"
          }
        },
        "example": {
          "amount": 1000,
          "createdAt": "2024-05-17T19:17:32+05:30",
          "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
          "mandateId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
          "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
          "referenceId": "ABC1234789",
          "remark": "Transaction for car loan emi",
          "sequenceNumber": 1,
          "status": "live",
          "txnId": "BTTZrc5gDFkuCr3n3I0ey4aNtzLOLR7K7aR",
          "umn": "c27f5fc30d344e9594fce0afa34f8859@mypsp"
        }
      },
      "MandatePreDebitNotificationResponse": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "integer",
            "description": "Amount of the mandate",
            "example": 1000,
            "minimum": 100,
            "maximum": 20000000
          },
          "createdAt": {
            "type": "string",
            "description": "RFC 3339 timestamp to indicate the creation date \u0026 time for the resource",
            "example": "2024-05-17T19:17:32+05:30",
            "format": "date-time"
          },
          "executionDate": {
            "type": "string",
            "description": "Execution date of the mandate",
            "example": "02012006"
          },
          "id": {
            "type": "string",
            "description": "Id of the resource, which is the same the id returned in the Create \u003cresource\u003e API response",
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "mandateId": {
            "type": "string",
            "description": "Id of the mandate that needs to be notified",
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "merchantId": {
            "type": "string",
            "description": "Id of the merchant who created the mandate",
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "referenceId": {
            "type": "string",
            "description": "Merchant reference id of the mandate",
            "example": "ABC1234789",
            "minLength": 5,
            "maxLength": 50
          },
          "sequenceNumber": {
            "type": "integer",
            "description": "Sequence number of the mandate",
            "example": 1,
            "format": "int64"
          },
          "status": {
            "type": "string",
            "description": "Status of the pre debit notification request",
            "example": "success",
            "enum": [
              "pending",
              "initiated",
              "success",
              "failed"
            ]
          },
          "txnId": {
            "type": "string",
            "description": "NPCI transaction id",
            "example": "BTTZrc5gDFkuCr3n3I0ey4aNtzLOLR7K7aR",
            "pattern": "^[a-zA-Z0-9]*$",
            "minLength": 35,
            "maxLength": 35
          },
          "umn": {
            "type": "string",
            "description": "Unique mandate number",
            "example": "c27f5fc30d344e9594fce0afa34f8859@mypsp"
          }
        },
        "example": {
          "amount": 1000,
          "createdAt": "2024-05-17T19:17:32+05:30",
          "executionDate": "02012006",
          "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
          "mandateId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
          "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
          "referenceId": "ABC1234789",
          "sequenceNumber": 1,
          "status": "success",
          "txnId": "BTTZrc5gDFkuCr3n3I0ey4aNtzLOLR7K7aR",
          "umn": "c27f5fc30d344e9594fce0afa34f8859@mypsp"
        }
      },
      "MerchantResponse": {
        "type": "object",
        "properties": {
          "acceptDeemedTxns": {
            "type": "boolean",
            "description": "Indicates whether deemed txns are to be accepted or not for the Merchant",
            "example": true
          },
          "addressProviderId": {
            "type": "string",
            "description": "Id of the Address Provider associated with the Merchant",
            "example": "1237800298651584417"
          },
          "businessName": {
            "type": "string",
            "description": "Brand name or Consumer facing name",
            "example": "Setu",
            "pattern": "^[a-zA-Z0-9 ]+$",
            "minLength": 1,
            "maxLength": 99
          },
          "businessType": {
            "type": "string",
            "description": "Incorporation type",
            "example": "PROPRIETARY",
            "enum": [
              "PROPRIETARY",
              "PARTNERSHIP",
              "PRIVATE",
              "PUBLIC",
              "OTHERS"
            ]
          },
          "createdAt": {
            "type": "string",
            "description": "RFC 3339 timestamp to indicate the creation date \u0026 time for the resource",
            "example": "2024-05-17T19:17:32+05:30",
            "format": "date-time"
          },
          "documentStatus": {
            "type": "string",
            "description": "Current Status of the Merchant Controlled by Admin / Onboarding Team",
            "example": "APPROVED",
            "enum": [
              "PENDING",
              "SUBMITTED",
              "APPROVED",
              "REJECTED"
            ]
          },
          "franchiseName": {
            "type": "string",
            "description": "Franchise name",
            "example": "Setu UPI",
            "pattern": "^[a-zA-Z0-9 ]+$"
          },
          "genre": {
            "type": "string",
            "description": "Online / Offline",
            "example": "ONLINE",
            "enum": [
              "ONLINE",
              "OFFLINE"
            ]
          },
          "id": {
            "type": "string",
            "description": "Id of the resource, which is the same the id returned in the Create \u003cresource\u003e API response",
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "legalName": {
            "type": "string",
            "description": "Legal name as per incorporation documents",
            "example": "BrokenTusk Technologies Pvt Ltd",
            "pattern": "^[a-zA-Z0-9 ]+$",
            "minLength": 1,
            "maxLength": 99
          },
          "mcc": {
            "type": "string",
            "description": "Category of business operation",
            "example": "5432"
          },
          "merchantName": {
            "type": "string",
            "example": "Assumenda illum sint est ut natus."
          },
          "merchantType": {
            "type": "string",
            "description": "merchant type",
            "example": "large",
            "enum": [
              "small",
              "large"
            ]
          },
          "onboardingType": {
            "type": "string",
            "description": "onboarding type",
            "default": "aggregator",
            "example": "aggregator",
            "enum": [
              "bank",
              "aggregator"
            ]
          },
          "paymentAggregatorId": {
            "type": "string",
            "example": "Nesciunt temporibus et in."
          },
          "paymentModes": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "lite",
              "enum": [
                "saving",
                "default",
                "lite",
                "erupi",
                "rupay_cc",
                "ppi",
                "bankwallet",
                "current",
                "nro",
                "nre",
                "sod",
                "uod"
              ]
            },
            "description": "payment modes allowed for merchants",
            "example": [
              "saving",
              "lite",
              "erupi",
              "rupay_cc",
              "ppi",
              "current",
              "nro",
              "nre"
            ]
          },
          "productAccountId": {
            "type": "string",
            "example": "Voluptatum officiis."
          },
          "products": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "reserve",
              "enum": [
                "pay_single",
                "pay_multi",
                "offline_qr",
                "collect",
                "autopay",
                "recur_tpv",
                "pay_single_tpv",
                "pay_single_tpv_plus",
                "single_block_multi_debit",
                "reserve",
                "single_block_multi_debit_tpv",
                "reserve_tpv"
              ]
            },
            "description": "products allowed for merchants",
            "example": [
              "pay_single",
              "pay_multi",
              "tpv",
              "tpv_plus",
              "intent_autopay"
            ]
          },
          "route": {
            "$ref": "#/components/schemas/RouteConfiguration"
          },
          "settlement": {
            "$ref": "#/components/schemas/SettlementConfigurationObj"
          },
          "settlementTransfers": {
            "type": "string",
            "example": "Ipsam enim autem libero nemo."
          },
          "standardAccountId": {
            "type": "string",
            "example": "Omnis omnis inventore autem eveniet."
          },
          "transactionStatus": {
            "type": "string",
            "description": "Current Transaction Status of the Merchant",
            "example": "active",
            "enum": [
              "active",
              "inactive",
              "test",
              "live_high_risk",
              "blocked"
            ]
          },
          "vpaHandles": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "Fuga velit voluptatibus voluptatem explicabo."
            },
            "description": "handles merchant supports",
            "example": [
              "pineaxis"
            ]
          },
          "vpaPrefix": {
            "type": "string",
            "description": "VPA prefix according to which the VPA needs to be registered",
            "example": "acmecorp.*"
          }
        },
        "example": {
          "acceptDeemedTxns": true,
          "addressProviderId": "1237800298651584417",
          "businessName": "Setu",
          "businessType": "PROPRIETARY",
          "createdAt": "2024-05-17T19:17:32+05:30",
          "documentStatus": "APPROVED",
          "franchiseName": "Setu UPI",
          "genre": "ONLINE",
          "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
          "legalName": "BrokenTusk Technologies Pvt Ltd",
          "mcc": "5432",
          "merchantName": "Sint quidem et rerum aut.",
          "merchantType": "large",
          "onboardingType": "aggregator",
          "paymentAggregatorId": "Ea ut nihil vitae aut numquam.",
          "paymentModes": [
            "saving",
            "lite",
            "erupi",
            "rupay_cc",
            "ppi",
            "current",
            "nro",
            "nre"
          ],
          "productAccountId": "Id ad fuga sed quidem doloremque.",
          "products": [
            "pay_single",
            "pay_multi",
            "tpv",
            "tpv_plus",
            "intent_autopay"
          ],
          "route": {
            "chargeTransfer": [
              {
                "accountIfsc": "Consequatur officia.",
                "accountNumber": "Asperiores qui.",
                "remarks": "Nihil est doloremque et voluptatem quas.",
                "value": 0.5209121384380389
              },
              {
                "accountIfsc": "Consequatur officia.",
                "accountNumber": "Asperiores qui.",
                "remarks": "Nihil est doloremque et voluptatem quas.",
                "value": 0.5209121384380389
              }
            ],
            "chargeTransferType": "Percentage",
            "ownerId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
            "ownerType": "merchant",
            "transferType": "Percentage",
            "transfers": [
              {
                "accountIfsc": "Suscipit cumque iste molestiae cumque.",
                "accountNumber": "Officiis et explicabo voluptatem nesciunt.",
                "remarks": "Veniam sit inventore modi modi qui.",
                "value": 0.03737973982778193
              },
              {
                "accountIfsc": "Suscipit cumque iste molestiae cumque.",
                "accountNumber": "Officiis et explicabo voluptatem nesciunt.",
                "remarks": "Veniam sit inventore modi modi qui.",
                "value": 0.03737973982778193
              },
              {
                "accountIfsc": "Suscipit cumque iste molestiae cumque.",
                "accountNumber": "Officiis et explicabo voluptatem nesciunt.",
                "remarks": "Veniam sit inventore modi modi qui.",
                "value": 0.03737973982778193
              }
            ]
          },
          "settlement": {
            "cycles": [
              "Ea modi.",
              "Nihil dolor exercitationem dolorem aut.",
              "Amet maxime dolor labore eum."
            ],
            "frequency": "TPlusOne",
            "isEnabled": true,
            "onhold": true,
            "payoutAdjustable": true,
            "reconRequired": false,
            "type": "Gross",
            "types": [
              "Gross",
              "Net",
              "Direct"
            ]
          },
          "settlementTransfers": "Nesciunt dignissimos alias esse sunt.",
          "standardAccountId": "Sint accusantium vel dolor.",
          "transactionStatus": "active",
          "vpaHandles": [
            "pineaxis"
          ],
          "vpaPrefix": "acmecorp.*"
        }
      },
      "MockMandateRequestBody": {
        "type": "object",
        "properties": {
          "failureType": {
            "type": "string",
            "description": "Type of failure (optional/hidden)",
            "example": "type-1"
          },
          "id": {
            "type": "string",
            "description": "mandate / operation ID",
            "example": "01J54G9QCFW4FE6JXKJ9QK3FTD"
          },
          "mandateId": {
            "type": "string",
            "description": "mandate ID",
            "example": "01J54G9QCFW4FE6JXKJ9QK3FTD"
          },
          "operation": {
            "type": "string",
            "description": "Operation type",
            "example": "create"
          },
          "payerAccountName": {
            "type": "string",
            "description": "Payer account name received from NPCI",
            "example": "Unde saepe dicta fuga ducimus consectetur nesciunt."
          },
          "payerAccountNo": {
            "type": "string",
            "description": "Payer account number received from NPCI",
            "example": "Tempora error vel."
          },
          "payerIfsc": {
            "type": "string",
            "description": "Payer IFSC received from NPCI",
            "example": "Nisi quibusdam omnis alias maiores."
          },
          "payerRespCode": {
            "type": "string",
            "description": "Payer respCode received from NPCI (in case of failure)",
            "example": "Repellendus odit consequatur quia et et aperiam."
          },
          "seqNumber": {
            "type": "integer",
            "description": "Sequence number of the execution / notification to mock",
            "example": 9103511962796935389,
            "format": "int64"
          },
          "status": {
            "type": "string",
            "description": "Status of the operation",
            "example": "success"
          }
        },
        "example": {
          "failureType": "type-1",
          "id": "01J54G9QCFW4FE6JXKJ9QK3FTD",
          "mandateId": "01J54G9QCFW4FE6JXKJ9QK3FTD",
          "operation": "create",
          "payerAccountName": "Magni ut necessitatibus consequatur.",
          "payerAccountNo": "Et voluptas.",
          "payerIfsc": "Facere illo officia.",
          "payerRespCode": "Libero reiciendis.",
          "seqNumber": 1879124036234550289,
          "status": "success"
        }
      },
      "ModifyPaymentTransfersResponse": {
        "type": "object",
        "properties": {
          "transferType": {
            "type": "string",
            "example": "Percentage",
            "enum": [
              "Percentage",
              "Absolute"
            ]
          },
          "transfers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RouteTransfer"
            },
            "description": "route_transfer",
            "example": [
              {
                "accountIfsc": "Suscipit cumque iste molestiae cumque.",
                "accountNumber": "Officiis et explicabo voluptatem nesciunt.",
                "remarks": "Veniam sit inventore modi modi qui.",
                "value": 0.03737973982778193
              },
              {
                "accountIfsc": "Suscipit cumque iste molestiae cumque.",
                "accountNumber": "Officiis et explicabo voluptatem nesciunt.",
                "remarks": "Veniam sit inventore modi modi qui.",
                "value": 0.03737973982778193
              },
              {
                "accountIfsc": "Suscipit cumque iste molestiae cumque.",
                "accountNumber": "Officiis et explicabo voluptatem nesciunt.",
                "remarks": "Veniam sit inventore modi modi qui.",
                "value": 0.03737973982778193
              },
              {
                "accountIfsc": "Suscipit cumque iste molestiae cumque.",
                "accountNumber": "Officiis et explicabo voluptatem nesciunt.",
                "remarks": "Veniam sit inventore modi modi qui.",
                "value": 0.03737973982778193
              }
            ]
          }
        },
        "example": {
          "transferType": "Percentage",
          "transfers": [
            {
              "accountIfsc": "Suscipit cumque iste molestiae cumque.",
              "accountNumber": "Officiis et explicabo voluptatem nesciunt.",
              "remarks": "Veniam sit inventore modi modi qui.",
              "value": 0.03737973982778193
            },
            {
              "accountIfsc": "Suscipit cumque iste molestiae cumque.",
              "accountNumber": "Officiis et explicabo voluptatem nesciunt.",
              "remarks": "Veniam sit inventore modi modi qui.",
              "value": 0.03737973982778193
            },
            {
              "accountIfsc": "Suscipit cumque iste molestiae cumque.",
              "accountNumber": "Officiis et explicabo voluptatem nesciunt.",
              "remarks": "Veniam sit inventore modi modi qui.",
              "value": 0.03737973982778193
            },
            {
              "accountIfsc": "Suscipit cumque iste molestiae cumque.",
              "accountNumber": "Officiis et explicabo voluptatem nesciunt.",
              "remarks": "Veniam sit inventore modi modi qui.",
              "value": 0.03737973982778193
            }
          ]
        },
        "required": [
          "transfers",
          "transferType",
          "ownerId",
          "ownerType"
        ]
      },
      "ModifyRequestBody": {
        "type": "object",
        "properties": {
          "amountLimit": {
            "type": "integer",
            "description": "Maximum amount for which a mandate transaction can be executed",
            "example": 1000,
            "minimum": 100,
            "maximum": 20000000
          },
          "endDate": {
            "type": "string",
            "description": "End date of the mandate",
            "example": "02012006"
          },
          "expireAfter": {
            "type": "integer",
            "description": "Number of minutes after which the mandate update request will expire",
            "default": 2,
            "example": 2,
            "minimum": 2,
            "maximum": 64800
          },
          "referenceId": {
            "type": "string",
            "description": "Merchant reference id of the mandate",
            "example": "ABC1234789",
            "minLength": 1,
            "maxLength": 255
          }
        },
        "example": {
          "amountLimit": 1000,
          "endDate": "02012006",
          "expireAfter": 2,
          "referenceId": "ABC1234789"
        }
      },
      "ModifyTransfersRequestBody": {
        "type": "object",
        "properties": {
          "chargeTransfer": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RouteTransfer"
            },
            "description": "charge_transfer",
            "example": [
              {
                "accountIfsc": "Excepturi voluptates quia ipsa.",
                "accountNumber": "Voluptates libero qui deleniti inventore a.",
                "remarks": "Nulla recusandae earum.",
                "value": 0.040310816481240276
              },
              {
                "accountIfsc": "Excepturi voluptates quia ipsa.",
                "accountNumber": "Voluptates libero qui deleniti inventore a.",
                "remarks": "Nulla recusandae earum.",
                "value": 0.040310816481240276
              }
            ]
          },
          "chargeTransferType": {
            "type": "string",
            "example": "Percentage",
            "enum": [
              "Percentage"
            ]
          },
          "transferType": {
            "type": "string",
            "example": "Percentage",
            "enum": [
              "Percentage",
              "Absolute"
            ]
          },
          "transfers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RouteTransfer"
            },
            "description": "route_transfer",
            "example": [
              {
                "accountIfsc": "Esse dolores veniam cum.",
                "accountNumber": "Sit quas tenetur veniam.",
                "remarks": "Qui hic labore tempora mollitia dolorum at.",
                "value": 0.47829849513030187
              },
              {
                "accountIfsc": "Esse dolores veniam cum.",
                "accountNumber": "Sit quas tenetur veniam.",
                "remarks": "Qui hic labore tempora mollitia dolorum at.",
                "value": 0.47829849513030187
              },
              {
                "accountIfsc": "Esse dolores veniam cum.",
                "accountNumber": "Sit quas tenetur veniam.",
                "remarks": "Qui hic labore tempora mollitia dolorum at.",
                "value": 0.47829849513030187
              },
              {
                "accountIfsc": "Esse dolores veniam cum.",
                "accountNumber": "Sit quas tenetur veniam.",
                "remarks": "Qui hic labore tempora mollitia dolorum at.",
                "value": 0.47829849513030187
              }
            ]
          }
        },
        "example": {
          "chargeTransfer": [
            {
              "accountIfsc": "Excepturi voluptates quia ipsa.",
              "accountNumber": "Voluptates libero qui deleniti inventore a.",
              "remarks": "Nulla recusandae earum.",
              "value": 0.040310816481240276
            },
            {
              "accountIfsc": "Excepturi voluptates quia ipsa.",
              "accountNumber": "Voluptates libero qui deleniti inventore a.",
              "remarks": "Nulla recusandae earum.",
              "value": 0.040310816481240276
            }
          ],
          "chargeTransferType": "Percentage",
          "transferType": "Percentage",
          "transfers": [
            {
              "accountIfsc": "Esse dolores veniam cum.",
              "accountNumber": "Sit quas tenetur veniam.",
              "remarks": "Qui hic labore tempora mollitia dolorum at.",
              "value": 0.47829849513030187
            },
            {
              "accountIfsc": "Esse dolores veniam cum.",
              "accountNumber": "Sit quas tenetur veniam.",
              "remarks": "Qui hic labore tempora mollitia dolorum at.",
              "value": 0.47829849513030187
            }
          ]
        },
        "required": [
          "transferType",
          "transfers",
          "ownerId",
          "ownerType"
        ]
      },
      "NotifyRequestBody": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "integer",
            "description": "Amount of the mandate",
            "example": 1000,
            "minimum": 100,
            "maximum": 20000000
          },
          "executionDate": {
            "type": "string",
            "description": "Execution date of the mandate",
            "example": "02012006"
          },
          "referenceId": {
            "type": "string",
            "description": "Merchant reference id of the mandate",
            "example": "ABC1234789",
            "minLength": 1,
            "maxLength": 255
          },
          "sequenceNumber": {
            "type": "integer",
            "description": "Sequence number of the mandate",
            "example": 1,
            "format": "int64"
          },
          "umn": {
            "type": "string",
            "description": "Unique mandate number",
            "example": "setumandate1234789@ybl"
          }
        },
        "example": {
          "amount": 1000,
          "executionDate": "02012006",
          "referenceId": "ABC1234789",
          "sequenceNumber": 1,
          "umn": "setumandate1234789@ybl"
        },
        "required": [
          "umn",
          "amount",
          "sequenceNumber",
          "executionDate"
        ]
      },
      "PaginationResponse": {
        "type": "object",
        "properties": {
          "cursor": {
            "$ref": "#/components/schemas/Cursor"
          },
          "filter": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "Repellat cupiditate sit quo."
            },
            "description": "Filters to be applied on the query",
            "example": [
              "name:foo"
            ]
          },
          "limit": {
            "type": "integer",
            "description": "Number of records to be shown in a page",
            "default": 20,
            "example": 10,
            "minimum": 10,
            "maximum": 50
          },
          "totalRecords": {
            "type": "integer",
            "description": "Number of records in the current page",
            "example": 1045678506,
            "format": "int32"
          }
        },
        "example": {
          "cursor": {
            "current": "MDFBUlozTkRFS1RTVjRSUkZGUTY5RzVGQVY=",
            "next": "MDFBUlozTkRFS1RTVjRSUkZGUTY5RzVGQVY=",
            "previous": "MDFBUlozTkRFS1RTVjRSUkZGUTY5RzVGQVY="
          },
          "filter": [
            "name:foo"
          ],
          "limit": 10,
          "totalRecords": 718604851
        }
      },
      "PayerAccountDetails": {
        "type": "object",
        "properties": {
          "accountNumber": {
            "type": "string",
            "example": "Est ab explicabo et."
          },
          "accountType": {
            "type": "string",
            "example": "Reprehenderit et in."
          },
          "ifsc": {
            "type": "string",
            "example": "Velit enim quia perspiciatis dolor exercitationem."
          }
        },
        "example": {
          "accountNumber": "Earum ad fugiat aliquid cupiditate.",
          "accountType": "Error nihil odit ex deleniti.",
          "ifsc": "Ut ut iure doloremque sunt fugiat illum."
        }
      },
      "PaymentDetails": {
        "type": "object",
        "properties": {
          "customerAccountType": {
            "type": "string",
            "description": "account type of the customer",
            "example": "SAVINGS",
            "enum": [
              "SAVINGS",
              "CURRENT",
              "CREDIT"
            ]
          },
          "customerVpa": {
            "type": "string",
            "description": "remitter's VPA",
            "example": "test-auto-tyvmm59i9b@okokaxis"
          },
          "paymentId": {
            "type": "string",
            "description": "Setu payment Id",
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "paymentStatus": {
            "type": "string",
            "description": "status defining the validity of the payment",
            "example": "initiated",
            "enum": [
              "initiated",
              "pending",
              "success",
              "failed"
            ]
          },
          "rrn": {
            "type": "string",
            "description": "NPCI transaction custRef",
            "example": "124068997913"
          },
          "txnId": {
            "type": "string",
            "description": "NPCI transaction id",
            "example": "SETmBZkQOV0M7wyyP1V4PIFhRSzW5eSjmYI"
          },
          "txnTs": {
            "type": "string",
            "description": "RFC 3339 timestamp to indicate the transaction date \u0026 time",
            "example": "2024-06-17T19:17:32+05:30",
            "format": "date-time"
          }
        },
        "example": {
          "customerAccountType": "SAVINGS",
          "customerVpa": "test-auto-tyvmm59i9b@okokaxis",
          "paymentId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
          "paymentStatus": "initiated",
          "rrn": "124068997913",
          "txnId": "SETmBZkQOV0M7wyyP1V4PIFhRSzW5eSjmYI",
          "txnTs": "2024-06-17T19:17:32+05:30"
        }
      },
      "Reason": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "error code returned by Setu for product instance / mandate request / payment / customer vpa verification failure / closure",
            "example": "unable-to-fulfill-request"
          },
          "desc": {
            "type": "string",
            "description": "describes product instance / mandate request / payment / customer vpa verification failure / closure reason",
            "example": "unable-to-fulfill-request"
          },
          "mandateRevokeReason": {
            "type": "string",
            "description": "indicates why the mandate was revoked or who initiated the revocation",
            "example": "merchant-initiated"
          },
          "npciErrCategory": {
            "type": "string",
            "description": "npciErrCode category for product instance / mandate request / payment / customer vpa verification failure / closure",
            "example": "TD"
          },
          "npciErrCode": {
            "type": "string",
            "description": "err code received from NPCI for product instance / mandate request / payment / customer vpa verification failure / closure",
            "example": "YG"
          },
          "npciErrDesc": {
            "type": "string",
            "description": "npciErrCode description for product instance / mandate request / payment / customer vpa verification failure / closure",
            "example": "MERCHANT ERROR (PAYEE PSP)"
          },
          "npciRespCode": {
            "type": "string",
            "description": "resp code received from NPCI for product instance / mandate request / payment / customer vpa verification failure / closure",
            "example": "YG"
          },
          "npciRespDesc": {
            "type": "string",
            "description": "npciRespCode description for product instance / mandate request / payment / customer vpa verification failure / closure",
            "example": "MERCHANT ERROR (PAYEE PSP)"
          },
          "setuDescription": {
            "type": "string",
            "description": "setuDescription for product instance / mandate request / payment / customer vpa verification failure / closure",
            "example": "Merchant PSP error"
          },
          "suggestedAction": {
            "type": "string",
            "description": "suggestedAction for product instance / mandate request / payment / customer vpa verification failure / closure",
            "example": "Merchant PSP error"
          }
        },
        "example": {
          "code": "unable-to-fulfill-request",
          "desc": "unable-to-fulfill-request",
          "mandateRevokeReason": "merchant-initiated",
          "npciErrCategory": "TD",
          "npciErrCode": "YG",
          "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
          "npciRespCode": "YG",
          "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)",
          "setuDescription": "Merchant PSP error",
          "suggestedAction": "Merchant PSP error"
        }
      },
      "RefundReason": {
        "type": "object",
        "properties": {
          "adjCode": {
            "type": "string",
            "description": "Code sent by npci after adjustments",
            "example": "501"
          },
          "adjFlag": {
            "type": "string",
            "description": "Flag sent by npci after adjustments",
            "example": "RRC"
          },
          "errCode": {
            "type": "string",
            "description": "Error code returned by Setu for refund failures",
            "example": "refund-disabled"
          },
          "npciErrCode": {
            "type": "string",
            "description": "Error code received from NPCI in case refund request fails",
            "example": "R21"
          },
          "npciErrDesc": {
            "type": "string",
            "description": "indicates refund error reason",
            "example": "ONLINE REFUND IS DISABLED IN UPI"
          }
        },
        "example": {
          "adjCode": "501",
          "adjFlag": "RRC",
          "errCode": "refund-disabled",
          "npciErrCode": "R21",
          "npciErrDesc": "ONLINE REFUND IS DISABLED IN UPI"
        }
      },
      "ResolveShortlinkResponse": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "integer",
            "description": "Amount (in paise) that needs to be collected from the user. If populated this value gets displayed on the payer PSP's payment page",
            "example": 10000,
            "minimum": 100
          },
          "closedAt": {
            "type": "string",
            "description": "RFC 3339 timestamp to indicate the closure date \u0026 time",
            "example": "2024-06-17T19:17:32+05:30",
            "format": "date-time"
          },
          "createdAt": {
            "type": "string",
            "description": "RFC 3339 timestamp to indicate the creation date \u0026 time for the resource",
            "example": "2024-05-17T19:17:32+05:30",
            "format": "date-time"
          },
          "currency": {
            "type": "string",
            "example": "Similique modi adipisci aperiam."
          },
          "expiryDate": {
            "type": "string",
            "description": "RFC 3339 timestamp to indicate the expiry date \u0026 time",
            "example": "2024-06-17T19:17:32+05:30",
            "format": "date-time"
          },
          "id": {
            "type": "string",
            "description": "Id of the resource, which is the same the id returned in the Create \u003cresource\u003e API response",
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "intentLink": {
            "type": "string",
            "description": "A UPI pay intent link built according to the spec enforced by NPCI",
            "example": "upi://pay?pa=test-auto-pgruosncak@okokaxis\u0026pn=merchant-4\u0026am=100.00\u0026tr=SU1240659756905923780\u0026tn=sample%20single%20use%20qr\u0026cu=INR\u0026mc=1234"
          },
          "mandateDetails": {
            "$ref": "#/components/schemas/MandateDetails"
          },
          "merchantId": {
            "type": "string",
            "description": "Id associated with the merchant on our platform",
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "merchantName": {
            "type": "string",
            "description": "Name of the merchant on our platform",
            "example": "Doofenshmirtz Evil Incorporated"
          },
          "merchantVpa": {
            "type": "string",
            "description": "UPI id of the merchant on which the payments are collected",
            "example": "fastestupi@pineaxis",
            "pattern": "^[a-z0-9.-]*@[a-zA-Z]*$"
          },
          "metadata": {
            "type": "string",
            "description": "field provided for the merchant to add additional key-value pairs",
            "example": {
              "InvoiceNumber": "INV-21-12-009"
            },
            "format": "binary"
          },
          "minAmount": {
            "type": "integer",
            "description": "Minimum amount (in paise) - on setting this value the amount field on the PSP's payment page becomes editable and the customer can pay an amount equal to or greater than the minimum amount",
            "example": 1000,
            "minimum": 100
          },
          "paymentDetails": {
            "$ref": "#/components/schemas/PaymentDetails"
          },
          "paymentType": {
            "type": "string",
            "example": "Neque harum."
          },
          "qrCode": {
            "type": "string",
            "description": "QR code for the generated intent link in the form of base64 encoded string",
            "example": ""
          },
          "reason": {
            "$ref": "#/components/schemas/Reason"
          },
          "refId": {
            "type": "string",
            "description": "NPCI transaction refId",
            "example": "1240689979139556558",
            "pattern": "^[a-zA-Z0-9]*$",
            "minLength": 1,
            "maxLength": 35
          },
          "referenceId": {
            "type": "string",
            "description": "reference id in the merchant's system",
            "example": "1240689979139556557",
            "minLength": 1,
            "maxLength": 255
          },
          "shortLink": {
            "type": "string",
            "description": "A shortened URL for the given intent link",
            "example": "upipay.setu.co/Np3KnBCM8Om0"
          },
          "status": {
            "type": "string",
            "description": "status defining the validity of the product instance",
            "example": "active",
            "enum": [
              "inactive",
              "active",
              "paid",
              "closed"
            ]
          },
          "transactionNote": {
            "type": "string",
            "description": "Transaction note displayed to the customer at the payer PSP's payment page",
            "example": "testpay"
          }
        },
        "example": {
          "amount": 10000,
          "closedAt": "2024-06-17T19:17:32+05:30",
          "createdAt": "2024-05-17T19:17:32+05:30",
          "currency": "Dolorem debitis sint porro error.",
          "expiryDate": "2024-06-17T19:17:32+05:30",
          "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
          "intentLink": "upi://pay?pa=test-auto-pgruosncak@okokaxis\u0026pn=merchant-4\u0026am=100.00\u0026tr=SU1240659756905923780\u0026tn=sample%20single%20use%20qr\u0026cu=INR\u0026mc=1234",
          "mandateDetails": {
            "amount": 1000,
            "customerRevocable": true,
            "customerVpa": "ram@axis",
            "endDate": "02012008",
            "frequency": "monthly",
            "mandateLiveAt": "2023-09-04 12:08:20.202644 +0530 IST",
            "reason": {
              "code": "unable-to-fulfill-request",
              "desc": "unable-to-fulfill-request",
              "mandateRevokeReason": "merchant-initiated",
              "npciErrCategory": "TD",
              "npciErrCode": "YG",
              "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
              "npciRespCode": "YG",
              "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)",
              "setuDescription": "Merchant PSP error",
              "suggestedAction": "Merchant PSP error"
            },
            "startDate": "02012006",
            "status": "pending",
            "txnId": "BTTZrc5gDFkuCr3n3I0ey4aNtzLOLR7K7aR",
            "umn": "c27f5fc30d344e9594fce0afa34f8859@mypsp"
          },
          "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
          "merchantName": "Doofenshmirtz Evil Incorporated",
          "merchantVpa": "fastestupi@pineaxis",
          "metadata": {
            "InvoiceNumber": "INV-21-12-009"
          },
          "minAmount": 1000,
          "paymentDetails": {
            "customerAccountType": "SAVINGS",
            "customerVpa": "test-auto-tyvmm59i9b@okokaxis",
            "paymentId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
            "paymentStatus": "initiated",
            "rrn": "124068997913",
            "txnId": "SETmBZkQOV0M7wyyP1V4PIFhRSzW5eSjmYI",
            "txnTs": "2024-06-17T19:17:32+05:30"
          },
          "paymentType": "Sed quod ab vel et sit.",
          "qrCode": "",
          "reason": {
            "code": "unable-to-fulfill-request",
            "desc": "unable-to-fulfill-request",
            "mandateRevokeReason": "merchant-initiated",
            "npciErrCategory": "TD",
            "npciErrCode": "YG",
            "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
            "npciRespCode": "YG",
            "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)",
            "setuDescription": "Merchant PSP error",
            "suggestedAction": "Merchant PSP error"
          },
          "refId": "1240689979139556558",
          "referenceId": "1240689979139556557",
          "shortLink": "upipay.setu.co/Np3KnBCM8Om0",
          "status": "active",
          "transactionNote": "testpay"
        }
      },
      "RevokeMandateResponse": {
        "type": "object",
        "properties": {
          "expireAfter": {
            "type": "integer",
            "description": "Number of minutes after which the mandate revoke request will expire",
            "default": 2,
            "example": 2,
            "minimum": 2,
            "maximum": 64800
          },
          "id": {
            "type": "string",
            "description": "Id of the mandate request resource",
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "intentLink": {
            "type": "string",
            "example": "upi://mandate?pa=deku040920232@okokaxis\u0026validitystart=1995-12-31\u0026amrule=max\u0026recur=one%20time\u0026recurvalue=0\u0026recurtype=on\u0026cu=INR\u0026mc=1234\u0026mode=04\u0026purpose=14\u0026rev=N\u0026block=N\u0026txnType=revoke\u0026umn=SETUS7mxYHK1A6yXhxJsoKM7yxKqC2r0\u0026tid=SETE9q1rQXW3wXHzDdaqJTDGHHTBkJ0Segc"
          },
          "mandateId": {
            "type": "string",
            "description": "Id of the mandate resource",
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "merchantId": {
            "type": "string",
            "description": "Id of the merchant who created the mandate",
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "mode": {
            "type": "string",
            "example": "intent",
            "enum": [
              "collect",
              "intent"
            ]
          },
          "referenceId": {
            "type": "string",
            "description": "Merchant reference id of the mandate",
            "example": "ABC1234789",
            "minLength": 5,
            "maxLength": 50
          },
          "status": {
            "type": "string",
            "example": "pending",
            "enum": [
              "pending",
              "initiated",
              "success",
              "failed"
            ]
          },
          "txnId": {
            "type": "string",
            "description": "NPCI transaction id",
            "example": "BTTZrc5gDFkuCr3n3I0ey4aNtzLOLR7K7aR",
            "pattern": "^[a-zA-Z0-9]*$",
            "minLength": 35,
            "maxLength": 35
          },
          "umn": {
            "type": "string",
            "description": "Unique mandate number",
            "example": "c27f5fc30d344e9594fce0afa34f8859@mypsp"
          }
        },
        "example": {
          "expireAfter": 2,
          "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
          "intentLink": "upi://mandate?pa=deku040920232@okokaxis\u0026validitystart=1995-12-31\u0026amrule=max\u0026recur=one%20time\u0026recurvalue=0\u0026recurtype=on\u0026cu=INR\u0026mc=1234\u0026mode=04\u0026purpose=14\u0026rev=N\u0026block=N\u0026txnType=revoke\u0026umn=SETUS7mxYHK1A6yXhxJsoKM7yxKqC2r0\u0026tid=SETE9q1rQXW3wXHzDdaqJTDGHHTBkJ0Segc",
          "mandateId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
          "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
          "mode": "intent",
          "referenceId": "ABC1234789",
          "status": "pending",
          "txnId": "BTTZrc5gDFkuCr3n3I0ey4aNtzLOLR7K7aR",
          "umn": "c27f5fc30d344e9594fce0afa34f8859@mypsp"
        }
      },
      "RevokeRequestBody": {
        "type": "object",
        "properties": {
          "expireAfter": {
            "type": "integer",
            "description": "Number of minutes after which the mandate revoke request will expire",
            "default": 2,
            "example": 2,
            "minimum": 2,
            "maximum": 64800
          },
          "referenceId": {
            "type": "string",
            "description": "Merchant reference id of the mandate",
            "example": "ABC1234789",
            "minLength": 1,
            "maxLength": 255
          }
        },
        "example": {
          "expireAfter": 2,
          "referenceId": "ABC1234789"
        }
      },
      "RouteConfiguration": {
        "type": "object",
        "properties": {
          "chargeTransfer": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RouteTransfer"
            },
            "description": "charge_configuration",
            "example": [
              {
                "accountIfsc": "Consequatur officia.",
                "accountNumber": "Asperiores qui.",
                "remarks": "Nihil est doloremque et voluptatem quas.",
                "value": 0.5209121384380389
              },
              {
                "accountIfsc": "Consequatur officia.",
                "accountNumber": "Asperiores qui.",
                "remarks": "Nihil est doloremque et voluptatem quas.",
                "value": 0.5209121384380389
              },
              {
                "accountIfsc": "Consequatur officia.",
                "accountNumber": "Asperiores qui.",
                "remarks": "Nihil est doloremque et voluptatem quas.",
                "value": 0.5209121384380389
              }
            ]
          },
          "chargeTransferType": {
            "type": "string",
            "example": "Percentage",
            "enum": [
              "Percentage"
            ]
          },
          "ownerId": {
            "type": "string",
            "description": "owner to whom notification will be sent",
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "ownerType": {
            "type": "string",
            "example": "merchant",
            "enum": [
              "vpa",
              "merchant"
            ]
          },
          "transferType": {
            "type": "string",
            "example": "Percentage",
            "enum": [
              "Percentage",
              "Absolute"
            ]
          },
          "transfers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RouteTransfer"
            },
            "description": "route_transfer",
            "example": [
              {
                "accountIfsc": "Suscipit cumque iste molestiae cumque.",
                "accountNumber": "Officiis et explicabo voluptatem nesciunt.",
                "remarks": "Veniam sit inventore modi modi qui.",
                "value": 0.03737973982778193
              },
              {
                "accountIfsc": "Suscipit cumque iste molestiae cumque.",
                "accountNumber": "Officiis et explicabo voluptatem nesciunt.",
                "remarks": "Veniam sit inventore modi modi qui.",
                "value": 0.03737973982778193
              },
              {
                "accountIfsc": "Suscipit cumque iste molestiae cumque.",
                "accountNumber": "Officiis et explicabo voluptatem nesciunt.",
                "remarks": "Veniam sit inventore modi modi qui.",
                "value": 0.03737973982778193
              }
            ]
          }
        },
        "example": {
          "chargeTransfer": [
            {
              "accountIfsc": "Consequatur officia.",
              "accountNumber": "Asperiores qui.",
              "remarks": "Nihil est doloremque et voluptatem quas.",
              "value": 0.5209121384380389
            },
            {
              "accountIfsc": "Consequatur officia.",
              "accountNumber": "Asperiores qui.",
              "remarks": "Nihil est doloremque et voluptatem quas.",
              "value": 0.5209121384380389
            },
            {
              "accountIfsc": "Consequatur officia.",
              "accountNumber": "Asperiores qui.",
              "remarks": "Nihil est doloremque et voluptatem quas.",
              "value": 0.5209121384380389
            },
            {
              "accountIfsc": "Consequatur officia.",
              "accountNumber": "Asperiores qui.",
              "remarks": "Nihil est doloremque et voluptatem quas.",
              "value": 0.5209121384380389
            }
          ],
          "chargeTransferType": "Percentage",
          "ownerId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
          "ownerType": "merchant",
          "transferType": "Percentage",
          "transfers": [
            {
              "accountIfsc": "Suscipit cumque iste molestiae cumque.",
              "accountNumber": "Officiis et explicabo voluptatem nesciunt.",
              "remarks": "Veniam sit inventore modi modi qui.",
              "value": 0.03737973982778193
            },
            {
              "accountIfsc": "Suscipit cumque iste molestiae cumque.",
              "accountNumber": "Officiis et explicabo voluptatem nesciunt.",
              "remarks": "Veniam sit inventore modi modi qui.",
              "value": 0.03737973982778193
            },
            {
              "accountIfsc": "Suscipit cumque iste molestiae cumque.",
              "accountNumber": "Officiis et explicabo voluptatem nesciunt.",
              "remarks": "Veniam sit inventore modi modi qui.",
              "value": 0.03737973982778193
            }
          ]
        },
        "required": [
          "transfers",
          "transferType",
          "ownerId",
          "ownerType"
        ]
      },
      "RouteTransfer": {
        "type": "object",
        "properties": {
          "accountIfsc": {
            "type": "string",
            "description": "Account IFSC of the beneficiary, this is needs to be of a registered account.",
            "example": "Et aut dolores nihil."
          },
          "accountNumber": {
            "type": "string",
            "description": "Account number of the beneficiary, this is needs to be of a registered account.",
            "example": "Ab et qui mollitia et libero tenetur."
          },
          "remarks": {
            "type": "string",
            "description": "Remarks if required for the transfer",
            "example": "Quisquam explicabo in magnam consequatur est."
          },
          "value": {
            "type": "number",
            "description": "Value of the transfer, it can be 0 - 100 if the route/ transfer type is percentage and in paise if the type is Absolute",
            "example": 0.014978854050189665,
            "format": "double"
          }
        },
        "example": {
          "accountIfsc": "Officia rerum maiores praesentium ex.",
          "accountNumber": "Sed eaque est ratione consequatur iure.",
          "remarks": "Error vel voluptatem ex omnis quasi.",
          "value": 0.5302676303448881
        },
        "required": [
          "value",
          "accountNumber",
          "accountIfsc"
        ]
      },
      "SettlementConfigurationObj": {
        "type": "object",
        "properties": {
          "cycles": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "Libero asperiores voluptas illum quis esse iusto."
            },
            "description": "settlement cycles supported",
            "example": [
              "Quis odit maiores ad exercitationem.",
              "Debitis saepe earum mollitia iste ex."
            ]
          },
          "frequency": {
            "type": "string",
            "example": "TPlusOne",
            "enum": [
              "Instant",
              "TZero",
              "TPlusOne",
              "TPlusTwo",
              "TPlusFour"
            ]
          },
          "isEnabled": {
            "type": "boolean",
            "description": "Indicates whether fund movement/ settlements should be done by the platform or not",
            "example": true
          },
          "onhold": {
            "type": "boolean",
            "description": "Indicates whether settlement should be done or put on hold",
            "example": true
          },
          "payoutAdjustable": {
            "type": "boolean",
            "description": "Indicates whether adjustments can be made against payouts for the day/ settlement",
            "example": true
          },
          "reconRequired": {
            "type": "boolean",
            "description": "Indicates whether reconciliation is required proceed with settlements or not",
            "example": false
          },
          "type": {
            "type": "string",
            "example": "Gross",
            "enum": [
              "Net",
              "Gross",
              "Direct"
            ]
          },
          "types": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "Net",
              "enum": [
                "Gross",
                "Net",
                "Direct"
              ]
            },
            "description": "types of settlements supported",
            "example": [
              "Gross",
              "Net",
              "Direct"
            ]
          }
        },
        "example": {
          "cycles": [
            "Velit vero pariatur eos excepturi.",
            "Ea nesciunt possimus.",
            "Dolores dolorem ea neque dicta."
          ],
          "frequency": "TPlusOne",
          "isEnabled": true,
          "onhold": true,
          "payoutAdjustable": true,
          "reconRequired": false,
          "type": "Gross",
          "types": [
            "Gross",
            "Net",
            "Direct"
          ]
        },
        "required": [
          "isEnabled"
        ]
      },
      "StatusRequestBody": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "status defining the validity of the payment link",
            "example": "inactive",
            "enum": [
              "inactive",
              "active"
            ]
          }
        },
        "example": {
          "status": "inactive"
        }
      },
      "TPVAccountDetail": {
        "type": "object",
        "properties": {
          "IFSC": {
            "type": "string",
            "description": "IFSC code for the account",
            "example": "SBIN0000001"
          },
          "accountName": {
            "type": "string",
            "description": "account holder name for the account",
            "example": "deku"
          },
          "accountNumber": {
            "type": "string",
            "description": "account number for the account",
            "example": "1234567890"
          }
        },
        "example": {
          "IFSC": "SBIN0000001",
          "accountName": "deku",
          "accountNumber": "1234567890"
        },
        "required": [
          "accountNumber"
        ]
      },
      "TPVAccountDetailResponse": {
        "type": "object",
        "properties": {
          "IFSC": {
            "type": "string",
            "description": "IFSC code for the account",
            "example": "SBIN0000001"
          },
          "encryptedAccountName": {
            "type": "string",
            "description": "Base64-encoded encrypted account name",
            "example": "5e884898da28047151d0e56f8dc629277"
          },
          "encryptedAccountNumber": {
            "type": "string",
            "description": "Base64-encoded encrypted account number",
            "example": "5e884898da28047151d0e56f8dc629277"
          },
          "hashedAccountName": {
            "type": "string",
            "description": "Base64-encoded hashed account name",
            "example": "5e884898da28047151d0e56f8dc629277"
          },
          "hashedAccountNumber": {
            "type": "string",
            "description": "Base64-encoded hashed account number",
            "example": "5e884898da28047151d0e56f8dc629277"
          },
          "maskedAccountName": {
            "type": "string",
            "description": "Masked account name",
            "example": "R*M*E*S*"
          },
          "maskedAccountNumber": {
            "type": "string",
            "description": "Masked account number",
            "example": "**** **** **** 7890"
          }
        },
        "description": "API response for TPV creation",
        "example": {
          "IFSC": "SBIN0000001",
          "encryptedAccountName": "5e884898da28047151d0e56f8dc629277",
          "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
          "hashedAccountName": "5e884898da28047151d0e56f8dc629277",
          "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
          "maskedAccountName": "R*M*E*S*",
          "maskedAccountNumber": "**** **** **** 7890"
        }
      },
      "UpdateMandateResponse": {
        "type": "object",
        "properties": {
          "amountLimit": {
            "type": "integer",
            "description": "Maximum amount for which a mandate transaction can be executed",
            "example": 1000,
            "minimum": 10000,
            "maximum": 2000000000
          },
          "endDate": {
            "type": "string",
            "description": "End date of the mandate",
            "example": "02012006"
          },
          "expireAfter": {
            "type": "integer",
            "description": "Number of minutes after which the mandate update request will expire",
            "default": 2,
            "example": 2,
            "minimum": 2,
            "maximum": 64800
          },
          "id": {
            "type": "string",
            "description": "Id of the mandate request resource",
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "intentLink": {
            "type": "string",
            "example": "upi://mandate?pa=deku040920232@okokaxis\u0026validitystart=31121995\u0026validityend=30122025\u0026am=901.00\u0026amrule=max\u0026recur=one%20time\u0026recurvalue=0\u0026recurtype=on\u0026cu=INR\u0026mc=1234\u0026mode=01\u0026purpose=14\u0026rev=N\u0026block=N\u0026txnType=update\u0026umn=SETUS7mxYHK1A6yXhxJsoKM7yxKqC2r0\u0026tid=SETM3Iij4WQrtEUbOUFkTpQp2EpR5wqy5Ou"
          },
          "mandateId": {
            "type": "string",
            "description": "Id of the mandate resource",
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "merchantId": {
            "type": "string",
            "description": "Id of the merchant who created the mandate",
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "mode": {
            "type": "string",
            "example": "qr",
            "enum": [
              "collect",
              "qr",
              "intent"
            ]
          },
          "qrCode": {
            "type": "string",
            "description": "QR code for the generated intent link in the form of base64 encoded string",
            "example": ""
          },
          "referenceId": {
            "type": "string",
            "description": "Merchant reference id of the mandate",
            "example": "ABC1234789",
            "minLength": 5,
            "maxLength": 50
          },
          "status": {
            "type": "string",
            "example": "pending",
            "enum": [
              "pending",
              "initiated",
              "success",
              "failed"
            ]
          },
          "txnId": {
            "type": "string",
            "description": "NPCI transaction id",
            "example": "BTTZrc5gDFkuCr3n3I0ey4aNtzLOLR7K7aR",
            "pattern": "^[a-zA-Z0-9]*$",
            "minLength": 35,
            "maxLength": 35
          },
          "umn": {
            "type": "string",
            "description": "Unique mandate number",
            "example": "c27f5fc30d344e9594fce0afa34f8859@mypsp"
          }
        },
        "example": {
          "amountLimit": 1000,
          "endDate": "02012006",
          "expireAfter": 2,
          "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
          "intentLink": "upi://mandate?pa=deku040920232@okokaxis\u0026validitystart=31121995\u0026validityend=30122025\u0026am=901.00\u0026amrule=max\u0026recur=one%20time\u0026recurvalue=0\u0026recurtype=on\u0026cu=INR\u0026mc=1234\u0026mode=01\u0026purpose=14\u0026rev=N\u0026block=N\u0026txnType=update\u0026umn=SETUS7mxYHK1A6yXhxJsoKM7yxKqC2r0\u0026tid=SETM3Iij4WQrtEUbOUFkTpQp2EpR5wqy5Ou",
          "mandateId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
          "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
          "mode": "qr",
          "qrCode": "",
          "referenceId": "ABC1234789",
          "status": "pending",
          "txnId": "BTTZrc5gDFkuCr3n3I0ey4aNtzLOLR7K7aR",
          "umn": "c27f5fc30d344e9594fce0afa34f8859@mypsp"
        }
      },
      "UpdateMockRefundStatusRequestBody": {
        "type": "object",
        "properties": {
          "errCode": {
            "type": "string",
            "description": "error code to fail refund with",
            "example": "AA1"
          },
          "mockStatus": {
            "type": "string",
            "description": "status expected to mock",
            "example": "success",
            "enum": [
              "success",
              "failed"
            ]
          }
        },
        "example": {
          "errCode": "AA1",
          "mockStatus": "success"
        },
        "required": [
          "mockStatus"
        ]
      },
      "UpdateRequestBody": {
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean",
            "example": true
          }
        },
        "example": {
          "active": true
        },
        "required": [
          "active"
        ]
      },
      "UpdateStatusRequestBody": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "updated status of the VPA",
            "example": "active",
            "enum": [
              "active",
              "inactive"
            ]
          }
        },
        "example": {
          "status": "active"
        },
        "required": [
          "status"
        ]
      },
      "UpdateTxnStatusRequestBody": {
        "type": "object",
        "properties": {
          "transactionStatus": {
            "type": "string",
            "description": "Updated Transaction Status of the Merchant",
            "example": "active",
            "enum": [
              "active",
              "inactive"
            ]
          }
        },
        "example": {
          "transactionStatus": "active"
        },
        "required": [
          "transactionStatus"
        ]
      },
      "VerifyCustomerVpaResponse": {
        "type": "object",
        "properties": {
          "createdAt": {
            "type": "string",
            "description": "ISO 8601 timestamp to indicate the creation date \u0026 time for the verification request",
            "example": "2024-05-17T19:17:32+05:30",
            "format": "date-time"
          },
          "customerVpa": {
            "type": "string",
            "description": "UPI id of the customer that needs to be verified",
            "example": "ram@okhdfc",
            "pattern": "^[a-zA-Z0-9.-]*@[a-zA-Z0-9.-]*$"
          },
          "id": {
            "type": "string",
            "description": "ID of the request",
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "merchantId": {
            "type": "string",
            "description": "Id associated with the merchant on our platform",
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "referenceId": {
            "type": "string",
            "description": "Id to be used by merchant to identify the verifcation request on our platform",
            "example": "1240689979139556557",
            "minLength": 1,
            "maxLength": 255
          },
          "status": {
            "type": "string",
            "description": "status defining the validity of the customer vpa",
            "example": "pending",
            "enum": [
              "pending",
              "valid",
              "invalid",
              "failed"
            ]
          }
        },
        "example": {
          "createdAt": "2024-05-17T19:17:32+05:30",
          "customerVpa": "ram@okhdfc",
          "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
          "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
          "referenceId": "1240689979139556557",
          "status": "pending"
        }
      },
      "VerifyRequestBody": {
        "type": "object",
        "properties": {
          "customerVpa": {
            "type": "string",
            "description": "UPI id of the customer that needs to be verified",
            "example": "aadhitya@okhdfc",
            "pattern": "^[a-zA-Z0-9.-]*@[a-zA-Z0-9.-]*$"
          },
          "referenceId": {
            "type": "string",
            "description": "Id to be used by merchant to identify the verifcation request on our platform",
            "example": "1240689979139556557",
            "minLength": 1,
            "maxLength": 255
          }
        },
        "example": {
          "customerVpa": "aadhitya@okhdfc",
          "referenceId": "1240689979139556557"
        },
        "required": [
          "customerVpa"
        ]
      },
      "VpaResponse": {
        "type": "object",
        "properties": {
          "createdAt": {
            "type": "string",
            "description": "RFC 3339 timestamp to indicate the creation date \u0026 time for the resource",
            "example": "2024-05-17T19:17:32+05:30",
            "format": "date-time"
          },
          "id": {
            "type": "string",
            "description": "Id of the resource, which is the same the id returned in the Create \u003cresource\u003e API response",
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "merchantId": {
            "type": "string",
            "description": "Id associated with the merchant on our platform",
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "referenceId": {
            "type": "string",
            "description": "reference id in the merchant's system",
            "example": "1240689979139556557",
            "minLength": 1,
            "maxLength": 255
          },
          "status": {
            "type": "string",
            "description": "indicates the validity of vpa",
            "example": "active",
            "enum": [
              "active",
              "inactive"
            ]
          },
          "verificationStatus": {
            "type": "string",
            "description": "indicates if the vpa is verified or not. Could be one of (verified, pending, failed)",
            "example": "verified",
            "enum": [
              "verified",
              "pending",
              "failed"
            ]
          },
          "vpa": {
            "type": "string",
            "description": "UPI id of the merchant to be used to collect payments",
            "example": "fastestupi@pineaxis",
            "pattern": "^[a-z0-9.-]*@[a-z]*$"
          }
        },
        "example": {
          "createdAt": "2024-05-17T19:17:32+05:30",
          "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
          "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
          "referenceId": "1240689979139556557",
          "status": "active",
          "verificationStatus": "verified",
          "vpa": "fastestupi@pineaxis"
        }
      }
    },
    "securitySchemes": {
      "jwt_header_Authorization": {
        "type": "http",
        "description": "Secures endpoint by requiring a valid JWT token.",
        "scheme": "bearer"
      }
    }
  },
  "tags": [
    {
      "name": "collect",
      "description": "The collect service handles collect request related operations"
    },
    {
      "name": "customer-vpa",
      "description": "The customer-vpa service handles customer / payer vpa verification related operations"
    },
    {
      "name": "dqr",
      "description": "DQR service enables a merchant to create a one time paymentlink/ qr, which the customer can use to make a payment"
    },
    {
      "name": "offlineQR",
      "description": "Offline QR APIs"
    },
    {
      "name": "beneficiary-account",
      "description": "The beneficiary account service handles beneficiary bank account related operations"
    },
    {
      "name": "short-link",
      "description": "Shortlink APIs"
    },
    {
      "name": "sqr",
      "description": "Static QR APIs"
    },
    {
      "name": "tpv"
    },
    {
      "name": "tpv-plus"
    },
    {
      "name": "vpa",
      "description": "The vpa service handles vpa related operations"
    },
    {
      "name": "mandates",
      "description": "The mandates service exposes methods to maintain the life cycle of a mandate"
    },
    {
      "name": "merchant",
      "description": "The merchant service handles merchant related operations"
    },
    {
      "name": "payments",
      "description": "The payments service handles payment related operations"
    },
    {
      "name": "refund",
      "description": "The refund service handles refund related operations"
    }
  ]
}