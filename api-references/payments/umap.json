{
  "openapi": "3.0.3",
  "info": {
    "title": "Setu { UPI Merchant Acquirer } APIs",
    "description": "APIs exposed to help merchants get onboarded onto the platform, create a payment context and collect payments from their customers",
    "version": "1.0"
  },
  "servers": [
    {
      "url": "https://umap-uat-core.setu.co",
      "description": "Sandbox"
    },
    {
      "url": "https://umap.setu.co",
      "description": "Production"
    }
  ],
  "paths": {
    "/api/v1/aggregators/merchants": {
      "post": {
        "tags": ["Merchant"],
        "summary": "(Aggregator) Setup a merchant",
        "description": "API to be used by an aggregator to setup a merchant on our platform",
        "operationId": "merchant#createMerchantWrapper",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateMerchantWrapperRequestBody"
              },
              "example": {
                "acceptDeemedTxns": true,
                "aggregatorAccountId": "328a928f-e277-4798-8e28-4b19a61a8a23",
                "businessName": "Setu",
                "businessType": "PROPRIETARY",
                "franchiseName": "Setu UPI",
                "genre": "ONLINE",
                "legalName": "BrokenTusk Technologies Pvt Ltd",
                "mcc": "5432",
                "merchantName": "Enim voluptates deleniti id.",
                "merchantType": "large",
                "onboardingType": "aggregator",
                "paymentModes": [
                  "saving",
                  "lite",
                  "erupi",
                  "rupay_cc",
                  "ppi",
                  "current",
                  "nro",
                  "nre"
                ],
                "productAccountId": "328a928f-e277-4798-8e28-4b19a61a8a22",
                "products": [
                  "pay_single",
                  "pay_multi",
                  "tpv",
                  "tpv_plus",
                  "intent_autopay"
                ],
                "settlement": {
                  "cycles": [
                    {
                      "endTime": "2007-08-23T21:31:09Z",
                      "settlementTime": "1991-12-22T21:57:52Z",
                      "startTime": "1995-04-19T10:17:12Z"
                    },
                    {
                      "endTime": "2007-08-23T21:31:09Z",
                      "settlementTime": "1991-12-22T21:57:52Z",
                      "startTime": "1995-04-19T10:17:12Z"
                    }
                  ],
                  "frequency": "TPlusOne",
                  "splitsEnabled": true,
                  "type": "Net"
                },
                "settlementsEnabled": true,
                "standardAccountId": "328a928f-e277-4798-8e28-4b19a61a8a22",
                "vpaHandles": ["pineaxis"]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created response.",
            "headers": {
              "requestId": {
                "schema": {
                  "type": "string",
                  "example": "cjqml1f2e5ocq2mesej0"
                },
                "example": "cjqml1f2e5ocq2mesej0"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompactMerchantResponse"
                },
                "example": {
                  "acceptDeemedTxns": true,
                  "businessName": "Setu",
                  "businessType": "PROPRIETARY",
                  "createdAt": "2024-05-17T19:17:32+05:30",
                  "franchiseName": "Setu UPI",
                  "genre": "ONLINE",
                  "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "legalName": "BrokenTusk Technologies Pvt Ltd",
                  "mcc": "5432",
                  "merchantName": "Occaecati unde nobis ut.",
                  "merchantType": "large",
                  "onboardingType": "aggregator",
                  "paymentModes": [
                    "saving",
                    "lite",
                    "erupi",
                    "rupay_cc",
                    "ppi",
                    "current",
                    "nro",
                    "nre"
                  ],
                  "products": [
                    "pay_single",
                    "pay_multi",
                    "tpv",
                    "tpv_plus",
                    "intent_autopay"
                  ],
                  "settlement": {
                    "cycles": [
                      {
                        "endTime": "1977-01-17T07:19:44Z",
                        "settlementTime": "1995-03-19T23:15:19Z",
                        "startTime": "2008-11-27T00:50:41Z"
                      },
                      {
                        "endTime": "1977-01-17T07:19:44Z",
                        "settlementTime": "1995-03-19T23:15:19Z",
                        "startTime": "2008-11-27T00:50:41Z"
                      },
                      {
                        "endTime": "1977-01-17T07:19:44Z",
                        "settlementTime": "1995-03-19T23:15:19Z",
                        "startTime": "2008-11-27T00:50:41Z"
                      }
                    ],
                    "frequency": "TPlusOne",
                    "splitsEnabled": false,
                    "type": "Net"
                  },
                  "settlementsEnabled": false,
                  "transactionStatus": "active",
                  "vpaHandles": ["pineaxis"],
                  "vpaPrefix": "acmecorp.*"
                }
              }
            }
          },
          "400": {
            "description": "Bad request: Bad Request response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized: Unauthorized response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error: Internal Server Error response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          }
        },
        "security": [{ "jwt_header_Authorization": [] }]
      }
    },
    "/api/v1/merchants/collect": {
      "post": {
        "tags": ["Collect"],
        "summary": "Create and invoke a collect request",
        "description": "API to create and send a collect request to a customer's UPI id",
        "operationId": "collect#create",
        "parameters": [
          {
            "name": "merchantId",
            "in": "header",
            "description": "Id associated with the merchant on our platform",
            "allowEmptyValue": true,
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id associated with the merchant on our platform",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CreateRequestBody" },
              "example": {
                "amount": 10000,
                "customerVpa": "aadhitya@okaxis",
                "expireAfter": 2,
                "merchantVpa": "fastestupi@pineaxis",
                "metadata": { "InvoiceNumber": "INV-21-12-009" },
                "referenceId": "1240689979139556557",
                "transactionNote": "Payment for loan repayment"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created response.",
            "headers": {
              "requestId": {
                "schema": {
                  "type": "string",
                  "example": "cjqml1f2e5ocq2mesej0"
                },
                "example": "cjqml1f2e5ocq2mesej0"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateCollectResponse"
                },
                "example": {
                  "amount": 10000,
                  "closedAt": "2024-05-17T19:17:32+05:30",
                  "createdAt": "2024-05-17T19:17:32+05:30",
                  "customerVpa": "aadhitya@okaxis",
                  "expireAfter": 2,
                  "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "merchantVpa": "fastestupi@pineaxis",
                  "metadata": { "InvoiceNumber": "INV-21-12-009" },
                  "refId": "1240689979139556558",
                  "referenceId": "1240689979139556557",
                  "status": "active",
                  "transactionNote": "Payment for loan repayment"
                }
              }
            }
          },
          "400": {
            "description": "Bad request: Bad Request response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Forbidden response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not found: Not Found response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error: Internal Server Error response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          }
        },
        "security": [{ "jwt_header_Authorization": [] }]
      }
    },
    "/api/v1/merchants/collect/{id}": {
      "get": {
        "tags": ["Collect"],
        "summary": "Fetch collect request by id",
        "description": "API to check the current status of a collect request",
        "operationId": "collect#fetchById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the resource, which is the same the id returned in the Create \u003cresource\u003e API response",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id of the resource, which is the same the id returned in the Create \u003cresource\u003e API response",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          {
            "name": "merchantId",
            "in": "header",
            "description": "Id associated with the merchant on our platform",
            "allowEmptyValue": true,
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id associated with the merchant on our platform",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "headers": {
              "requestId": {
                "schema": {
                  "type": "string",
                  "example": "cjqml1f2e5ocq2mesej0"
                },
                "example": "cjqml1f2e5ocq2mesej0"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FetchCollectResponse"
                },
                "example": {
                  "amount": 10000,
                  "closedAt": "2024-05-17T19:17:32+05:30",
                  "createdAt": "2024-05-17T19:17:32+05:30",
                  "customerVpa": "aadhitya@okaxis",
                  "expireAfter": 2,
                  "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "merchantVpa": "fastestupi@pineaxis",
                  "metadata": { "InvoiceNumber": "INV-21-12-009" },
                  "reason": {
                    "code": "unable-to-fulfill-request",
                    "desc": "unable-to-fulfill-request",
                    "npciErrCategory": "TD",
                    "npciErrCode": "YG",
                    "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
                    "npciRespCode": "YG",
                    "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)",
                    "setuDescription": "Merchant PSP error",
                    "suggestedAction": "Merchant PSP error"
                  },
                  "refId": "1240689979139556558",
                  "referenceId": "1240689979139556557",
                  "status": "active",
                  "transactionNote": "Payment for loan repayment"
                }
              }
            }
          },
          "400": {
            "description": "Bad request: Bad Request response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Forbidden response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not found: Not Found response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error: Internal Server Error response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          }
        },
        "security": [{ "jwt_header_Authorization": [] }]
      }
    },
    "/api/v1/merchants/customer-vpas/analyse": {
      "post": {
        "tags": ["Customer VPA"],
        "summary": "Analyse customer's UPI id",
        "description": "API to analyse a customer's UPI id with information about the customer",
        "operationId": "customer-vpa#analyse",
        "parameters": [
          {
            "name": "merchantId",
            "in": "header",
            "description": "Id associated with the merchant on our platform",
            "allowEmptyValue": true,
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id associated with the merchant on our platform",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/VerifyRequestBody" },
              "example": {
                "customerVpa": "aadhitya@okhdfc",
                "referenceId": "1240689979139556557"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK response.",
            "headers": {
              "requestId": {
                "schema": {
                  "type": "string",
                  "example": "cjqml1f2e5ocq2mesej0"
                },
                "example": "cjqml1f2e5ocq2mesej0"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VerifyCustomerVpaResponse"
                },
                "example": {
                  "createdAt": "2024-05-17T19:17:32+05:30",
                  "customerVpa": "ram@okhdfc",
                  "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "referenceId": "1240689979139556557",
                  "status": "pending"
                }
              }
            }
          },
          "400": {
            "description": "Bad request: Bad Request response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Forbidden response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not found: Not Found response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error: Internal Server Error response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          }
        },
        "security": [{ "jwt_header_Authorization": [] }]
      }
    },
    "/api/v1/merchants/customer-vpas/analyse/{id}": {
      "get": {
        "tags": ["Customer VPA"],
        "summary": "Fetch customer VPA analyse record by id",
        "description": "Check customer vpa analyse status",
        "operationId": "customer-vpa#analyseById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the request",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of the request",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          {
            "name": "merchantId",
            "in": "header",
            "description": "Id associated with the merchant on our platform",
            "allowEmptyValue": true,
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id associated with the merchant on our platform",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "headers": {
              "requestId": {
                "schema": {
                  "type": "string",
                  "example": "cjqml1f2e5ocq2mesej0"
                },
                "example": "cjqml1f2e5ocq2mesej0"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FetchAnalyseCustomerVpaByIDResponse"
                },
                "example": {
                  "createdAt": "2024-05-17T19:17:32+05:30",
                  "customerAccountIfsc": "ICIC000001",
                  "customerAccountType": "SAVINGS",
                  "customerName": "Ram",
                  "customerVpa": "ram@okhdfc",
                  "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "merchantDetails": {
                    "brandName": "Setu",
                    "businessType": "PROPRIETARY",
                    "franchiseName": "Setu UPI",
                    "genre": "ONLINE",
                    "legalName": "BrokenTusk Technologies Pvt Ltd",
                    "mcc": "5432",
                    "merchantType": "large",
                    "onboardingType": "aggregator"
                  },
                  "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "reason": {
                    "code": "unable-to-fulfill-request",
                    "desc": "unable-to-fulfill-request",
                    "npciErrCategory": "TD",
                    "npciErrCode": "YG",
                    "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
                    "npciRespCode": "YG",
                    "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)",
                    "setuDescription": "Merchant PSP error",
                    "suggestedAction": "Merchant PSP error"
                  },
                  "referenceId": "1240689979139556557",
                  "status": "pending"
                }
              }
            }
          },
          "400": {
            "description": "Bad request: Bad Request response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Forbidden response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not found: Not Found response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error: Internal Server Error response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          }
        },
        "security": [{ "jwt_header_Authorization": [] }]
      }
    },
    "/api/v1/merchants/customer-vpas/mock/verify": {
      "post": {
        "tags": ["Customer VPA"],
        "summary": "Mock a customer vpa verification",
        "description": "API to mock a customer vpa verification as if its done by a customer on a payer PSP",
        "operationId": "customer-vpa#DoCustomerVpaVerification",
        "parameters": [
          {
            "name": "merchantId",
            "in": "header",
            "allowEmptyValue": true,
            "required": true,
            "schema": {
              "type": "string",
              "example": "Sit corrupti maiores ut."
            },
            "example": "Voluptas officia illo ea incidunt."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DoCustomerVpaVerificationRequestBody"
              },
              "example": {
                "id": "Vitae provident voluptas nam non sed.",
                "status": "failed"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK response.",
            "headers": {
              "requestId": {
                "schema": {
                  "type": "string",
                  "example": "cjqml1f2e5ocq2mesej0"
                },
                "example": "cjqml1f2e5ocq2mesej0"
              }
            }
          },
          "400": {
            "description": "Bad request: Bad Request response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Forbidden response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not found: Not Found response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error: Internal Server Error response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          }
        },
        "security": [{ "jwt_header_Authorization": [] }]
      }
    },
    "/api/v1/merchants/customer-vpas/verify": {
      "post": {
        "tags": ["Customer VPA"],
        "summary": "Verify a customer's UPI id",
        "description": "API to verify whether a customer's UPI id exists and can be verified",
        "operationId": "customer-vpa#verify",
        "parameters": [
          {
            "name": "merchantId",
            "in": "header",
            "description": "Id associated with the merchant on our platform",
            "allowEmptyValue": true,
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id associated with the merchant on our platform",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/VerifyRequestBody" },
              "example": {
                "customerVpa": "aadhitya@okhdfc",
                "referenceId": "1240689979139556557"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK response.",
            "headers": {
              "requestId": {
                "schema": {
                  "type": "string",
                  "example": "cjqml1f2e5ocq2mesej0"
                },
                "example": "cjqml1f2e5ocq2mesej0"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VerifyCustomerVpaResponse"
                },
                "example": {
                  "createdAt": "2024-05-17T19:17:32+05:30",
                  "customerVpa": "ram@okhdfc",
                  "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "referenceId": "1240689979139556557",
                  "status": "pending"
                }
              }
            }
          },
          "400": {
            "description": "Bad request: Bad Request response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Forbidden response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not found: Not Found response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error: Internal Server Error response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          }
        },
        "security": [{ "jwt_header_Authorization": [] }]
      }
    },
    "/api/v1/merchants/customer-vpas/verify/{id}": {
      "get": {
        "tags": ["Customer VPA"],
        "summary": "Fetch customer VPA verification record by id",
        "description": "Check customer vpa verification status",
        "operationId": "customer-vpa#fetchById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the request",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of the request",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          {
            "name": "merchantId",
            "in": "header",
            "description": "Id associated with the merchant on our platform",
            "allowEmptyValue": true,
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id associated with the merchant on our platform",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "headers": {
              "requestId": {
                "schema": {
                  "type": "string",
                  "example": "cjqml1f2e5ocq2mesej0"
                },
                "example": "cjqml1f2e5ocq2mesej0"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FetchCustomerVpaByIDResponse"
                },
                "example": {
                  "createdAt": "2024-05-17T19:17:32+05:30",
                  "customerAccountType": "SAVINGS",
                  "customerVpa": "ram@okhdfc",
                  "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "reason": {
                    "code": "unable-to-fulfill-request",
                    "desc": "unable-to-fulfill-request",
                    "npciErrCategory": "TD",
                    "npciErrCode": "YG",
                    "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
                    "npciRespCode": "YG",
                    "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)",
                    "setuDescription": "Merchant PSP error",
                    "suggestedAction": "Merchant PSP error"
                  },
                  "referenceId": "1240689979139556557",
                  "status": "pending"
                }
              }
            }
          },
          "400": {
            "description": "Bad request: Bad Request response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Forbidden response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not found: Not Found response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error: Internal Server Error response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          }
        },
        "security": [{ "jwt_header_Authorization": [] }]
      }
    },
    "/api/v1/merchants/dqr": {
      "post": {
        "tags": ["DQR"],
        "summary": "Create dynamic QR (single use)",
        "description": "API to create a dynamic QR which can be used make a one time payment by the customer",
        "operationId": "dqr#create",
        "parameters": [
          {
            "name": "merchantId",
            "in": "header",
            "description": "Id associated with the merchant on our platform",
            "allowEmptyValue": true,
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id associated with the merchant on our platform",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CreateRequestBody2" },
              "example": {
                "amount": 10000,
                "expiryDate": "2024-06-17T19:17:32+05:30",
                "merchantVpa": "fastestupi@pineaxis",
                "metadata": { "InvoiceNumber": "INV-21-12-009" },
                "minAmount": 1000,
                "referenceId": "1240689979139556557",
                "transactionNote": "testpay"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created response.",
            "headers": {
              "requestId": {
                "schema": {
                  "type": "string",
                  "example": "cjqml1f2e5ocq2mesej0"
                },
                "example": "cjqml1f2e5ocq2mesej0"
              }
            },
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CreateDqrResponse" },
                "example": {
                  "amount": 10000,
                  "createdAt": "2024-05-17T19:17:32+05:30",
                  "expiryDate": "2024-06-17T19:17:32+05:30",
                  "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "intentLink": "upi://pay?pa=test-auto-pgruosncak@okokaxis\u0026pn=merchant-4\u0026am=100.00\u0026tr=SU1240659756905923780\u0026tn=sample%20single%20use%20qr\u0026cu=INR\u0026mc=1234",
                  "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "merchantVpa": "fastestupi@pineaxis",
                  "metadata": { "InvoiceNumber": "INV-21-12-009" },
                  "minAmount": 1000,
                  "qrCode": "",
                  "refId": "1240689979139556558",
                  "referenceId": "1240689979139556557",
                  "shortLink": "upipay.setu.co/Np3KnBCM8Om0",
                  "status": "active",
                  "transactionNote": "testpay"
                }
              }
            }
          },
          "400": {
            "description": "Bad request: Bad Request response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Forbidden response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not found: Not Found response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error: Internal Server Error response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          }
        },
        "security": [{ "jwt_header_Authorization": [] }]
      }
    },
    "/api/v1/merchants/dqr/history": {
      "get": {
        "tags": ["DQR"],
        "summary": "List last few DQRs",
        "description": "API to fetch the history of dynamic QRs for a merchant",
        "operationId": "dqr#history",
        "parameters": [
          {
            "name": "merchantId",
            "in": "header",
            "allowEmptyValue": true,
            "required": true,
            "schema": {
              "type": "string",
              "example": "Laborum ut dolorem vero cum."
            },
            "example": "Enim eos et ipsa magni beatae."
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "headers": {
              "requestId": {
                "schema": {
                  "type": "string",
                  "example": "cjqml1f2e5ocq2mesej0"
                },
                "example": "cjqml1f2e5ocq2mesej0"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListDqrHistoryResponse"
                },
                "example": {
                  "data": [
                    {
                      "amount": 10000,
                      "closedAt": "2024-06-17T19:17:32+05:30",
                      "createdAt": "2024-05-17T19:17:32+05:30",
                      "expiryDate": "2024-06-17T19:17:32+05:30",
                      "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                      "intentLink": "upi://pay?pa=test-auto-pgruosncak@okokaxis\u0026pn=merchant-4\u0026am=100.00\u0026tr=SU1240659756905923780\u0026tn=sample%20single%20use%20qr\u0026cu=INR\u0026mc=1234",
                      "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                      "merchantVpa": "fastestupi@pineaxis",
                      "metadata": { "InvoiceNumber": "INV-21-12-009" },
                      "minAmount": 1000,
                      "qrCode": "",
                      "reason": {
                        "code": "unable-to-fulfill-request",
                        "desc": "unable-to-fulfill-request",
                        "npciErrCategory": "TD",
                        "npciErrCode": "YG",
                        "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
                        "npciRespCode": "YG",
                        "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)",
                        "setuDescription": "Merchant PSP error",
                        "suggestedAction": "Merchant PSP error"
                      },
                      "refId": "1240689979139556558",
                      "referenceId": "1240689979139556557",
                      "shortLink": "upipay.setu.co/Np3KnBCM8Om0",
                      "status": "active",
                      "transactionNote": "testpay"
                    },
                    {
                      "amount": 10000,
                      "closedAt": "2024-06-17T19:17:32+05:30",
                      "createdAt": "2024-05-17T19:17:32+05:30",
                      "expiryDate": "2024-06-17T19:17:32+05:30",
                      "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                      "intentLink": "upi://pay?pa=test-auto-pgruosncak@okokaxis\u0026pn=merchant-4\u0026am=100.00\u0026tr=SU1240659756905923780\u0026tn=sample%20single%20use%20qr\u0026cu=INR\u0026mc=1234",
                      "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                      "merchantVpa": "fastestupi@pineaxis",
                      "metadata": { "InvoiceNumber": "INV-21-12-009" },
                      "minAmount": 1000,
                      "qrCode": "",
                      "reason": {
                        "code": "unable-to-fulfill-request",
                        "desc": "unable-to-fulfill-request",
                        "npciErrCategory": "TD",
                        "npciErrCode": "YG",
                        "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
                        "npciRespCode": "YG",
                        "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)",
                        "setuDescription": "Merchant PSP error",
                        "suggestedAction": "Merchant PSP error"
                      },
                      "refId": "1240689979139556558",
                      "referenceId": "1240689979139556557",
                      "shortLink": "upipay.setu.co/Np3KnBCM8Om0",
                      "status": "active",
                      "transactionNote": "testpay"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad request: Bad Request response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Forbidden response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not found: Not Found response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error: Internal Server Error response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          }
        },
        "security": [{ "jwt_header_Authorization": [] }]
      }
    },
    "/api/v1/merchants/dqr/{id}": {
      "get": {
        "tags": ["DQR"],
        "summary": "Fetch dynamic QR by id",
        "description": "API to fetch the current status of the dynamic QR using the id of the dqr resource",
        "operationId": "dqr#fetchById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the resource, which is the same the id returned in the Create \u003cresource\u003e API response",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id of the resource, which is the same the id returned in the Create \u003cresource\u003e API response",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          {
            "name": "merchantId",
            "in": "header",
            "description": "Id associated with the merchant on our platform",
            "allowEmptyValue": true,
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id associated with the merchant on our platform",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "headers": {
              "requestId": {
                "schema": {
                  "type": "string",
                  "example": "cjqml1f2e5ocq2mesej0"
                },
                "example": "cjqml1f2e5ocq2mesej0"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FetchDqrByIDResponse"
                },
                "example": {
                  "amount": 10000,
                  "closedAt": "2024-06-17T19:17:32+05:30",
                  "createdAt": "2024-05-17T19:17:32+05:30",
                  "expiryDate": "2024-06-17T19:17:32+05:30",
                  "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "intentLink": "upi://pay?pa=test-auto-pgruosncak@okokaxis\u0026pn=merchant-4\u0026am=100.00\u0026tr=SU1240659756905923780\u0026tn=sample%20single%20use%20qr\u0026cu=INR\u0026mc=1234",
                  "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "merchantVpa": "fastestupi@pineaxis",
                  "metadata": { "InvoiceNumber": "INV-21-12-009" },
                  "minAmount": 1000,
                  "paymentDetails": {
                    "customerAccountType": "SAVINGS",
                    "customerVpa": "test-auto-tyvmm59i9b@okokaxis",
                    "paymentId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                    "paymentStatus": "initiated",
                    "rrn": "124068997913",
                    "txnId": "SETmBZkQOV0M7wyyP1V4PIFhRSzW5eSjmYI"
                  },
                  "qrCode": "",
                  "reason": {
                    "code": "unable-to-fulfill-request",
                    "desc": "unable-to-fulfill-request",
                    "npciErrCategory": "TD",
                    "npciErrCode": "YG",
                    "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
                    "npciRespCode": "YG",
                    "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)",
                    "setuDescription": "Merchant PSP error",
                    "suggestedAction": "Merchant PSP error"
                  },
                  "refId": "1240689979139556558",
                  "referenceId": "1240689979139556557",
                  "shortLink": "upipay.setu.co/Np3KnBCM8Om0",
                  "status": "active",
                  "transactionNote": "testpay"
                }
              }
            }
          },
          "400": {
            "description": "Bad request: Bad Request response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Forbidden response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not found: Not Found response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error: Internal Server Error response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          }
        },
        "security": [{ "jwt_header_Authorization": [] }]
      }
    },
    "/api/v1/merchants/dqr/{id}/expire": {
      "put": {
        "tags": ["DQR"],
        "summary": "Expire dynamic QR by id",
        "description": "API to expire the dynamic QR using the id of the dqr resource",
        "operationId": "dqr#expireById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Nihil voluptatum commodi."
            },
            "example": "Repudiandae nulla odio dolores dolores."
          },
          {
            "name": "merchantId",
            "in": "header",
            "allowEmptyValue": true,
            "required": true,
            "schema": { "type": "string", "example": "Aut enim et." },
            "example": "Dolor et impedit voluptatem aliquid sed omnis."
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "headers": {
              "requestId": {
                "schema": {
                  "type": "string",
                  "example": "cjqml1f2e5ocq2mesej0"
                },
                "example": "cjqml1f2e5ocq2mesej0"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExpireDqrByIDResponse"
                },
                "example": {
                  "amount": 10000,
                  "closedAt": "2024-06-17T19:17:32+05:30",
                  "createdAt": "2024-05-17T19:17:32+05:30",
                  "expiryDate": "2024-06-17T19:17:32+05:30",
                  "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "intentLink": "upi://pay?pa=test-auto-pgruosncak@okokaxis\u0026pn=merchant-4\u0026am=100.00\u0026tr=SU1240659756905923780\u0026tn=sample%20single%20use%20qr\u0026cu=INR\u0026mc=1234",
                  "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "merchantVpa": "fastestupi@pineaxis",
                  "metadata": { "InvoiceNumber": "INV-21-12-009" },
                  "minAmount": 1000,
                  "qrCode": "",
                  "reason": {
                    "code": "unable-to-fulfill-request",
                    "desc": "unable-to-fulfill-request",
                    "npciErrCategory": "TD",
                    "npciErrCode": "YG",
                    "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
                    "npciRespCode": "YG",
                    "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)",
                    "setuDescription": "Merchant PSP error",
                    "suggestedAction": "Merchant PSP error"
                  },
                  "refId": "1240689979139556558",
                  "referenceId": "1240689979139556557",
                  "shortLink": "upipay.setu.co/Np3KnBCM8Om0",
                  "status": "active",
                  "transactionNote": "testpay"
                }
              }
            }
          },
          "400": {
            "description": "Bad request: Bad Request response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Forbidden response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not found: Not Found response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error: Internal Server Error response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          }
        },
        "security": [{ "jwt_header_Authorization": [] }]
      }
    },
    "/api/v1/merchants/mandates": {
      "post": {
        "tags": ["Mandates"],
        "summary": "Create mandate",
        "description": "API to create a mandate request for subscription based payments",
        "operationId": "mandates#create",
        "parameters": [
          {
            "name": "merchantId",
            "in": "header",
            "description": "Id of the merchant who is trying create the mandate",
            "allowEmptyValue": true,
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id of the merchant who is trying create the mandate",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          {
            "name": "mock",
            "in": "header",
            "description": "If true, mock the API call",
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "description": "If true, mock the API call",
              "default": "true",
              "example": "Delectus et."
            },
            "example": "Autem repellat."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CreateRequestBody3" },
              "example": {
                "allowMultipleDebit": true,
                "amount": 1000,
                "amountRule": "max",
                "autoExecute": true,
                "autoPreNotify": true,
                "autoRefundFirstExecutionAmount": false,
                "blockFunds": true,
                "creationMode": "qr",
                "currency": "INR",
                "customerRevocable": false,
                "customerVpa": "ram@axis",
                "endDate": "02012008",
                "expireAfter": 2,
                "firstExecutionAmount": 1000,
                "frequency": "monthly",
                "initiationMode": "01",
                "merchantVpa": "fastestupi@pineaxis",
                "purpose": "14",
                "recurrenceRule": "on",
                "recurrenceValue": 1,
                "referenceId": "ABC1234789",
                "shareToPayee": false,
                "startDate": "02012006",
                "transactionNote": "Transaction note"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created response.",
            "headers": {
              "requestId": {
                "schema": {
                  "type": "string",
                  "example": "cjqml1f2e5ocq2mesej0"
                },
                "example": "cjqml1f2e5ocq2mesej0"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateMandateResponse"
                },
                "example": {
                  "allowMultipleDebit": true,
                  "amount": 1000,
                  "amountRule": "max",
                  "autoExecute": true,
                  "autoPreNotify": true,
                  "autoRefundFirstExecutionAmount": false,
                  "blockFunds": true,
                  "createdAt": "2024-05-17T19:17:32+05:30",
                  "creationMode": "qr",
                  "currency": "INR",
                  "customerRevocable": true,
                  "customerVpa": "ram@axis",
                  "endDate": "02012008",
                  "expireAfter": 2,
                  "firstExecutionAmount": 1000,
                  "frequency": "monthly",
                  "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "initiationMode": "00",
                  "intentLink": "upi://mandate?pa=deku040920232@okokaxis\u0026pn=merchant-1\u0026validitystart=31121995\u0026validityend=31121996\u0026am=100.00\u0026amrule=MAX\u0026recur=one%20time\u0026recurvalue=0\u0026recurtype=on\u0026tr=SETgv8wOOCElAtpzfbAEXqcKvN8QPfunAhI\u0026cu=INR\u0026mc=1234\u0026mode=04\u0026purpose=14\u0026rev=N\u0026share=Y\u0026qrexpire=04092023\u0026block=N\u0026orgid=000000\u0026version=2.0\u0026txnType=create\u0026tid=SETgv8wOOCElAtpzfbAEXqcKvN8QPfunAhI",
                  "maxAmountLimit": 1000,
                  "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "merchantVpa": "fastestupi@pineaxis",
                  "purpose": "14",
                  "qrCode": "",
                  "recurrenceRule": "on",
                  "recurrenceValue": 1,
                  "referenceId": "ABC1234789",
                  "shareToPayee": false,
                  "startDate": "02012006",
                  "status": "pending",
                  "transactionNote": "Transaction note",
                  "txnId": "BTTZrc5gDFkuCr3n3I0ey4aNtzLOLR7K7aR"
                }
              }
            }
          },
          "400": {
            "description": "Bad request: Bad Request response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized: Unauthorized response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not found: Not Found response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error: Internal Server Error response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          }
        },
        "security": [{ "jwt_header_Authorization": [] }]
      }
    },
    "/api/v1/merchants/mandates/history": {
      "get": {
        "tags": ["Mandates"],
        "summary": "List last N mandates",
        "description": "API to fetch the history of mandates",
        "operationId": "mandates#history",
        "parameters": [
          {
            "name": "merchantId",
            "in": "header",
            "description": "Id of the merchant who is trying create the mandate",
            "allowEmptyValue": true,
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id of the merchant who is trying create the mandate",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "headers": {
              "requestId": {
                "schema": {
                  "type": "string",
                  "example": "cjqml1f2e5ocq2mesej0"
                },
                "example": "cjqml1f2e5ocq2mesej0"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListMandateResponse"
                },
                "example": {
                  "data": [
                    {
                      "allowMultipleDebit": true,
                      "amount": 1000,
                      "amountRule": "max",
                      "autoExecute": true,
                      "autoPreNotify": true,
                      "autoRefundFirstExecutionAmount": false,
                      "blockFunds": true,
                      "createdAt": "2024-05-17T19:17:32+05:30",
                      "creationMode": "qr",
                      "currency": "INR",
                      "customerRevocable": true,
                      "customerVpa": "ram@axis",
                      "endDate": "02012008",
                      "expireAfter": 2,
                      "firstExecutionAmount": 1000,
                      "frequency": "monthly",
                      "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                      "initiationMode": "01",
                      "intentLink": "upi://mandate?pa=deku040920232@okokaxis\u0026pn=merchant-1\u0026validitystart=31121995\u0026validityend=31121996\u0026am=100.00\u0026amrule=MAX\u0026recur=one%20time\u0026recurvalue=0\u0026recurtype=on\u0026tr=SETgv8wOOCElAtpzfbAEXqcKvN8QPfunAhI\u0026cu=INR\u0026mc=1234\u0026mode=04\u0026purpose=14\u0026rev=N\u0026share=Y\u0026qrexpire=04092023\u0026block=N\u0026orgid=000000\u0026version=2.0\u0026txnType=create\u0026tid=SETgv8wOOCElAtpzfbAEXqcKvN8QPfunAhI",
                      "maxAmountLimit": 1000,
                      "merchantId": "Sit explicabo.",
                      "merchantVpa": "fastestupi@pineaxis",
                      "primaryAccount": {
                        "IFSC": "SBIN0000001",
                        "encryptedAccountName": "5e884898da28047151d0e56f8dc629277",
                        "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                        "hashedAccountName": "5e884898da28047151d0e56f8dc629277",
                        "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                        "maskedAccountName": "R*M*E*S*",
                        "maskedAccountNumber": "**** **** **** 7890"
                      },
                      "productConfigId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                      "purpose": "14",
                      "qrCode": "",
                      "reason": {
                        "code": "unable-to-fulfill-request",
                        "desc": "unable-to-fulfill-request",
                        "npciErrCategory": "TD",
                        "npciErrCode": "YG",
                        "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
                        "npciRespCode": "YG",
                        "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)",
                        "setuDescription": "Merchant PSP error",
                        "suggestedAction": "Merchant PSP error"
                      },
                      "recurrenceRule": "on",
                      "recurrenceValue": 1,
                      "referenceId": "ABC1234789",
                      "secondaryAccounts": [
                        {
                          "IFSC": "SBIN0000001",
                          "encryptedAccountName": "5e884898da28047151d0e56f8dc629277",
                          "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                          "hashedAccountName": "5e884898da28047151d0e56f8dc629277",
                          "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                          "maskedAccountName": "R*M*E*S*",
                          "maskedAccountNumber": "**** **** **** 7890"
                        },
                        {
                          "IFSC": "SBIN0000001",
                          "encryptedAccountName": "5e884898da28047151d0e56f8dc629277",
                          "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                          "hashedAccountName": "5e884898da28047151d0e56f8dc629277",
                          "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                          "maskedAccountName": "R*M*E*S*",
                          "maskedAccountNumber": "**** **** **** 7890"
                        }
                      ],
                      "shareToPayee": false,
                      "startDate": "02012006",
                      "status": "pending",
                      "transactionNote": "Transaction note",
                      "txnId": "BTTZrc5gDFkuCr3n3I0ey4aNtzLOLR7K7aR",
                      "umn": "c27f5fc30d344e9594fce0afa34f8859@mypsp"
                    },
                    {
                      "allowMultipleDebit": true,
                      "amount": 1000,
                      "amountRule": "max",
                      "autoExecute": true,
                      "autoPreNotify": true,
                      "autoRefundFirstExecutionAmount": false,
                      "blockFunds": true,
                      "createdAt": "2024-05-17T19:17:32+05:30",
                      "creationMode": "qr",
                      "currency": "INR",
                      "customerRevocable": true,
                      "customerVpa": "ram@axis",
                      "endDate": "02012008",
                      "expireAfter": 2,
                      "firstExecutionAmount": 1000,
                      "frequency": "monthly",
                      "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                      "initiationMode": "01",
                      "intentLink": "upi://mandate?pa=deku040920232@okokaxis\u0026pn=merchant-1\u0026validitystart=31121995\u0026validityend=31121996\u0026am=100.00\u0026amrule=MAX\u0026recur=one%20time\u0026recurvalue=0\u0026recurtype=on\u0026tr=SETgv8wOOCElAtpzfbAEXqcKvN8QPfunAhI\u0026cu=INR\u0026mc=1234\u0026mode=04\u0026purpose=14\u0026rev=N\u0026share=Y\u0026qrexpire=04092023\u0026block=N\u0026orgid=000000\u0026version=2.0\u0026txnType=create\u0026tid=SETgv8wOOCElAtpzfbAEXqcKvN8QPfunAhI",
                      "maxAmountLimit": 1000,
                      "merchantId": "Sit explicabo.",
                      "merchantVpa": "fastestupi@pineaxis",
                      "primaryAccount": {
                        "IFSC": "SBIN0000001",
                        "encryptedAccountName": "5e884898da28047151d0e56f8dc629277",
                        "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                        "hashedAccountName": "5e884898da28047151d0e56f8dc629277",
                        "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                        "maskedAccountName": "R*M*E*S*",
                        "maskedAccountNumber": "**** **** **** 7890"
                      },
                      "productConfigId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                      "purpose": "14",
                      "qrCode": "",
                      "reason": {
                        "code": "unable-to-fulfill-request",
                        "desc": "unable-to-fulfill-request",
                        "npciErrCategory": "TD",
                        "npciErrCode": "YG",
                        "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
                        "npciRespCode": "YG",
                        "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)",
                        "setuDescription": "Merchant PSP error",
                        "suggestedAction": "Merchant PSP error"
                      },
                      "recurrenceRule": "on",
                      "recurrenceValue": 1,
                      "referenceId": "ABC1234789",
                      "secondaryAccounts": [
                        {
                          "IFSC": "SBIN0000001",
                          "encryptedAccountName": "5e884898da28047151d0e56f8dc629277",
                          "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                          "hashedAccountName": "5e884898da28047151d0e56f8dc629277",
                          "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                          "maskedAccountName": "R*M*E*S*",
                          "maskedAccountNumber": "**** **** **** 7890"
                        },
                        {
                          "IFSC": "SBIN0000001",
                          "encryptedAccountName": "5e884898da28047151d0e56f8dc629277",
                          "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                          "hashedAccountName": "5e884898da28047151d0e56f8dc629277",
                          "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                          "maskedAccountName": "R*M*E*S*",
                          "maskedAccountNumber": "**** **** **** 7890"
                        }
                      ],
                      "shareToPayee": false,
                      "startDate": "02012006",
                      "status": "pending",
                      "transactionNote": "Transaction note",
                      "txnId": "BTTZrc5gDFkuCr3n3I0ey4aNtzLOLR7K7aR",
                      "umn": "c27f5fc30d344e9594fce0afa34f8859@mypsp"
                    },
                    {
                      "allowMultipleDebit": true,
                      "amount": 1000,
                      "amountRule": "max",
                      "autoExecute": true,
                      "autoPreNotify": true,
                      "autoRefundFirstExecutionAmount": false,
                      "blockFunds": true,
                      "createdAt": "2024-05-17T19:17:32+05:30",
                      "creationMode": "qr",
                      "currency": "INR",
                      "customerRevocable": true,
                      "customerVpa": "ram@axis",
                      "endDate": "02012008",
                      "expireAfter": 2,
                      "firstExecutionAmount": 1000,
                      "frequency": "monthly",
                      "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                      "initiationMode": "01",
                      "intentLink": "upi://mandate?pa=deku040920232@okokaxis\u0026pn=merchant-1\u0026validitystart=31121995\u0026validityend=31121996\u0026am=100.00\u0026amrule=MAX\u0026recur=one%20time\u0026recurvalue=0\u0026recurtype=on\u0026tr=SETgv8wOOCElAtpzfbAEXqcKvN8QPfunAhI\u0026cu=INR\u0026mc=1234\u0026mode=04\u0026purpose=14\u0026rev=N\u0026share=Y\u0026qrexpire=04092023\u0026block=N\u0026orgid=000000\u0026version=2.0\u0026txnType=create\u0026tid=SETgv8wOOCElAtpzfbAEXqcKvN8QPfunAhI",
                      "maxAmountLimit": 1000,
                      "merchantId": "Sit explicabo.",
                      "merchantVpa": "fastestupi@pineaxis",
                      "primaryAccount": {
                        "IFSC": "SBIN0000001",
                        "encryptedAccountName": "5e884898da28047151d0e56f8dc629277",
                        "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                        "hashedAccountName": "5e884898da28047151d0e56f8dc629277",
                        "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                        "maskedAccountName": "R*M*E*S*",
                        "maskedAccountNumber": "**** **** **** 7890"
                      },
                      "productConfigId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                      "purpose": "14",
                      "qrCode": "",
                      "reason": {
                        "code": "unable-to-fulfill-request",
                        "desc": "unable-to-fulfill-request",
                        "npciErrCategory": "TD",
                        "npciErrCode": "YG",
                        "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
                        "npciRespCode": "YG",
                        "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)",
                        "setuDescription": "Merchant PSP error",
                        "suggestedAction": "Merchant PSP error"
                      },
                      "recurrenceRule": "on",
                      "recurrenceValue": 1,
                      "referenceId": "ABC1234789",
                      "secondaryAccounts": [
                        {
                          "IFSC": "SBIN0000001",
                          "encryptedAccountName": "5e884898da28047151d0e56f8dc629277",
                          "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                          "hashedAccountName": "5e884898da28047151d0e56f8dc629277",
                          "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                          "maskedAccountName": "R*M*E*S*",
                          "maskedAccountNumber": "**** **** **** 7890"
                        },
                        {
                          "IFSC": "SBIN0000001",
                          "encryptedAccountName": "5e884898da28047151d0e56f8dc629277",
                          "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                          "hashedAccountName": "5e884898da28047151d0e56f8dc629277",
                          "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                          "maskedAccountName": "R*M*E*S*",
                          "maskedAccountNumber": "**** **** **** 7890"
                        }
                      ],
                      "shareToPayee": false,
                      "startDate": "02012006",
                      "status": "pending",
                      "transactionNote": "Transaction note",
                      "txnId": "BTTZrc5gDFkuCr3n3I0ey4aNtzLOLR7K7aR",
                      "umn": "c27f5fc30d344e9594fce0afa34f8859@mypsp"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad request: Bad Request response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized: Unauthorized response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not found: Not Found response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error: Internal Server Error response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          }
        },
        "security": [{ "jwt_header_Authorization": [] }]
      }
    },
    "/api/v1/merchants/mandates/as-presented": {
      "post": {
        "tags": ["Mandates"],
        "summary": "Create as presented mandate",
        "description": "API to create a mandate request for subscription based payments",
        "operationId": "as-presented#create",
        "parameters": [
          {
            "name": "merchantId",
            "in": "header",
            "description": "ID of the merchant who is trying create the mandate",
            "allowEmptyValue": true,
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of the merchant who is trying create the mandate",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRequestBodyAsPresented"
              },
              "example": {
                "amount": 100,
                "merchantVpa": "merchant@setuaxis"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created response.",
            "headers": {
              "requestId": {
                "schema": {
                  "type": "string",
                  "example": "cjqml1f2e5ocq2mesej0"
                },
                "example": "cjqml1f2e5ocq2mesej0"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateMandateResponse"
                },
                "example": {
                  "allowMultipleDebit": true,
                  "amount": 1000,
                  "amountRule": "max",
                  "autoExecute": true,
                  "autoPreNotify": true,
                  "blockFunds": true,
                  "createdAt": "2024-05-17T19:17:32+05:30",
                  "creationMode": "qr",
                  "currency": "INR",
                  "customerRevocable": true,
                  "customerVpa": "ram@axis",
                  "endDate": "02012008",
                  "expireAfter": 2,
                  "firstExecutionAmount": 1000,
                  "frequency": "monthly",
                  "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "initiationMode": "04",
                  "intentLink": "upi://mandate?pa=deku040920232@okokaxis\u0026pn=merchant-1\u0026validitystart=31121995\u0026validityend=31121996\u0026am=100.00\u0026amrule=MAX\u0026recur=one%20time\u0026recurvalue=0\u0026recurtype=on\u0026tr=SETgv8wOOCElAtpzfbAEXqcKvN8QPfunAhI\u0026cu=INR\u0026mc=1234\u0026mode=04\u0026purpose=14\u0026rev=N\u0026share=Y\u0026qrexpire=04092023\u0026block=N\u0026orgid=000000\u0026version=2.0\u0026txnType=create\u0026tid=SETgv8wOOCElAtpzfbAEXqcKvN8QPfunAhI",
                  "maxAmountLimit": 1000,
                  "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "merchantVpa": "fastestupi@pineaxis",
                  "purpose": "14",
                  "qrCode": "",
                  "recurrenceRule": "on",
                  "recurrenceValue": 1,
                  "referenceId": "ABC1234789",
                  "shareToPayee": false,
                  "startDate": "02012006",
                  "status": "pending",
                  "transactionNote": "Transaction note",
                  "txnId": "BTTZrc5gDFkuCr3n3I0ey4aNtzLOLR7K7aR"
                }
              }
            }
          },
          "400": {
            "description": "Bad request: Bad Request response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized: Unauthorized response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not found: Not Found response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error: Internal Server Error response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt_header_Authorization": []
          }
        ]
      }
    },
    "/api/v1/merchants/mandates/as-presented/tpv": {
      "post": {
        "tags": ["Mandates"],
        "summary": "Create as presented mandate with TPV",
        "description": "API to create a mandate request for subscription based payments with TPV",
        "operationId": "as-presented-tpv#create",
        "parameters": [
          {
            "name": "merchantId",
            "in": "header",
            "description": "ID of the merchant who is trying create the mandate",
            "allowEmptyValue": true,
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of the merchant who is trying create the mandate",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRequestBodyAsPresentedTPV"
              },
              "example": {
                "amount": 100,
                "merchantVpa": "merchant@setuaxis",
                "primaryAccount": {
                  "accountNumber": "1234567890"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created response.",
            "headers": {
              "requestId": {
                "schema": {
                  "type": "string",
                  "example": "cjqml1f2e5ocq2mesej0"
                },
                "example": "cjqml1f2e5ocq2mesej0"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateMandateResponse"
                },
                "example": {
                  "allowMultipleDebit": true,
                  "amount": 1000,
                  "amountRule": "max",
                  "autoExecute": true,
                  "autoPreNotify": true,
                  "blockFunds": true,
                  "createdAt": "2024-05-17T19:17:32+05:30",
                  "creationMode": "qr",
                  "currency": "INR",
                  "customerRevocable": true,
                  "customerVpa": "ram@axis",
                  "endDate": "02012008",
                  "expireAfter": 2,
                  "firstExecutionAmount": 1000,
                  "frequency": "monthly",
                  "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "initiationMode": "04",
                  "intentLink": "upi://mandate?pa=deku040920232@okokaxis\u0026pn=merchant-1\u0026validitystart=31121995\u0026validityend=31121996\u0026am=100.00\u0026amrule=MAX\u0026recur=one%20time\u0026recurvalue=0\u0026recurtype=on\u0026tr=SETgv8wOOCElAtpzfbAEXqcKvN8QPfunAhI\u0026cu=INR\u0026mc=1234\u0026mode=04\u0026purpose=14\u0026rev=N\u0026share=Y\u0026qrexpire=04092023\u0026block=N\u0026orgid=000000\u0026version=2.0\u0026txnType=create\u0026tid=SETgv8wOOCElAtpzfbAEXqcKvN8QPfunAhI",
                  "maxAmountLimit": 1000,
                  "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "merchantVpa": "fastestupi@pineaxis",
                  "purpose": "14",
                  "qrCode": "",
                  "recurrenceRule": "on",
                  "recurrenceValue": 1,
                  "referenceId": "ABC1234789",
                  "shareToPayee": false,
                  "startDate": "02012006",
                  "status": "pending",
                  "transactionNote": "Transaction note",
                  "txnId": "BTTZrc5gDFkuCr3n3I0ey4aNtzLOLR7K7aR"
                }
              }
            }
          },
          "400": {
            "description": "Bad request: Bad Request response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized: Unauthorized response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not found: Not Found response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error: Internal Server Error response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt_header_Authorization": []
          }
        ]
      }
    },
    "/api/v1/merchants/mandates/periodic": {
      "post": {
        "tags": ["Mandates"],
        "summary": "Create periodic mandate",
        "description": "API to create a mandate request for subscription based payments",
        "operationId": "periodic#create",
        "parameters": [
          {
            "name": "merchantId",
            "in": "header",
            "description": "Id of the merchant who is trying create the mandate",
            "allowEmptyValue": true,
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id of the merchant who is trying create the mandate",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRequestBodyPeriodic"
              },
              "example": {
                "amount": 100,
                "merchantVpa": "local.kkco1@pineaxis",
                "frequency": "daily",
                "recurrenceValue": 0
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created response.",
            "headers": {
              "requestId": {
                "schema": {
                  "type": "string",
                  "example": "cjqml1f2e5ocq2mesej0"
                },
                "example": "cjqml1f2e5ocq2mesej0"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateMandateResponse"
                },
                "example": {
                  "allowMultipleDebit": true,
                  "amount": 1000,
                  "amountRule": "max",
                  "autoExecute": true,
                  "autoPreNotify": true,
                  "blockFunds": true,
                  "createdAt": "2024-05-17T19:17:32+05:30",
                  "creationMode": "qr",
                  "currency": "INR",
                  "customerRevocable": true,
                  "customerVpa": "ram@axis",
                  "endDate": "02012008",
                  "expireAfter": 2,
                  "firstExecutionAmount": 1000,
                  "frequency": "monthly",
                  "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "initiationMode": "01",
                  "intentLink": "upi://mandate?pa=deku040920232@pineaxis\u0026pn=merchant-1\u0026validitystart=31121995\u0026validityend=31121996\u0026am=100.00\u0026amrule=MAX\u0026recur=one%20time\u0026recurvalue=0\u0026recurtype=on\u0026tr=SETgv8wOOCElAtpzfbAEXqcKvN8QPfunAhI\u0026cu=INR\u0026mc=1234\u0026mode=04\u0026purpose=14\u0026rev=N\u0026share=Y\u0026qrexpire=04092023\u0026block=N\u0026orgid=000000\u0026version=2.0\u0026txnType=create\u0026tid=SETgv8wOOCElAtpzfbAEXqcKvN8QPfunAhI",
                  "maxAmountLimit": 1000,
                  "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "merchantVpa": "fastestupi@pineaxis",
                  "purpose": "14",
                  "qrCode": "",
                  "recurrenceRule": "on",
                  "recurrenceValue": 1,
                  "referenceId": "ABC1234789",
                  "shareToPayee": false,
                  "startDate": "02012006",
                  "status": "pending",
                  "transactionNote": "Transaction note",
                  "txnId": "BTTZrc5gDFkuCr3n3I0ey4aNtzLOLR7K7aR"
                }
              }
            }
          },
          "400": {
            "description": "Bad request: Bad Request response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized: Unauthorized response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not found: Not Found response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error: Internal Server Error response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          }
        },
        "security": [{ "jwt_header_Authorization": [] }]
      }
    },
    "/api/v1/merchants/mandates/periodic-tpv": {
      "post": {
        "tags": ["Mandates"],
        "summary": "Create periodic mandate with TPV",
        "description": "API to create a mandate request for subscription based payments",
        "operationId": "periodic-tpv#create",
        "parameters": [
          {
            "name": "merchantId",
            "in": "header",
            "description": "Id of the merchant who is trying create the mandate",
            "allowEmptyValue": true,
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id of the merchant who is trying create the mandate",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRequestBodyPeriodic"
              },
              "example": {
                "amount": 100,
                "merchantVpa": "local.kkco1@pineaxis",
                "frequency": "daily",
                "recurrenceValue": 0
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created response.",
            "headers": {
              "requestId": {
                "schema": {
                  "type": "string",
                  "example": "cjqml1f2e5ocq2mesej0"
                },
                "example": "cjqml1f2e5ocq2mesej0"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateMandateResponse"
                },
                "example": {
                  "allowMultipleDebit": true,
                  "amount": 1000,
                  "amountRule": "max",
                  "autoExecute": true,
                  "autoPreNotify": true,
                  "blockFunds": true,
                  "createdAt": "2024-05-17T19:17:32+05:30",
                  "creationMode": "qr",
                  "currency": "INR",
                  "customerRevocable": true,
                  "customerVpa": "ram@axis",
                  "endDate": "02012008",
                  "expireAfter": 2,
                  "firstExecutionAmount": 1000,
                  "frequency": "monthly",
                  "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "initiationMode": "01",
                  "intentLink": "upi://mandate?pa=deku040920232@pineaxis\u0026pn=merchant-1\u0026validitystart=31121995\u0026validityend=31121996\u0026am=100.00\u0026amrule=MAX\u0026recur=one%20time\u0026recurvalue=0\u0026recurtype=on\u0026tr=SETgv8wOOCElAtpzfbAEXqcKvN8QPfunAhI\u0026cu=INR\u0026mc=1234\u0026mode=04\u0026purpose=14\u0026rev=N\u0026share=Y\u0026qrexpire=04092023\u0026block=N\u0026orgid=000000\u0026version=2.0\u0026txnType=create\u0026tid=SETgv8wOOCElAtpzfbAEXqcKvN8QPfunAhI",
                  "maxAmountLimit": 1000,
                  "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "merchantVpa": "fastestupi@pineaxis",
                  "purpose": "14",
                  "qrCode": "",
                  "recurrenceRule": "on",
                  "recurrenceValue": 1,
                  "referenceId": "ABC1234789",
                  "shareToPayee": false,
                  "startDate": "02012006",
                  "status": "pending",
                  "transactionNote": "Transaction note",
                  "txnId": "BTTZrc5gDFkuCr3n3I0ey4aNtzLOLR7K7aR"
                }
              }
            }
          },
          "400": {
            "description": "Bad request: Bad Request response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized: Unauthorized response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not found: Not Found response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error: Internal Server Error response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          }
        },
        "security": [{ "jwt_header_Authorization": [] }]
      }
    },
    "/api/v1/merchants/mandates/reserve": {
      "post": {
        "tags": ["Mandates"],
        "summary": "Create one time mandate",
        "description": "API to create a mandate request for subscription based payments",
        "operationId": "one-time#create",
        "parameters": [
          {
            "name": "merchantId",
            "in": "header",
            "description": "Id of the merchant who is trying create the mandate",
            "allowEmptyValue": true,
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id of the merchant who is trying create the mandate",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRequestBodyOneTime"
              },
              "example": {
                "amount": 100,
                "merchantVpa": "local.kkco1@pineaxis",
                "frequency": "daily",
                "recurrenceValue": 0
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created response.",
            "headers": {
              "requestId": {
                "schema": {
                  "type": "string",
                  "example": "cjqml1f2e5ocq2mesej0"
                },
                "example": "cjqml1f2e5ocq2mesej0"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateMandateResponse"
                },
                "example": {
                  "allowMultipleDebit": true,
                  "amount": 1000,
                  "amountRule": "max",
                  "autoExecute": true,
                  "autoPreNotify": true,
                  "blockFunds": true,
                  "createdAt": "2024-05-17T19:17:32+05:30",
                  "creationMode": "qr",
                  "currency": "INR",
                  "customerRevocable": true,
                  "customerVpa": "ram@axis",
                  "endDate": "02012008",
                  "expireAfter": 2,
                  "firstExecutionAmount": 1000,
                  "frequency": "monthly",
                  "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "initiationMode": "01",
                  "intentLink": "upi://mandate?pa=deku040920232@pineaxis\u0026pn=merchant-1\u0026validitystart=31121995\u0026validityend=31121996\u0026am=100.00\u0026amrule=MAX\u0026recur=one%20time\u0026recurvalue=0\u0026recurtype=on\u0026tr=SETgv8wOOCElAtpzfbAEXqcKvN8QPfunAhI\u0026cu=INR\u0026mc=1234\u0026mode=04\u0026purpose=14\u0026rev=N\u0026share=Y\u0026qrexpire=04092023\u0026block=N\u0026orgid=000000\u0026version=2.0\u0026txnType=create\u0026tid=SETgv8wOOCElAtpzfbAEXqcKvN8QPfunAhI",
                  "maxAmountLimit": 1000,
                  "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "merchantVpa": "fastestupi@pineaxis",
                  "purpose": "14",
                  "qrCode": "",
                  "recurrenceRule": "on",
                  "recurrenceValue": 1,
                  "referenceId": "ABC1234789",
                  "shareToPayee": false,
                  "startDate": "02012006",
                  "status": "pending",
                  "transactionNote": "Transaction note",
                  "txnId": "BTTZrc5gDFkuCr3n3I0ey4aNtzLOLR7K7aR"
                }
              }
            }
          },
          "400": {
            "description": "Bad request: Bad Request response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized: Unauthorized response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not found: Not Found response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error: Internal Server Error response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          }
        },
        "security": [{ "jwt_header_Authorization": [] }]
      }
    },
    "/api/v1/merchants/mandates/reserve/tpv": {
      "post": {
        "tags": ["Mandates"],
        "summary": "Create one time mandate",
        "description": "API to create a mandate request for subscription based payments",
        "operationId": "one-time#create",
        "parameters": [
          {
            "name": "merchantId",
            "in": "header",
            "description": "Id of the merchant who is trying create the mandate",
            "allowEmptyValue": true,
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id of the merchant who is trying create the mandate",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRequestBodyOneTime"
              },
              "example": {
                "amount": 100,
                "merchantVpa": "local.kkco1@pineaxis",
                "frequency": "daily",
                "recurrenceValue": 0
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created response.",
            "headers": {
              "requestId": {
                "schema": {
                  "type": "string",
                  "example": "cjqml1f2e5ocq2mesej0"
                },
                "example": "cjqml1f2e5ocq2mesej0"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateMandateResponse"
                },
                "example": {
                  "allowMultipleDebit": true,
                  "amount": 1000,
                  "amountRule": "max",
                  "autoExecute": true,
                  "autoPreNotify": true,
                  "blockFunds": true,
                  "createdAt": "2024-05-17T19:17:32+05:30",
                  "creationMode": "qr",
                  "currency": "INR",
                  "customerRevocable": true,
                  "customerVpa": "ram@axis",
                  "endDate": "02012008",
                  "expireAfter": 2,
                  "firstExecutionAmount": 1000,
                  "frequency": "monthly",
                  "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "initiationMode": "01",
                  "intentLink": "upi://mandate?pa=deku040920232@pineaxis\u0026pn=merchant-1\u0026validitystart=31121995\u0026validityend=31121996\u0026am=100.00\u0026amrule=MAX\u0026recur=one%20time\u0026recurvalue=0\u0026recurtype=on\u0026tr=SETgv8wOOCElAtpzfbAEXqcKvN8QPfunAhI\u0026cu=INR\u0026mc=1234\u0026mode=04\u0026purpose=14\u0026rev=N\u0026share=Y\u0026qrexpire=04092023\u0026block=N\u0026orgid=000000\u0026version=2.0\u0026txnType=create\u0026tid=SETgv8wOOCElAtpzfbAEXqcKvN8QPfunAhI",
                  "maxAmountLimit": 1000,
                  "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "merchantVpa": "fastestupi@pineaxis",
                  "purpose": "14",
                  "qrCode": "",
                  "recurrenceRule": "on",
                  "recurrenceValue": 1,
                  "referenceId": "ABC1234789",
                  "shareToPayee": false,
                  "startDate": "02012006",
                  "status": "pending",
                  "transactionNote": "Transaction note",
                  "txnId": "BTTZrc5gDFkuCr3n3I0ey4aNtzLOLR7K7aR"
                }
              }
            }
          },
          "400": {
            "description": "Bad request: Bad Request response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized: Unauthorized response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not found: Not Found response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error: Internal Server Error response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          }
        },
        "security": [{ "jwt_header_Authorization": [] }]
      }
    },
    "/api/v1/merchants/mandates/reserve-plus": {
      "post": {
        "tags": ["Mandates"],
        "summary": "Create one time mandate",
        "description": "API to create a mandate request for subscription based payments",
        "operationId": "one-time#create",
        "parameters": [
          {
            "name": "merchantId",
            "in": "header",
            "description": "Id of the merchant who is trying create the mandate",
            "allowEmptyValue": true,
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id of the merchant who is trying create the mandate",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRequestBodyOneTime"
              },
              "example": {
                "amount": 100,
                "merchantVpa": "local.kkco1@pineaxis",
                "frequency": "daily",
                "recurrenceValue": 0
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created response.",
            "headers": {
              "requestId": {
                "schema": {
                  "type": "string",
                  "example": "cjqml1f2e5ocq2mesej0"
                },
                "example": "cjqml1f2e5ocq2mesej0"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateMandateResponse"
                },
                "example": {
                  "allowMultipleDebit": true,
                  "amount": 1000,
                  "amountRule": "max",
                  "autoExecute": true,
                  "autoPreNotify": true,
                  "blockFunds": true,
                  "createdAt": "2024-05-17T19:17:32+05:30",
                  "creationMode": "qr",
                  "currency": "INR",
                  "customerRevocable": true,
                  "customerVpa": "ram@axis",
                  "endDate": "02012008",
                  "expireAfter": 2,
                  "firstExecutionAmount": 1000,
                  "frequency": "monthly",
                  "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "initiationMode": "01",
                  "intentLink": "upi://mandate?pa=deku040920232@pineaxis\u0026pn=merchant-1\u0026validitystart=31121995\u0026validityend=31121996\u0026am=100.00\u0026amrule=MAX\u0026recur=one%20time\u0026recurvalue=0\u0026recurtype=on\u0026tr=SETgv8wOOCElAtpzfbAEXqcKvN8QPfunAhI\u0026cu=INR\u0026mc=1234\u0026mode=04\u0026purpose=14\u0026rev=N\u0026share=Y\u0026qrexpire=04092023\u0026block=N\u0026orgid=000000\u0026version=2.0\u0026txnType=create\u0026tid=SETgv8wOOCElAtpzfbAEXqcKvN8QPfunAhI",
                  "maxAmountLimit": 1000,
                  "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "merchantVpa": "fastestupi@pineaxis",
                  "purpose": "14",
                  "qrCode": "",
                  "recurrenceRule": "on",
                  "recurrenceValue": 1,
                  "referenceId": "ABC1234789",
                  "shareToPayee": false,
                  "startDate": "02012006",
                  "status": "pending",
                  "transactionNote": "Transaction note",
                  "txnId": "BTTZrc5gDFkuCr3n3I0ey4aNtzLOLR7K7aR"
                }
              }
            }
          },
          "400": {
            "description": "Bad request: Bad Request response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized: Unauthorized response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not found: Not Found response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error: Internal Server Error response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          }
        },
        "security": [{ "jwt_header_Authorization": [] }]
      }
    },
    "/api/v1/merchants/mandates/reserve-plus/tpv": {
      "post": {
        "tags": ["Mandates"],
        "summary": "Create one time mandate",
        "description": "API to create a mandate request for subscription based payments",
        "operationId": "one-time#create",
        "parameters": [
          {
            "name": "merchantId",
            "in": "header",
            "description": "Id of the merchant who is trying create the mandate",
            "allowEmptyValue": true,
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id of the merchant who is trying create the mandate",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRequestBodyOneTime"
              },
              "example": {
                "amount": 100,
                "merchantVpa": "local.kkco1@pineaxis",
                "frequency": "daily",
                "recurrenceValue": 0
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created response.",
            "headers": {
              "requestId": {
                "schema": {
                  "type": "string",
                  "example": "cjqml1f2e5ocq2mesej0"
                },
                "example": "cjqml1f2e5ocq2mesej0"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateMandateResponse"
                },
                "example": {
                  "allowMultipleDebit": true,
                  "amount": 1000,
                  "amountRule": "max",
                  "autoExecute": true,
                  "autoPreNotify": true,
                  "blockFunds": true,
                  "createdAt": "2024-05-17T19:17:32+05:30",
                  "creationMode": "qr",
                  "currency": "INR",
                  "customerRevocable": true,
                  "customerVpa": "ram@axis",
                  "endDate": "02012008",
                  "expireAfter": 2,
                  "firstExecutionAmount": 1000,
                  "frequency": "monthly",
                  "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "initiationMode": "01",
                  "intentLink": "upi://mandate?pa=deku040920232@pineaxis\u0026pn=merchant-1\u0026validitystart=31121995\u0026validityend=31121996\u0026am=100.00\u0026amrule=MAX\u0026recur=one%20time\u0026recurvalue=0\u0026recurtype=on\u0026tr=SETgv8wOOCElAtpzfbAEXqcKvN8QPfunAhI\u0026cu=INR\u0026mc=1234\u0026mode=04\u0026purpose=14\u0026rev=N\u0026share=Y\u0026qrexpire=04092023\u0026block=N\u0026orgid=000000\u0026version=2.0\u0026txnType=create\u0026tid=SETgv8wOOCElAtpzfbAEXqcKvN8QPfunAhI",
                  "maxAmountLimit": 1000,
                  "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "merchantVpa": "fastestupi@pineaxis",
                  "purpose": "14",
                  "qrCode": "",
                  "recurrenceRule": "on",
                  "recurrenceValue": 1,
                  "referenceId": "ABC1234789",
                  "shareToPayee": false,
                  "startDate": "02012006",
                  "status": "pending",
                  "transactionNote": "Transaction note",
                  "txnId": "BTTZrc5gDFkuCr3n3I0ey4aNtzLOLR7K7aR"
                }
              }
            }
          },
          "400": {
            "description": "Bad request: Bad Request response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized: Unauthorized response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not found: Not Found response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error: Internal Server Error response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          }
        },
        "security": [{ "jwt_header_Authorization": [] }]
      }
    },
    "/api/v1/merchants/mandates/mock": {
      "post": {
        "tags": ["Mandates"],
        "summary": "Mock mandate",
        "description": "API to mock different mandate operations",
        "operationId": "mandates#mockMandate",
        "parameters": [
          {
            "name": "merchantId",
            "in": "header",
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MockMandateRequestBody"
              },
              "example": {
                "failureType": "type-1",
                "id": "01J54G9QCFW4FE6JXKJ9QK3FTD",
                "operation": "create",
                "status": "success"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MockMandateResponse"
                },
                "example": { "status": "success" }
              }
            }
          },
          "400": {
            "description": "Bad request: Bad Request response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized: Unauthorized response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not found: Not Found response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error: Internal Server Error response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          }
        },
        "security": [{ "jwt_header_Authorization": [] }]
      }
    },
    "/api/v1/merchants/mandates/simulate": {
      "post": {
        "tags": ["Mandates"],
        "summary": "Get upcoming mandate execution / pre debit notification dates",
        "description": "API to get mandate execution / pre debit notification dates",
        "operationId": "mandates#calculateExecutionDates",
        "parameters": [
          {
            "name": "merchantId",
            "in": "header",
            "description": "Id of the merchant who is trying create the mandate",
            "allowEmptyValue": true,
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id of the merchant who is trying create the mandate",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CalculateExecutionDatesRequestBody"
              },
              "example": {
                "Mock": "Aliquam quia et velit.",
                "createdAt": "2023-09-04 12:08:20.202644 +0530 IST",
                "cycles": 5439924826833786546,
                "endDate": "02012008",
                "firstExecutionAmount": 1000,
                "frequency": "monthly",
                "recurrenceValue": 1,
                "startDate": "02012006"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created response.",
            "headers": {
              "requestId": {
                "schema": {
                  "type": "string",
                  "example": "cjqml1f2e5ocq2mesej0"
                },
                "example": "cjqml1f2e5ocq2mesej0"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CalculateExecutionDatesResponse"
                },
                "example": {
                  "createdAt": "2023-09-04 12:08:20.202644 +0530 IST",
                  "cycles": 6947550725479039138,
                  "dates": [
                    {
                      "executionDate": "2023-09-06 12:08:20.202644 +0530 IST",
                      "preDebitNotificationDate": "2023-09-04 12:08:20.202644 +0530 IST"
                    },
                    {
                      "executionDate": "2023-09-06 12:08:20.202644 +0530 IST",
                      "preDebitNotificationDate": "2023-09-04 12:08:20.202644 +0530 IST"
                    }
                  ],
                  "endDate": "02012008",
                  "firstExecutionAmount": 1000,
                  "frequency": "monthly",
                  "recurrenceValue": 1,
                  "startDate": "02012006"
                }
              }
            }
          },
          "400": {
            "description": "Bad request: Bad Request response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized: Unauthorized response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not found: Not Found response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error: Internal Server Error response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          }
        },
        "security": [{ "jwt_header_Authorization": [] }]
      }
    },
    "/api/v1/merchants/mandates/tpv": {
      "post": {
        "tags": ["Mandates"],
        "summary": "Create mandate - TPV",
        "description": "API to create a mandate request for subscription based payments",
        "operationId": "mandates#createTPV",
        "parameters": [
          {
            "name": "merchantId",
            "in": "header",
            "description": "Id of the merchant who is trying create the mandate",
            "allowEmptyValue": true,
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id of the merchant who is trying create the mandate",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          {
            "name": "mock",
            "in": "header",
            "description": "If true, mock the API call",
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "description": "If true, mock the API call",
              "default": "true",
              "example": "Sit quo quaerat."
            },
            "example": "Voluptas sint similique modi adipisci aperiam."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CreateTPVRequestBody" },
              "example": {
                "allowMultipleDebit": true,
                "amount": 1000,
                "amountRule": "max",
                "autoExecute": true,
                "autoPreNotify": true,
                "blockFunds": true,
                "creationMode": "qr",
                "currency": "INR",
                "customerRevocable": false,
                "customerVpa": "ram@axis",
                "endDate": "02012008",
                "expireAfter": 2,
                "firstExecutionAmount": 1000,
                "frequency": "monthly",
                "initiationMode": "01",
                "merchantVpa": "fastestupi@pineaxis",
                "primaryAccount": {
                  "IFSC": "SBIN0000001",
                  "accountName": "deku",
                  "accountNumber": "1234567890"
                },
                "purpose": "14",
                "recurrenceRule": "on",
                "recurrenceValue": 1,
                "referenceId": "ABC1234789",
                "secondaryAccounts": [
                  {
                    "IFSC": "SBIN0000001",
                    "accountName": "deku",
                    "accountNumber": "1234567890"
                  },
                  {
                    "IFSC": "SBIN0000001",
                    "accountName": "deku",
                    "accountNumber": "1234567890"
                  },
                  {
                    "IFSC": "SBIN0000001",
                    "accountName": "deku",
                    "accountNumber": "1234567890"
                  }
                ],
                "shareToPayee": false,
                "startDate": "02012006",
                "transactionNote": "Transaction note"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created response.",
            "headers": {
              "requestId": {
                "schema": {
                  "type": "string",
                  "example": "cjqml1f2e5ocq2mesej0"
                },
                "example": "cjqml1f2e5ocq2mesej0"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateTpvMandateResponse"
                },
                "example": {
                  "allowMultipleDebit": true,
                  "amount": 1000,
                  "amountRule": "max",
                  "autoExecute": true,
                  "autoPreNotify": true,
                  "autoRefundFirstExecutionAmount": false,
                  "blockFunds": true,
                  "createdAt": "2024-05-17T19:17:32+05:30",
                  "creationMode": "qr",
                  "currency": "INR",
                  "customerRevocable": true,
                  "customerVpa": "ram@axis",
                  "endDate": "02012008",
                  "expireAfter": 2,
                  "firstExecutionAmount": 1000,
                  "frequency": "monthly",
                  "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "initiationMode": "04",
                  "intentLink": "upi://mandate?pa=deku040920232@okokaxis\u0026pn=merchant-1\u0026validitystart=31121995\u0026validityend=31121996\u0026am=100.00\u0026amrule=MAX\u0026recur=one%20time\u0026recurvalue=0\u0026recurtype=on\u0026tr=SETgv8wOOCElAtpzfbAEXqcKvN8QPfunAhI\u0026cu=INR\u0026mc=1234\u0026mode=04\u0026purpose=14\u0026rev=N\u0026share=Y\u0026qrexpire=04092023\u0026block=N\u0026orgid=000000\u0026version=2.0\u0026txnType=create\u0026tid=SETgv8wOOCElAtpzfbAEXqcKvN8QPfunAhI",
                  "maxAmountLimit": 1000,
                  "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "merchantVpa": "fastestupi@pineaxis",
                  "primaryAccount": {
                    "IFSC": "SBIN0000001",
                    "encryptedAccountName": "5e884898da28047151d0e56f8dc629277",
                    "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                    "hashedAccountName": "5e884898da28047151d0e56f8dc629277",
                    "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                    "maskedAccountName": "R*M*E*S*",
                    "maskedAccountNumber": "**** **** **** 7890"
                  },
                  "purpose": "14",
                  "qrCode": "",
                  "recurrenceRule": "on",
                  "recurrenceValue": 1,
                  "referenceId": "ABC1234789",
                  "secondaryAccounts": [
                    {
                      "IFSC": "SBIN0000001",
                      "encryptedAccountName": "5e884898da28047151d0e56f8dc629277",
                      "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                      "hashedAccountName": "5e884898da28047151d0e56f8dc629277",
                      "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                      "maskedAccountName": "R*M*E*S*",
                      "maskedAccountNumber": "**** **** **** 7890"
                    },
                    {
                      "IFSC": "SBIN0000001",
                      "encryptedAccountName": "5e884898da28047151d0e56f8dc629277",
                      "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                      "hashedAccountName": "5e884898da28047151d0e56f8dc629277",
                      "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                      "maskedAccountName": "R*M*E*S*",
                      "maskedAccountNumber": "**** **** **** 7890"
                    }
                  ],
                  "shareToPayee": false,
                  "startDate": "02012006",
                  "status": "pending",
                  "transactionNote": "Transaction note",
                  "txnId": "BTTZrc5gDFkuCr3n3I0ey4aNtzLOLR7K7aR"
                }
              }
            }
          },
          "400": {
            "description": "Bad request: Bad Request response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized: Unauthorized response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not found: Not Found response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error: Internal Server Error response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          }
        },
        "security": [{ "jwt_header_Authorization": [] }]
      }
    },
    "/api/v1/merchants/mandates/{id}": {
      "get": {
        "tags": ["Mandates"],
        "summary": "Fetch mandate by id",
        "description": "API to fetch a mandate on our platform using the unique id generated while the mandate was registered",
        "operationId": "mandates#fetchById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the mandate that needs to be fetched",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id of the mandate that needs to be fetched",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          {
            "name": "merchantId",
            "in": "header",
            "description": "Id of the merchant who is trying create the mandate",
            "allowEmptyValue": true,
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id of the merchant who is trying create the mandate",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "headers": {
              "requestId": {
                "schema": {
                  "type": "string",
                  "example": "cjqml1f2e5ocq2mesej0"
                },
                "example": "cjqml1f2e5ocq2mesej0"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FetchMandateResponse"
                },
                "example": {
                  "allowMultipleDebit": true,
                  "amount": 1000,
                  "amountRule": "max",
                  "autoExecute": true,
                  "autoPreNotify": true,
                  "autoRefundFirstExecutionAmount": false,
                  "blockFunds": true,
                  "createdAt": "2024-05-17T19:17:32+05:30",
                  "creationMode": "qr",
                  "currency": "INR",
                  "customerRevocable": true,
                  "customerVpa": "ram@axis",
                  "endDate": "02012008",
                  "expireAfter": 2,
                  "firstExecutionAmount": 1000,
                  "frequency": "monthly",
                  "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "initiationMode": "04",
                  "intentLink": "upi://mandate?pa=deku040920232@okokaxis\u0026pn=merchant-1\u0026validitystart=31121995\u0026validityend=31121996\u0026am=100.00\u0026amrule=MAX\u0026recur=one%20time\u0026recurvalue=0\u0026recurtype=on\u0026tr=SETgv8wOOCElAtpzfbAEXqcKvN8QPfunAhI\u0026cu=INR\u0026mc=1234\u0026mode=04\u0026purpose=14\u0026rev=N\u0026share=Y\u0026qrexpire=04092023\u0026block=N\u0026orgid=000000\u0026version=2.0\u0026txnType=create\u0026tid=SETgv8wOOCElAtpzfbAEXqcKvN8QPfunAhI",
                  "maxAmountLimit": 1000,
                  "merchantId": "Labore dolores voluptatum rerum eaque.",
                  "merchantVpa": "fastestupi@pineaxis",
                  "primaryAccount": {
                    "IFSC": "SBIN0000001",
                    "encryptedAccountName": "5e884898da28047151d0e56f8dc629277",
                    "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                    "hashedAccountName": "5e884898da28047151d0e56f8dc629277",
                    "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                    "maskedAccountName": "R*M*E*S*",
                    "maskedAccountNumber": "**** **** **** 7890"
                  },
                  "productConfigId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "purpose": "14",
                  "qrCode": "",
                  "reason": {
                    "code": "unable-to-fulfill-request",
                    "desc": "unable-to-fulfill-request",
                    "npciErrCategory": "TD",
                    "npciErrCode": "YG",
                    "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
                    "npciRespCode": "YG",
                    "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)",
                    "setuDescription": "Merchant PSP error",
                    "suggestedAction": "Merchant PSP error"
                  },
                  "recurrenceRule": "on",
                  "recurrenceValue": 1,
                  "referenceId": "ABC1234789",
                  "secondaryAccounts": [
                    {
                      "IFSC": "SBIN0000001",
                      "encryptedAccountName": "5e884898da28047151d0e56f8dc629277",
                      "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                      "hashedAccountName": "5e884898da28047151d0e56f8dc629277",
                      "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                      "maskedAccountName": "R*M*E*S*",
                      "maskedAccountNumber": "**** **** **** 7890"
                    },
                    {
                      "IFSC": "SBIN0000001",
                      "encryptedAccountName": "5e884898da28047151d0e56f8dc629277",
                      "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                      "hashedAccountName": "5e884898da28047151d0e56f8dc629277",
                      "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                      "maskedAccountName": "R*M*E*S*",
                      "maskedAccountNumber": "**** **** **** 7890"
                    },
                    {
                      "IFSC": "SBIN0000001",
                      "encryptedAccountName": "5e884898da28047151d0e56f8dc629277",
                      "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                      "hashedAccountName": "5e884898da28047151d0e56f8dc629277",
                      "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                      "maskedAccountName": "R*M*E*S*",
                      "maskedAccountNumber": "**** **** **** 7890"
                    },
                    {
                      "IFSC": "SBIN0000001",
                      "encryptedAccountName": "5e884898da28047151d0e56f8dc629277",
                      "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                      "hashedAccountName": "5e884898da28047151d0e56f8dc629277",
                      "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                      "maskedAccountName": "R*M*E*S*",
                      "maskedAccountNumber": "**** **** **** 7890"
                    }
                  ],
                  "shareToPayee": false,
                  "startDate": "02012006",
                  "status": "pending",
                  "transactionNote": "Transaction note",
                  "txnId": "BTTZrc5gDFkuCr3n3I0ey4aNtzLOLR7K7aR",
                  "umn": "c27f5fc30d344e9594fce0afa34f8859@mypsp"
                }
              }
            }
          },
          "400": {
            "description": "Bad request: Bad Request response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized: Unauthorized response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not found: Not Found response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error: Internal Server Error response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          }
        },
        "security": [{ "jwt_header_Authorization": [] }]
      }
    },
    "/api/v1/merchants/mandates/{id}/execute": {
      "post": {
        "tags": ["Mandates"],
        "summary": "Execute a mandate",
        "description": "API to execute a mandate",
        "operationId": "mandates#execute",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the mandate that needs to be executed",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id of the mandate that needs to be executed",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          {
            "name": "merchantId",
            "in": "header",
            "description": "Id of the merchant who is trying create the mandate",
            "allowEmptyValue": true,
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id of the merchant who is trying create the mandate",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          {
            "name": "mock",
            "in": "header",
            "description": "If true, mock the API call",
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "description": "If true, mock the API call",
              "default": "true",
              "example": "Aut veritatis."
            },
            "example": "Nihil aspernatur qui id aut."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ExecuteRequestBody" },
              "example": {
                "amount": 1000,
                "referenceId": "ABC1234789",
                "remark": "Transaction for car loan emi",
                "sequenceNumber": 1,
                "umn": "123456789"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created response.",
            "headers": {
              "requestId": {
                "schema": {
                  "type": "string",
                  "example": "cjqml1f2e5ocq2mesej0"
                },
                "example": "cjqml1f2e5ocq2mesej0"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MandateExecutionResponse"
                },
                "example": {
                  "amount": 1000,
                  "createdAt": "2024-05-17T19:17:32+05:30",
                  "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "mandateId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "referenceId": "ABC1234789",
                  "remark": "Transaction for car loan emi",
                  "sequenceNumber": 1,
                  "status": "live",
                  "txnId": "BTTZrc5gDFkuCr3n3I0ey4aNtzLOLR7K7aR",
                  "umn": "c27f5fc30d344e9594fce0afa34f8859@mypsp"
                }
              }
            }
          },
          "400": {
            "description": "Bad request: Bad Request response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized: Unauthorized response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not found: Not Found response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error: Internal Server Error response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          }
        },
        "security": [{ "jwt_header_Authorization": [] }]
      }
    },
    "/api/v1/merchants/mandates/{id}/modify": {
      "put": {
        "tags": ["Mandates"],
        "summary": "Modify a mandate by id",
        "description": "API to modify an existing mandate that can be identified using the resource id of the mandate",
        "operationId": "mandates#modify",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the mandate that needs to be modified",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id of the mandate that needs to be modified",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          {
            "name": "merchantId",
            "in": "header",
            "description": "Id of the merchant who created the mandate",
            "allowEmptyValue": true,
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id of the merchant who created the mandate",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          {
            "name": "mock",
            "in": "header",
            "description": "If true, mock the API call",
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "description": "If true, mock the API call",
              "default": "true",
              "example": "Neque harum."
            },
            "example": "Dolorem debitis sint porro error."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ModifyRequestBody" },
              "example": {
                "amountLimit": 1000,
                "endDate": "02012006",
                "expireAfter": 2,
                "referenceId": "ABC1234789"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created response.",
            "headers": {
              "requestId": {
                "schema": {
                  "type": "string",
                  "example": "cjqml1f2e5ocq2mesej0"
                },
                "example": "cjqml1f2e5ocq2mesej0"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateMandateResponse"
                },
                "example": {
                  "amountLimit": 1000,
                  "endDate": "02012006",
                  "expireAfter": 2,
                  "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "intentLink": "upi://mandate?pa=deku040920232@okokaxis\u0026validitystart=31121995\u0026validityend=30122025\u0026am=901.00\u0026amrule=max\u0026recur=one%20time\u0026recurvalue=0\u0026recurtype=on\u0026cu=INR\u0026mc=1234\u0026mode=01\u0026purpose=14\u0026rev=N\u0026block=N\u0026txnType=update\u0026umn=SETUS7mxYHK1A6yXhxJsoKM7yxKqC2r0\u0026tid=SETM3Iij4WQrtEUbOUFkTpQp2EpR5wqy5Ou",
                  "mandateId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "mode": "qr",
                  "qrCode": "",
                  "referenceId": "ABC1234789",
                  "status": "pending",
                  "txnId": "BTTZrc5gDFkuCr3n3I0ey4aNtzLOLR7K7aR",
                  "umn": "c27f5fc30d344e9594fce0afa34f8859@mypsp"
                }
              }
            }
          },
          "400": {
            "description": "Bad request: Bad Request response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized: Unauthorized response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not found: Not Found response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error: Internal Server Error response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          }
        },
        "security": [{ "jwt_header_Authorization": [] }]
      }
    },
    "/api/v1/merchants/mandates/{id}/notify": {
      "post": {
        "tags": ["Mandates"],
        "summary": "Notify mandate execution",
        "description": "API to notify the customer about a scheduled mandate execution",
        "operationId": "mandates#notify",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the mandate that needs to be notified",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id of the mandate that needs to be notified",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          {
            "name": "merchantId",
            "in": "header",
            "description": "Merchant id of the mandate",
            "allowEmptyValue": true,
            "required": true,
            "schema": {
              "type": "string",
              "description": "Merchant id of the mandate",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "examples": {
              "default": {
                "summary": "default",
                "value": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
              }
            }
          },
          {
            "name": "mock",
            "in": "header",
            "description": "If true, mock the API call",
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "description": "If true, mock the API call",
              "default": "true",
              "example": "Vel quia excepturi."
            },
            "example": "Iure laborum."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/NotifyRequestBody" },
              "example": {
                "amount": 1000,
                "executionDate": "02012006",
                "referenceId": "ABC1234789",
                "sequenceNumber": 1,
                "umn": "setumandate1234789@ybl"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created response.",
            "headers": {
              "requestId": {
                "schema": {
                  "type": "string",
                  "example": "cjqml1f2e5ocq2mesej0"
                },
                "example": "cjqml1f2e5ocq2mesej0"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MandatePreDebitNotificationResponse"
                },
                "example": {
                  "amount": 1000,
                  "createdAt": "2024-05-17T19:17:32+05:30",
                  "executionDate": "02012006",
                  "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "mandateId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "referenceId": "ABC1234789",
                  "sequenceNumber": 1,
                  "status": "success",
                  "txnId": "BTTZrc5gDFkuCr3n3I0ey4aNtzLOLR7K7aR",
                  "umn": "c27f5fc30d344e9594fce0afa34f8859@mypsp"
                }
              }
            }
          },
          "400": {
            "description": "Bad request: Bad Request response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized: Unauthorized response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not found: Not Found response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error: Internal Server Error response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          }
        },
        "security": [{ "jwt_header_Authorization": [] }]
      }
    },
    "/api/v1/merchants/mandates/{id}/revoke": {
      "put": {
        "tags": ["Mandates"],
        "summary": "Revoke a mandate by id",
        "description": "API to modify an live mandate that can be identified using the resource id of the mandate",
        "operationId": "mandates#revoke",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the mandate that needs to be revoked",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id of the mandate that needs to be revoked",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          {
            "name": "merchantId",
            "in": "header",
            "description": "Id of the merchant who created the mandate",
            "allowEmptyValue": true,
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id of the merchant who created the mandate",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          {
            "name": "mock",
            "in": "header",
            "description": "If true, mock the API call",
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "description": "If true, mock the API call",
              "default": "true",
              "example": "Sed quod ab vel et sit."
            },
            "example": "Laborum cum doloribus et tenetur."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/RevokeRequestBody" },
              "example": { "expireAfter": 2, "referenceId": "ABC1234789" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created response.",
            "headers": {
              "requestId": {
                "schema": {
                  "type": "string",
                  "example": "cjqml1f2e5ocq2mesej0"
                },
                "example": "cjqml1f2e5ocq2mesej0"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RevokeMandateResponse"
                },
                "example": {
                  "expireAfter": 2,
                  "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "intentLink": "upi://mandate?pa=deku040920232@okokaxis\u0026validitystart=1995-12-31\u0026amrule=max\u0026recur=one%20time\u0026recurvalue=0\u0026recurtype=on\u0026cu=INR\u0026mc=1234\u0026mode=04\u0026purpose=14\u0026rev=N\u0026block=N\u0026txnType=revoke\u0026umn=SETUS7mxYHK1A6yXhxJsoKM7yxKqC2r0\u0026tid=SETE9q1rQXW3wXHzDdaqJTDGHHTBkJ0Segc",
                  "mandateId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "mode": "intent",
                  "referenceId": "ABC1234789",
                  "status": "pending",
                  "txnId": "BTTZrc5gDFkuCr3n3I0ey4aNtzLOLR7K7aR",
                  "umn": "c27f5fc30d344e9594fce0afa34f8859@mypsp"
                }
              }
            }
          },
          "400": {
            "description": "Bad request: Bad Request response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized: Unauthorized response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not found: Not Found response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error: Internal Server Error response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          }
        },
        "security": [{ "jwt_header_Authorization": [] }]
      }
    },
    "/api/v1/merchants/mandates/{mandateId}/execute/{id}": {
      "get": {
        "tags": ["Mandates"],
        "summary": "Fetch a mandate execution by id",
        "description": "API to fetch a mandate execution resource by its id",
        "operationId": "mandates#fetchMandateExecutionById",
        "parameters": [
          {
            "name": "mandateId",
            "in": "path",
            "description": "Id of the mandate",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id of the mandate",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAW"
            },
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAW"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Id of the mandate execution",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id of the mandate execution",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          {
            "name": "merchantId",
            "in": "header",
            "description": "Id of the merchant who has created the mandate",
            "allowEmptyValue": true,
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id of the merchant who has created the mandate",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "headers": {
              "requestId": {
                "schema": {
                  "type": "string",
                  "example": "cjqml1f2e5ocq2mesej0"
                },
                "example": "cjqml1f2e5ocq2mesej0"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FetchMandateExecutionResponse"
                },
                "example": {
                  "amount": 1000,
                  "createdAt": "2024-05-17T19:17:32+05:30",
                  "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "mandateId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "reason": {
                    "code": "unable-to-fulfill-request",
                    "desc": "unable-to-fulfill-request",
                    "npciErrCategory": "TD",
                    "npciErrCode": "YG",
                    "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
                    "npciRespCode": "YG",
                    "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)",
                    "setuDescription": "Merchant PSP error",
                    "suggestedAction": "Merchant PSP error"
                  },
                  "referenceId": "ABC1234789",
                  "remark": "Transaction for car loan emi",
                  "sequenceNumber": 1,
                  "status": "live",
                  "txnId": "BTTZrc5gDFkuCr3n3I0ey4aNtzLOLR7K7aR",
                  "umn": "c27f5fc30d344e9594fce0afa34f8859@mypsp"
                }
              }
            }
          },
          "400": {
            "description": "Bad request: Bad Request response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized: Unauthorized response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not found: Not Found response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error: Internal Server Error response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          }
        },
        "security": [{ "jwt_header_Authorization": [] }]
      }
    },
    "/api/v1/merchants/mandates/{mandateId}/notify/{id}": {
      "get": {
        "tags": ["Mandates"],
        "summary": "Fetch a mandate notification by id",
        "description": "API to fetch a mandate notification resource by its id",
        "operationId": "mandates#fetchMandatePreDebitNotificationById",
        "parameters": [
          {
            "name": "mandateId",
            "in": "path",
            "description": "Id of the mandate that needs to be revoked",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id of the mandate that needs to be revoked",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Id of the mandate pre debit notification",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id of the mandate pre debit notification",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          {
            "name": "merchantId",
            "in": "header",
            "description": "Id of the merchant who has created the mandate",
            "allowEmptyValue": true,
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id of the merchant who has created the mandate",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "headers": {
              "requestId": {
                "schema": {
                  "type": "string",
                  "example": "cjqml1f2e5ocq2mesej0"
                },
                "example": "cjqml1f2e5ocq2mesej0"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FetchMandatePreDebitNotificationResponse"
                },
                "example": {
                  "amount": 1000,
                  "createdAt": "2024-05-17T19:17:32+05:30",
                  "executionDate": "02012006",
                  "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "mandateId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "reason": {
                    "code": "unable-to-fulfill-request",
                    "desc": "unable-to-fulfill-request",
                    "npciErrCategory": "TD",
                    "npciErrCode": "YG",
                    "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
                    "npciRespCode": "YG",
                    "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)",
                    "setuDescription": "Merchant PSP error",
                    "suggestedAction": "Merchant PSP error"
                  },
                  "referenceId": "ABC1234789",
                  "sequenceNumber": 1,
                  "status": "success",
                  "txnId": "BTTZrc5gDFkuCr3n3I0ey4aNtzLOLR7K7aR",
                  "umn": "c27f5fc30d344e9594fce0afa34f8859@mypsp"
                }
              }
            }
          },
          "400": {
            "description": "Bad request: Bad Request response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized: Unauthorized response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not found: Not Found response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error: Internal Server Error response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          }
        },
        "security": [{ "jwt_header_Authorization": [] }]
      }
    },
    "/api/v1/merchants/mandates/{mandateId}/operations/history": {
      "get": {
        "tags": ["Mandates"],
        "summary": "List last N mandate operations",
        "description": "API to fetch the history of mandate operations",
        "operationId": "mandates#operationsHistory",
        "parameters": [
          {
            "name": "mandateId",
            "in": "path",
            "description": "Id of the mandate that needs to be modified",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id of the mandate that needs to be modified",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          {
            "name": "merchantId",
            "in": "header",
            "description": "Id of the merchant who created the mandate",
            "allowEmptyValue": true,
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id of the merchant who created the mandate",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "headers": {
              "requestId": {
                "schema": {
                  "type": "string",
                  "example": "cjqml1f2e5ocq2mesej0"
                },
                "example": "cjqml1f2e5ocq2mesej0"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListMandateOperationsResponse"
                },
                "example": {
                  "data": [
                    {
                      "amountLimit": 1000,
                      "createdAt": "2024-05-17T19:17:32+05:30",
                      "endDate": "02012006",
                      "expireAfter": 2,
                      "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                      "intentLink": "upi://mandate?pa=deku040920232@okokaxis\u0026validitystart=31121995\u0026validityend=30122025\u0026am=901.00\u0026amrule=max\u0026recur=one%20time\u0026recurvalue=0\u0026recurtype=on\u0026cu=INR\u0026mc=1234\u0026mode=01\u0026purpose=14\u0026rev=N\u0026block=N\u0026txnType=update\u0026umn=SETUS7mxYHK1A6yXhxJsoKM7yxKqC2r0\u0026tid=SETM3Iij4WQrtEUbOUFkTpQp2EpR5wqy5Ou",
                      "mandateId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                      "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                      "mode": "qr",
                      "qrCode": "",
                      "reason": {
                        "code": "unable-to-fulfill-request",
                        "desc": "unable-to-fulfill-request",
                        "npciErrCategory": "TD",
                        "npciErrCode": "YG",
                        "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
                        "npciRespCode": "YG",
                        "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)",
                        "setuDescription": "Merchant PSP error",
                        "suggestedAction": "Merchant PSP error"
                      },
                      "referenceId": "ABC1234789",
                      "status": "pending",
                      "txnId": "BTTZrc5gDFkuCr3n3I0ey4aNtzLOLR7K7aR",
                      "type": "Nobis voluptatem ab repudiandae tempora et omnis.",
                      "umn": "c27f5fc30d344e9594fce0afa34f8859@mypsp"
                    },
                    {
                      "amountLimit": 1000,
                      "createdAt": "2024-05-17T19:17:32+05:30",
                      "endDate": "02012006",
                      "expireAfter": 2,
                      "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                      "intentLink": "upi://mandate?pa=deku040920232@okokaxis\u0026validitystart=31121995\u0026validityend=30122025\u0026am=901.00\u0026amrule=max\u0026recur=one%20time\u0026recurvalue=0\u0026recurtype=on\u0026cu=INR\u0026mc=1234\u0026mode=01\u0026purpose=14\u0026rev=N\u0026block=N\u0026txnType=update\u0026umn=SETUS7mxYHK1A6yXhxJsoKM7yxKqC2r0\u0026tid=SETM3Iij4WQrtEUbOUFkTpQp2EpR5wqy5Ou",
                      "mandateId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                      "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                      "mode": "qr",
                      "qrCode": "",
                      "reason": {
                        "code": "unable-to-fulfill-request",
                        "desc": "unable-to-fulfill-request",
                        "npciErrCategory": "TD",
                        "npciErrCode": "YG",
                        "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
                        "npciRespCode": "YG",
                        "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)",
                        "setuDescription": "Merchant PSP error",
                        "suggestedAction": "Merchant PSP error"
                      },
                      "referenceId": "ABC1234789",
                      "status": "pending",
                      "txnId": "BTTZrc5gDFkuCr3n3I0ey4aNtzLOLR7K7aR",
                      "type": "Nobis voluptatem ab repudiandae tempora et omnis.",
                      "umn": "c27f5fc30d344e9594fce0afa34f8859@mypsp"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad request: Bad Request response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized: Unauthorized response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not found: Not Found response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error: Internal Server Error response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          }
        },
        "security": [{ "jwt_header_Authorization": [] }]
      }
    },
    "/api/v1/merchants/mandates/{mandateId}/operations/{id}": {
      "get": {
        "tags": ["Mandates"],
        "summary": "Fetch mandate operation by id",
        "description": "API to fetch a mandate operation record by its operation id, these are the operations that can be performed on a live mandate - modify and revoke",
        "operationId": "mandates#fetchMandateOperationById",
        "parameters": [
          {
            "name": "mandateId",
            "in": "path",
            "description": "Id of the mandate that needs to be modified",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id of the mandate that needs to be modified",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Id of the mandate operation, this is the same id as found in the response of a modify mandate request or a revoke mandate request",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id of the mandate operation, this is the same id as found in the response of a modify mandate request or a revoke mandate request",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          {
            "name": "merchantId",
            "in": "header",
            "description": "Id of the merchant who created the mandate",
            "allowEmptyValue": true,
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id of the merchant who created the mandate",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "headers": {
              "requestId": {
                "schema": {
                  "type": "string",
                  "example": "cjqml1f2e5ocq2mesej0"
                },
                "example": "cjqml1f2e5ocq2mesej0"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FetchMandateOperationResponse"
                },
                "example": {
                  "amountLimit": 1000,
                  "createdAt": "2024-05-17T19:17:32+05:30",
                  "endDate": "02012006",
                  "expireAfter": 2,
                  "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "intentLink": "upi://mandate?pa=deku040920232@okokaxis\u0026validitystart=31121995\u0026validityend=30122025\u0026am=901.00\u0026amrule=max\u0026recur=one%20time\u0026recurvalue=0\u0026recurtype=on\u0026cu=INR\u0026mc=1234\u0026mode=01\u0026purpose=14\u0026rev=N\u0026block=N\u0026txnType=update\u0026umn=SETUS7mxYHK1A6yXhxJsoKM7yxKqC2r0\u0026tid=SETM3Iij4WQrtEUbOUFkTpQp2EpR5wqy5Ou",
                  "mandateId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "mode": "qr",
                  "qrCode": "",
                  "reason": {
                    "code": "unable-to-fulfill-request",
                    "desc": "unable-to-fulfill-request",
                    "npciErrCategory": "TD",
                    "npciErrCode": "YG",
                    "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
                    "npciRespCode": "YG",
                    "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)",
                    "setuDescription": "Merchant PSP error",
                    "suggestedAction": "Merchant PSP error"
                  },
                  "referenceId": "ABC1234789",
                  "status": "pending",
                  "txnId": "BTTZrc5gDFkuCr3n3I0ey4aNtzLOLR7K7aR",
                  "type": "Qui illum quidem nihil.",
                  "umn": "c27f5fc30d344e9594fce0afa34f8859@mypsp"
                }
              }
            }
          },
          "400": {
            "description": "Bad request: Bad Request response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized: Unauthorized response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not found: Not Found response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error: Internal Server Error response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          }
        },
        "security": [{ "jwt_header_Authorization": [] }]
      }
    },
    "/api/v1/merchants/oqr": {
      "post": {
        "tags": ["Offline QR"],
        "summary": "Create offline QR",
        "description": "API to create offline QR",
        "operationId": "offlineQR#create",
        "parameters": [
          {
            "name": "merchantId",
            "in": "header",
            "description": "Id associated with the merchant on our platform",
            "allowEmptyValue": true,
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id associated with the merchant on our platform",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CreateRequestBody4" },
              "example": {
                "intentLink": "upi://pay?pa=test-auto-pgruosncak@okokaxis\u0026pn=merchant-4\u0026am=100.00\u0026tr=SU1240659756905923780\u0026tn=samplesingle0useqr\u0026cu=INR\u0026mc=1234",
                "merchantVpa": "fastestupi@pineaxis",
                "referenceId": "1240689979139556557",
                "transactionReference": "1240689979139556558"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created response.",
            "headers": {
              "requestId": {
                "schema": {
                  "type": "string",
                  "example": "cjqml1f2e5ocq2mesej0"
                },
                "example": "cjqml1f2e5ocq2mesej0"
              }
            },
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CreateOqrResponse" },
                "example": {
                  "createdAt": "2024-05-17T19:17:32+05:30",
                  "expiryDate": "2024-06-17T19:17:32+05:30",
                  "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "intentLink": "upi://pay?pa=test-auto-pgruosncak@okokaxis\u0026pn=merchant-4\u0026am=100.00\u0026tr=SU1240659756905923780\u0026tn=samplesingle0useqr\u0026cu=INR\u0026mc=1234",
                  "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "merchantVpa": "fastestupi@pineaxis",
                  "referenceId": "1240689979139556557",
                  "status": "active",
                  "transactionReference": "1240689979139556558"
                }
              }
            }
          },
          "400": {
            "description": "Bad request: Bad Request response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Forbidden response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not found: Not Found response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error: Internal Server Error response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          }
        },
        "security": [{ "jwt_header_Authorization": [] }]
      }
    },
    "/api/v1/merchants/oqr/{id}": {
      "get": {
        "tags": ["Offline QR"],
        "summary": "Fetch oqr by id",
        "description": "API to fetch an offline qr by id, which gives useful information like the status of the qr",
        "operationId": "offlineQR#fetchById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the resource, which is the same the id returned in the Create \u003cresource\u003e API response",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id of the resource, which is the same the id returned in the Create \u003cresource\u003e API response",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          {
            "name": "merchantId",
            "in": "header",
            "description": "Id associated with the merchant on our platform",
            "allowEmptyValue": true,
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id associated with the merchant on our platform",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "headers": {
              "requestId": {
                "schema": {
                  "type": "string",
                  "example": "cjqml1f2e5ocq2mesej0"
                },
                "example": "cjqml1f2e5ocq2mesej0"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FetchOqrByIDResponse"
                },
                "example": {
                  "closedAt": "2024-06-17T19:17:32+05:30",
                  "createdAt": "2024-05-17T19:17:32+05:30",
                  "expiryDate": "2024-06-17T19:17:32+05:30",
                  "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "intentLink": "upi://pay?pa=test-auto-pgruosncak@okokaxis\u0026pn=merchant-4\u0026am=100.00\u0026tr=SU1240659756905923780\u0026tn=samplesingle0useqr\u0026cu=INR\u0026mc=1234",
                  "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "merchantVpa": "fastestupi@pineaxis",
                  "reason": {
                    "code": "unable-to-fulfill-request",
                    "desc": "unable-to-fulfill-request",
                    "npciErrCategory": "TD",
                    "npciErrCode": "YG",
                    "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
                    "npciRespCode": "YG",
                    "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)",
                    "setuDescription": "Merchant PSP error",
                    "suggestedAction": "Merchant PSP error"
                  },
                  "referenceId": "1240689979139556557",
                  "status": "active",
                  "transactionReference": "1240689979139556558"
                }
              }
            }
          },
          "400": {
            "description": "Bad request: Bad Request response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Forbidden response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not found: Not Found response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error: Internal Server Error response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          }
        },
        "security": [{ "jwt_header_Authorization": [] }]
      }
    },
    "/api/v1/merchants/oqr/{id}/status": {
      "put": {
        "tags": ["Offline QR"],
        "summary": "Activate or deactivate oqr",
        "description": "API to Activate or deactivate an offline QR by its id",
        "operationId": "offlineQR#status",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the resource, which is the same the id returned in the Create \u003cresource\u003e API response",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id of the resource, which is the same the id returned in the Create \u003cresource\u003e API response",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          {
            "name": "merchantId",
            "in": "header",
            "description": "Id associated with the merchant on our platform",
            "allowEmptyValue": true,
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id associated with the merchant on our platform",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/MockMandateResponse" },
              "example": { "status": "inactive" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created response.",
            "headers": {
              "requestId": {
                "schema": {
                  "type": "string",
                  "example": "cjqml1f2e5ocq2mesej0"
                },
                "example": "cjqml1f2e5ocq2mesej0"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FetchOqrByIDResponse"
                },
                "example": {
                  "closedAt": "2024-06-17T19:17:32+05:30",
                  "createdAt": "2024-05-17T19:17:32+05:30",
                  "expiryDate": "2024-06-17T19:17:32+05:30",
                  "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "intentLink": "upi://pay?pa=test-auto-pgruosncak@okokaxis\u0026pn=merchant-4\u0026am=100.00\u0026tr=SU1240659756905923780\u0026tn=samplesingle0useqr\u0026cu=INR\u0026mc=1234",
                  "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "merchantVpa": "fastestupi@pineaxis",
                  "reason": {
                    "code": "unable-to-fulfill-request",
                    "desc": "unable-to-fulfill-request",
                    "npciErrCategory": "TD",
                    "npciErrCode": "YG",
                    "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
                    "npciRespCode": "YG",
                    "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)",
                    "setuDescription": "Merchant PSP error",
                    "suggestedAction": "Merchant PSP error"
                  },
                  "referenceId": "1240689979139556557",
                  "status": "active",
                  "transactionReference": "1240689979139556558"
                }
              }
            }
          },
          "400": {
            "description": "Bad request: Bad Request response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Forbidden response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not found: Not Found response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error: Internal Server Error response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          }
        },
        "security": [{ "jwt_header_Authorization": [] }]
      }
    },
    "/api/v1/merchants/pay": {
      "post": {
        "tags": ["Payments"],
        "summary": "Mock a payment",
        "description": "API to mock a payment request as if its done by a customer on a payer PSP",
        "operationId": "payments#DoPayment",
        "parameters": [
          {
            "name": "merchantId",
            "in": "header",
            "allowEmptyValue": true,
            "required": true,
            "schema": {
              "type": "string",
              "example": "Sequi rerum blanditiis facilis."
            },
            "example": "At velit debitis nesciunt molestiae ea occaecati."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/DoPaymentRequestBody" },
              "example": {
                "amount": 5179641008630848199,
                "offerId": "Fuga temporibus voluptas modi aspernatur est.",
                "payeeVpa": "Dolor doloribus et ea minima officiis eos.",
                "payerAccountDetails": {
                  "accountNumber": "Facilis voluptate sit enim architecto.",
                  "accountType": "Fuga non.",
                  "ifsc": "Vel voluptas."
                },
                "payerName": "Et aut reprehenderit aut at eum velit.",
                "payerVpa": "Quia perspiciatis molestiae non aperiam quis vel.",
                "refId": "Similique sit."
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK response.",
            "headers": {
              "requestId": {
                "schema": {
                  "type": "string",
                  "example": "cjqml1f2e5ocq2mesej0"
                },
                "example": "cjqml1f2e5ocq2mesej0"
              }
            }
          },
          "400": {
            "description": "Bad request: Bad Request response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized: Unauthorized response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not found: Not Found response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error: Internal Server Error response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          }
        },
        "security": [{ "jwt_header_Authorization": [] }]
      }
    },
    "/api/v1/merchants/payments/product-instances/{id}/history": {
      "get": {
        "tags": ["Payments"],
        "summary": "Fetch payment history by {product instance id}",
        "description": "API to fetch the a history of recorded payments for a given product instance id",
        "operationId": "payments#fetchHistoryByProductInstanceId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id associated with the product that provides the context for a payment, i.e, a dqr, sqr, tpv or autopay resource",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id associated with the product that provides the context for a payment, i.e, a dqr, sqr, tpv or autopay resource",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "examples": {
              "default": {
                "summary": "default",
                "value": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
              }
            }
          },
          {
            "name": "merchantId",
            "in": "header",
            "description": "Id associated with the merchant on our platform",
            "allowEmptyValue": true,
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id associated with the merchant on our platform",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "headers": {
              "requestId": {
                "schema": {
                  "type": "string",
                  "example": "cjqml1f2e5ocq2mesej0"
                },
                "example": "cjqml1f2e5ocq2mesej0"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FetchPaymentListResponse"
                },
                "example": {
                  "Payments": [
                    {
                      "amount": 10000,
                      "bin": "652922",
                      "createdAt": "2024-05-17T19:17:32+05:30",
                      "currency": "INR",
                      "customerAccountType": "SAVINGS",
                      "customerVpa": "test-auto-tyvmm59i9b@okokaxis",
                      "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                      "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                      "merchantVpa": "test-auto-beibfev2oq@okokaxis",
                      "productInstanceId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                      "reason": {
                        "code": "unable-to-fulfill-request",
                        "desc": "unable-to-fulfill-request",
                        "npciErrCategory": "TD",
                        "npciErrCode": "YG",
                        "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
                        "npciRespCode": "YG",
                        "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)",
                        "setuDescription": "Merchant PSP error",
                        "suggestedAction": "Merchant PSP error"
                      },
                      "refId": "1240689979139556558",
                      "referenceId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                      "requestId": "cjqml1f2e5ocq2mesej0",
                      "rrn": "124068997913",
                      "status": "initiated",
                      "txnId": "SETmBZkQOV0M7wyyP1V4PIFhRSzW5eSjmYI",
                      "txnNote": "testpay"
                    },
                    {
                      "amount": 10000,
                      "bin": "652922",
                      "createdAt": "2024-05-17T19:17:32+05:30",
                      "currency": "INR",
                      "customerAccountType": "SAVINGS",
                      "customerVpa": "test-auto-tyvmm59i9b@okokaxis",
                      "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                      "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                      "merchantVpa": "test-auto-beibfev2oq@okokaxis",
                      "productInstanceId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                      "reason": {
                        "code": "unable-to-fulfill-request",
                        "desc": "unable-to-fulfill-request",
                        "npciErrCategory": "TD",
                        "npciErrCode": "YG",
                        "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
                        "npciRespCode": "YG",
                        "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)",
                        "setuDescription": "Merchant PSP error",
                        "suggestedAction": "Merchant PSP error"
                      },
                      "refId": "1240689979139556558",
                      "referenceId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                      "requestId": "cjqml1f2e5ocq2mesej0",
                      "rrn": "124068997913",
                      "status": "initiated",
                      "txnId": "SETmBZkQOV0M7wyyP1V4PIFhRSzW5eSjmYI",
                      "txnNote": "testpay"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad request: Bad Request response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized: Unauthorized response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not found: Not Found response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error: Internal Server Error response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          }
        },
        "security": [{ "jwt_header_Authorization": [] }]
      }
    },
    "/api/v1/merchants/payments/product-instances/{id}/last": {
      "get": {
        "tags": ["Payments"],
        "summary": "Fetch last payment by {product instance id}",
        "description": "API to fetch the last recorded payment for a given product instance id",
        "operationId": "payments#fetchLastByProductInstanceId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id associated with the product that provides the context for a payment, i.e, a dqr, sqr, tpv or autopay resource",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id associated with the product that provides the context for a payment, i.e, a dqr, sqr, tpv or autopay resource",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "examples": {
              "default": {
                "summary": "default",
                "value": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
              }
            }
          },
          {
            "name": "merchantId",
            "in": "header",
            "description": "Id associated with the merchant on our platform",
            "allowEmptyValue": true,
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id associated with the merchant on our platform",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "headers": {
              "requestId": {
                "schema": {
                  "type": "string",
                  "example": "cjqml1f2e5ocq2mesej0"
                },
                "example": "cjqml1f2e5ocq2mesej0"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FetchPaymentResponse"
                },
                "example": {
                  "amount": 10000,
                  "bin": "652922",
                  "createdAt": "2024-05-17T19:17:32+05:30",
                  "currency": "INR",
                  "customerAccountType": "SAVINGS",
                  "customerVpa": "test-auto-tyvmm59i9b@okokaxis",
                  "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "merchantVpa": "test-auto-beibfev2oq@okokaxis",
                  "productInstanceId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "reason": {
                    "code": "unable-to-fulfill-request",
                    "desc": "unable-to-fulfill-request",
                    "npciErrCategory": "TD",
                    "npciErrCode": "YG",
                    "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
                    "npciRespCode": "YG",
                    "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)",
                    "setuDescription": "Merchant PSP error",
                    "suggestedAction": "Merchant PSP error"
                  },
                  "refId": "1240689979139556558",
                  "referenceId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "rrn": "124068997913",
                  "status": "initiated",
                  "txnId": "SETmBZkQOV0M7wyyP1V4PIFhRSzW5eSjmYI",
                  "txnNote": "testpay"
                }
              }
            }
          },
          "400": {
            "description": "Bad request: Bad Request response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized: Unauthorized response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not found: Not Found response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error: Internal Server Error response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          }
        },
        "security": [{ "jwt_header_Authorization": [] }]
      }
    },
    "/api/v1/merchants/payments/{id}": {
      "get": {
        "tags": ["Payments"],
        "summary": "Fetch payment by id",
        "description": "API to fetch a payment record using its unique id on our platform. The id here is the unique id generated on Setu's platform not the txnId generated by NPCI",
        "operationId": "payments#fetchById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the resource, which is the same the id returned in the Create \u003cresource\u003e API response",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id of the resource, which is the same the id returned in the Create \u003cresource\u003e API response",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          {
            "name": "merchantId",
            "in": "header",
            "description": "Id associated with the merchant on our platform",
            "allowEmptyValue": true,
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id associated with the merchant on our platform",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "headers": {
              "requestId": {
                "schema": {
                  "type": "string",
                  "example": "cjqml1f2e5ocq2mesej0"
                },
                "example": "cjqml1f2e5ocq2mesej0"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FetchPaymentResponse"
                },
                "example": {
                  "amount": 10000,
                  "bin": "652922",
                  "createdAt": "2024-05-17T19:17:32+05:30",
                  "currency": "INR",
                  "customerAccountType": "SAVINGS",
                  "customerVpa": "test-auto-tyvmm59i9b@okokaxis",
                  "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "merchantVpa": "test-auto-beibfev2oq@okokaxis",
                  "productInstanceId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "reason": {
                    "code": "unable-to-fulfill-request",
                    "desc": "unable-to-fulfill-request",
                    "npciErrCategory": "TD",
                    "npciErrCode": "YG",
                    "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
                    "npciRespCode": "YG",
                    "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)",
                    "setuDescription": "Merchant PSP error",
                    "suggestedAction": "Merchant PSP error"
                  },
                  "refId": "1240689979139556558",
                  "referenceId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "rrn": "124068997913",
                  "status": "initiated",
                  "txnId": "SETmBZkQOV0M7wyyP1V4PIFhRSzW5eSjmYI",
                  "txnNote": "testpay"
                }
              }
            }
          },
          "400": {
            "description": "Bad request: Bad Request response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized: Unauthorized response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not found: Not Found response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error: Internal Server Error response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          }
        },
        "security": [{ "jwt_header_Authorization": [] }]
      }
    },
    "/api/v1/merchants/refunds": {
      "post": {
        "tags": ["Refund"],
        "summary": "Create a refund",
        "description": "API to create a refund on a successful payment",
        "operationId": "refund#create",
        "parameters": [
          {
            "name": "merchantId",
            "in": "header",
            "description": "Id of the merchant who is creating the refund",
            "allowEmptyValue": true,
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id of the merchant who is creating the refund",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CreateRequestBody6" },
              "example": {
                "amount": 10000,
                "paymentId": "01HKSEWQ509Z56CVQNQ2XHGJZ1",
                "referenceId": "BILL12345",
                "remarks": "Services not rendered"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created response.",
            "headers": {
              "requestId": {
                "schema": {
                  "type": "string",
                  "example": "cjqml1f2e5ocq2mesej0"
                },
                "example": "cjqml1f2e5ocq2mesej0"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateRefundResponse"
                },
                "example": {
                  "amount": 10000,
                  "createdAt": "2024-05-17T19:17:32+05:30",
                  "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "paymentId": "01HKSEWQ509Z56CVQNQ2XHGJZ1",
                  "reason": {
                    "adjCode": "501",
                    "adjFlag": "RRC",
                    "errCode": "refund-disabled",
                    "npciErrCode": "R21",
                    "npciErrDesc": "ONLINE REFUND IS DISABLED IN UPI"
                  },
                  "referenceId": "BILL12345",
                  "remarks": "Services not rendered",
                  "status": "success"
                }
              }
            }
          },
          "400": {
            "description": "Bad request: Bad Request response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Forbidden response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not found: Not Found response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error: Internal Server Error response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          }
        },
        "security": [{ "jwt_header_Authorization": [] }]
      }
    },
    "/api/v1/merchants/refunds/mock/{id}/status": {
      "put": {
        "tags": ["Refund"],
        "summary": "(Sandbox only) Mock a refund",
        "description": "API to mock the refund status update and trigger the notification on the set target",
        "operationId": "refund#updateMockRefundStatus",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the refund",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id of the refund",
              "example": "01IOZ3NDEKTSV4RRFFQ69G5FFT"
            },
            "example": "01IOZ3NDEKTSV4RRFFQ69G5FFT"
          },
          {
            "name": "merchantId",
            "in": "header",
            "description": "Id of the merchant who is creating the refund",
            "allowEmptyValue": true,
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id of the merchant who is creating the refund",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateMockRefundStatusRequestBody"
              },
              "example": { "mockStatus": "success" }
            }
          }
        },
        "responses": {
          "200": { "description": "OK response." },
          "400": {
            "description": "Bad request: Bad Request response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Forbidden response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not found: Not Found response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error: Internal Server Error response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          }
        },
        "security": [{ "jwt_header_Authorization": [] }]
      }
    },
    "/api/v1/merchants/refunds/{id}": {
      "get": {
        "tags": ["Refund"],
        "summary": "Fetch refund by id",
        "description": "API to fetch refund by its id",
        "operationId": "refund#fetchById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Refund id returned during the refund initiation request",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Refund id returned during the refund initiation request",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          {
            "name": "merchantId",
            "in": "header",
            "description": "Id of the merchant who created the refund",
            "allowEmptyValue": true,
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id of the merchant who created the refund",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "headers": {
              "requestId": {
                "schema": {
                  "type": "string",
                  "example": "cjqml1f2e5ocq2mesej0"
                },
                "example": "cjqml1f2e5ocq2mesej0"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateRefundResponse"
                },
                "example": {
                  "amount": 10000,
                  "createdAt": "2024-05-17T19:17:32+05:30",
                  "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "paymentId": "01HKSEWQ509Z56CVQNQ2XHGJZ1",
                  "reason": {
                    "adjCode": "501",
                    "adjFlag": "RRC",
                    "errCode": "refund-disabled",
                    "npciErrCode": "R21",
                    "npciErrDesc": "ONLINE REFUND IS DISABLED IN UPI"
                  },
                  "referenceId": "BILL12345",
                  "remarks": "Services not rendered",
                  "status": "success"
                }
              }
            }
          },
          "400": {
            "description": "Bad request: Bad Request response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Forbidden response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not found: Not Found response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error: Internal Server Error response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          }
        },
        "security": [{ "jwt_header_Authorization": [] }]
      }
    },
    "/api/v1/merchants/settlement-bank-accounts": {
      "post": {
        "tags": ["Settlement Accounts"],
        "summary": "createSettlementBankAccount settlement-bank-account",
        "description": "Create settlement bank account",
        "operationId": "settlement-bank-account#createSettlementBankAccount",
        "parameters": [
          {
            "name": "merchantId",
            "in": "header",
            "description": "Id associated with the merchant on our platform",
            "allowEmptyValue": true,
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id associated with the merchant on our platform",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "examples": {
              "default": {
                "summary": "default",
                "value": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
              }
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSettlementBankAccountRequestBody"
              },
              "example": {
                "accountHolderName": "deku",
                "accountNumber": "1234567890",
                "accountType": "current",
                "ifsc": "HDFC0000001"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created response.",
            "headers": {
              "requestId": {
                "schema": {
                  "type": "string",
                  "example": "cjqml1f2e5ocq2mesej0"
                },
                "example": "cjqml1f2e5ocq2mesej0"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SettlementBankAccountResponse"
                },
                "example": {
                  "accountHolderName": "deku",
                  "accountNumber": "1234567890",
                  "accountType": "CURRENT",
                  "active": true,
                  "beneCode": "1234567890",
                  "createdAt": "2024-05-17T19:17:32+05:30",
                  "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "ifsc": "HDFC0000001",
                  "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "primary": true
                }
              }
            }
          },
          "400": {
            "description": "Bad request: Bad Request response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized: Unauthorized response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not found: Not Found response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error: Internal Server Error response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/merchants/settlement-bank-accounts/{id}/primary": {
      "put": {
        "tags": ["Settlement Accounts"],
        "summary": "setPrimarySettlementBankAccount settlement-bank-account",
        "description": "Set primary settlement bank account",
        "operationId": "settlement-bank-account#setPrimarySettlementBankAccount",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the resource, which is the same the id returned in the Create \u003cresource\u003e API response",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id of the resource, which is the same the id returned in the Create \u003cresource\u003e API response",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "examples": {
              "default": {
                "summary": "default",
                "value": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
              }
            }
          },
          {
            "name": "merchantId",
            "in": "header",
            "description": "Id associated with the merchant on our platform",
            "allowEmptyValue": true,
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id associated with the merchant on our platform",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "examples": {
              "default": {
                "summary": "default",
                "value": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "headers": {
              "requestId": {
                "schema": {
                  "type": "string",
                  "example": "cjqml1f2e5ocq2mesej0"
                },
                "example": "cjqml1f2e5ocq2mesej0"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SettlementBankAccountResponse"
                },
                "example": {
                  "accountHolderName": "deku",
                  "accountNumber": "1234567890",
                  "accountType": "CURRENT",
                  "active": true,
                  "beneCode": "1234567890",
                  "createdAt": "2024-05-17T19:17:32+05:30",
                  "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "ifsc": "HDFC0000001",
                  "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "primary": true
                }
              }
            }
          },
          "400": {
            "description": "Bad request: Bad Request response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized: Unauthorized response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not found: Not Found response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error: Internal Server Error response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/merchants/settlement-bank-accounts/{id}/status": {
      "put": {
        "tags": ["Settlement Accounts"],
        "summary": "updateSettlementBankAccountStatus settlement-bank-account",
        "description": "Update settlement bank account status",
        "operationId": "settlement-bank-account#updateSettlementBankAccountStatus",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the resource, which is the same the id returned in the Create \u003cresource\u003e API response",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id of the resource, which is the same the id returned in the Create \u003cresource\u003e API response",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "examples": {
              "default": {
                "summary": "default",
                "value": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
              }
            }
          },
          {
            "name": "merchantId",
            "in": "header",
            "description": "Id associated with the merchant on our platform",
            "allowEmptyValue": true,
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id associated with the merchant on our platform",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "examples": {
              "default": {
                "summary": "default",
                "value": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
              }
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSettlementBankAccountStatusRequestBody"
              },
              "example": { "active": true }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK response.",
            "headers": {
              "requestId": {
                "schema": {
                  "type": "string",
                  "example": "cjqml1f2e5ocq2mesej0"
                },
                "example": "cjqml1f2e5ocq2mesej0"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SettlementBankAccountResponse"
                },
                "example": {
                  "accountHolderName": "deku",
                  "accountNumber": "1234567890",
                  "accountType": "CURRENT",
                  "active": true,
                  "beneCode": "1234567890",
                  "createdAt": "2024-05-17T19:17:32+05:30",
                  "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "ifsc": "HDFC0000001",
                  "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "primary": true
                }
              }
            }
          },
          "400": {
            "description": "Bad request: Bad Request response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized: Unauthorized response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not found: Not Found response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error: Internal Server Error response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/merchants/sqr": {
      "post": {
        "tags": ["SQR"],
        "summary": "Create static QR",
        "description": "API to create static QR",
        "operationId": "sqr#create",
        "parameters": [
          {
            "name": "merchantId",
            "in": "header",
            "description": "Id associated with the merchant on our platform",
            "allowEmptyValue": true,
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id associated with the merchant on our platform",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CreateRequestBody2" },
              "example": {
                "amount": 10000,
                "expiryDate": "2024-06-17T19:17:32+05:30",
                "merchantVpa": "fastestupi@pineaxis",
                "metadata": { "InvoiceNumber": "INV-21-12-009" },
                "minAmount": 1000,
                "referenceId": "1240689979139556557",
                "transactionNote": "Payment for loan repayment"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created response.",
            "headers": {
              "requestId": {
                "schema": {
                  "type": "string",
                  "example": "cjqml1f2e5ocq2mesej0"
                },
                "example": "cjqml1f2e5ocq2mesej0"
              }
            },
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CreateSqrResponse" },
                "example": {
                  "amount": 10000,
                  "createdAt": "2024-05-17T19:17:32+05:30",
                  "currency": "Sit inventore modi.",
                  "expiryDate": "2024-06-17T19:17:32+05:30",
                  "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "intentLink": "upi://pay?pa=test-auto-pgruosncak@okokaxis\u0026pn=merchant-4\u0026am=100.00\u0026tr=SU1240659756905923780\u0026tn=samplesingle0useqr\u0026cu=INR\u0026mc=1234",
                  "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "merchantVpa": "fastestupi@pineaxis",
                  "metadata": { "InvoiceNumber": "INV-21-12-009" },
                  "minAmount": 1000,
                  "qrCode": "",
                  "refId": "1240689979139556558",
                  "referenceId": "1240689979139556557",
                  "shortLink": "upipay.setu.co/Np3KnBCM8Om0",
                  "status": "active",
                  "transactionNote": "Payment for loan repayment"
                }
              }
            }
          },
          "400": {
            "description": "Bad request: Bad Request response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Forbidden response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not found: Not Found response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error: Internal Server Error response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          }
        },
        "security": [{ "jwt_header_Authorization": [] }]
      }
    },
    "/api/v1/merchants/sqr/history": {
      "get": {
        "tags": ["SQR"],
        "summary": "List last few SQRs",
        "description": "API to fetch the history of static QRs for a merchant",
        "operationId": "sqr#history",
        "parameters": [
          {
            "name": "merchantId",
            "in": "header",
            "allowEmptyValue": true,
            "required": true,
            "schema": {
              "type": "string",
              "example": "Maxime voluptatem explicabo deleniti ipsa."
            },
            "example": "Cum ratione."
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListSqrHistoryResponse"
                },
                "example": {
                  "data": [
                    {
                      "amount": 10000,
                      "closedAt": "2024-06-17T19:17:32+05:30",
                      "createdAt": "2024-05-17T19:17:32+05:30",
                      "currency": "Et voluptatem quas.",
                      "expiryDate": "2024-06-17T19:17:32+05:30",
                      "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                      "intentLink": "upi://pay?pa=test-auto-pgruosncak@okokaxis\u0026pn=merchant-4\u0026am=100.00\u0026tr=SU1240659756905923780\u0026tn=samplesingle0useqr\u0026cu=INR\u0026mc=1234",
                      "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                      "merchantVpa": "fastestupi@pineaxis",
                      "metadata": { "InvoiceNumber": "INV-21-12-009" },
                      "minAmount": 1000,
                      "productConfigId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                      "qrCode": "",
                      "reason": {
                        "code": "unable-to-fulfill-request",
                        "desc": "unable-to-fulfill-request",
                        "npciErrCategory": "TD",
                        "npciErrCode": "YG",
                        "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
                        "npciRespCode": "YG",
                        "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)",
                        "setuDescription": "Merchant PSP error",
                        "suggestedAction": "Merchant PSP error"
                      },
                      "refId": "1240689979139556558",
                      "referenceId": "1240689979139556557",
                      "shortLink": "upipay.setu.co/Np3KnBCM8Om0",
                      "status": "active",
                      "transactionNote": "Payment for loan repayment"
                    },
                    {
                      "amount": 10000,
                      "closedAt": "2024-06-17T19:17:32+05:30",
                      "createdAt": "2024-05-17T19:17:32+05:30",
                      "currency": "Et voluptatem quas.",
                      "expiryDate": "2024-06-17T19:17:32+05:30",
                      "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                      "intentLink": "upi://pay?pa=test-auto-pgruosncak@okokaxis\u0026pn=merchant-4\u0026am=100.00\u0026tr=SU1240659756905923780\u0026tn=samplesingle0useqr\u0026cu=INR\u0026mc=1234",
                      "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                      "merchantVpa": "fastestupi@pineaxis",
                      "metadata": { "InvoiceNumber": "INV-21-12-009" },
                      "minAmount": 1000,
                      "productConfigId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                      "qrCode": "",
                      "reason": {
                        "code": "unable-to-fulfill-request",
                        "desc": "unable-to-fulfill-request",
                        "npciErrCategory": "TD",
                        "npciErrCode": "YG",
                        "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
                        "npciRespCode": "YG",
                        "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)",
                        "setuDescription": "Merchant PSP error",
                        "suggestedAction": "Merchant PSP error"
                      },
                      "refId": "1240689979139556558",
                      "referenceId": "1240689979139556557",
                      "shortLink": "upipay.setu.co/Np3KnBCM8Om0",
                      "status": "active",
                      "transactionNote": "Payment for loan repayment"
                    },
                    {
                      "amount": 10000,
                      "closedAt": "2024-06-17T19:17:32+05:30",
                      "createdAt": "2024-05-17T19:17:32+05:30",
                      "currency": "Et voluptatem quas.",
                      "expiryDate": "2024-06-17T19:17:32+05:30",
                      "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                      "intentLink": "upi://pay?pa=test-auto-pgruosncak@okokaxis\u0026pn=merchant-4\u0026am=100.00\u0026tr=SU1240659756905923780\u0026tn=samplesingle0useqr\u0026cu=INR\u0026mc=1234",
                      "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                      "merchantVpa": "fastestupi@pineaxis",
                      "metadata": { "InvoiceNumber": "INV-21-12-009" },
                      "minAmount": 1000,
                      "productConfigId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                      "qrCode": "",
                      "reason": {
                        "code": "unable-to-fulfill-request",
                        "desc": "unable-to-fulfill-request",
                        "npciErrCategory": "TD",
                        "npciErrCode": "YG",
                        "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
                        "npciRespCode": "YG",
                        "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)",
                        "setuDescription": "Merchant PSP error",
                        "suggestedAction": "Merchant PSP error"
                      },
                      "refId": "1240689979139556558",
                      "referenceId": "1240689979139556557",
                      "shortLink": "upipay.setu.co/Np3KnBCM8Om0",
                      "status": "active",
                      "transactionNote": "Payment for loan repayment"
                    },
                    {
                      "amount": 10000,
                      "closedAt": "2024-06-17T19:17:32+05:30",
                      "createdAt": "2024-05-17T19:17:32+05:30",
                      "currency": "Et voluptatem quas.",
                      "expiryDate": "2024-06-17T19:17:32+05:30",
                      "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                      "intentLink": "upi://pay?pa=test-auto-pgruosncak@okokaxis\u0026pn=merchant-4\u0026am=100.00\u0026tr=SU1240659756905923780\u0026tn=samplesingle0useqr\u0026cu=INR\u0026mc=1234",
                      "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                      "merchantVpa": "fastestupi@pineaxis",
                      "metadata": { "InvoiceNumber": "INV-21-12-009" },
                      "minAmount": 1000,
                      "productConfigId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                      "qrCode": "",
                      "reason": {
                        "code": "unable-to-fulfill-request",
                        "desc": "unable-to-fulfill-request",
                        "npciErrCategory": "TD",
                        "npciErrCode": "YG",
                        "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
                        "npciRespCode": "YG",
                        "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)",
                        "setuDescription": "Merchant PSP error",
                        "suggestedAction": "Merchant PSP error"
                      },
                      "refId": "1240689979139556558",
                      "referenceId": "1240689979139556557",
                      "shortLink": "upipay.setu.co/Np3KnBCM8Om0",
                      "status": "active",
                      "transactionNote": "Payment for loan repayment"
                    }
                  ],
                  "requestId": "cjqml1f2e5ocq2mesej0"
                }
              }
            }
          },
          "400": {
            "description": "Bad request: Bad Request response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Forbidden response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not found: Not Found response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error: Internal Server Error response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          }
        },
        "security": [{ "jwt_header_Authorization": [] }]
      }
    },
    "/api/v1/merchants/sqr/{id}": {
      "get": {
        "tags": ["SQR"],
        "summary": "Fetch sqr by id",
        "description": "API to fetch a static qr by id, which gives useful information like the status of the qr",
        "operationId": "sqr#fetchById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the resource, which is the same the id returned in the Create \u003cresource\u003e API response",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id of the resource, which is the same the id returned in the Create \u003cresource\u003e API response",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          {
            "name": "merchantId",
            "in": "header",
            "description": "Id associated with the merchant on our platform",
            "allowEmptyValue": true,
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id associated with the merchant on our platform",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "headers": {
              "requestId": {
                "schema": {
                  "type": "string",
                  "example": "cjqml1f2e5ocq2mesej0"
                },
                "example": "cjqml1f2e5ocq2mesej0"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FetchSqrByIDResponse"
                },
                "example": {
                  "amount": 10000,
                  "closedAt": "2024-06-17T19:17:32+05:30",
                  "createdAt": "2024-05-17T19:17:32+05:30",
                  "currency": "Iste molestiae cumque eaque sed.",
                  "expiryDate": "2024-06-17T19:17:32+05:30",
                  "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "intentLink": "upi://pay?pa=test-auto-pgruosncak@okokaxis\u0026pn=merchant-4\u0026am=100.00\u0026tr=SU1240659756905923780\u0026tn=samplesingle0useqr\u0026cu=INR\u0026mc=1234",
                  "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "merchantVpa": "fastestupi@pineaxis",
                  "metadata": { "InvoiceNumber": "INV-21-12-009" },
                  "minAmount": 1000,
                  "productConfigId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "qrCode": "",
                  "reason": {
                    "code": "unable-to-fulfill-request",
                    "desc": "unable-to-fulfill-request",
                    "npciErrCategory": "TD",
                    "npciErrCode": "YG",
                    "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
                    "npciRespCode": "YG",
                    "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)",
                    "setuDescription": "Merchant PSP error",
                    "suggestedAction": "Merchant PSP error"
                  },
                  "refId": "1240689979139556558",
                  "referenceId": "1240689979139556557",
                  "shortLink": "upipay.setu.co/Np3KnBCM8Om0",
                  "status": "active",
                  "transactionNote": "Payment for loan repayment"
                }
              }
            }
          },
          "400": {
            "description": "Bad request: Bad Request response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Forbidden response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not found: Not Found response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error: Internal Server Error response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          }
        },
        "security": [{ "jwt_header_Authorization": [] }]
      }
    },
    "/api/v1/merchants/sqr/{id}/status": {
      "put": {
        "tags": ["SQR"],
        "summary": "Activate or deactivate sqr",
        "description": "API to Activate or deactivate a static QR by its id",
        "operationId": "sqr#status",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the resource, which is the same the id returned in the Create \u003cresource\u003e API response",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id of the resource, which is the same the id returned in the Create \u003cresource\u003e API response",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          {
            "name": "merchantId",
            "in": "header",
            "description": "Id associated with the merchant on our platform",
            "allowEmptyValue": true,
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id associated with the merchant on our platform",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/MockMandateResponse" },
              "example": { "status": "inactive" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created response.",
            "headers": {
              "requestId": {
                "schema": {
                  "type": "string",
                  "example": "cjqml1f2e5ocq2mesej0"
                },
                "example": "cjqml1f2e5ocq2mesej0"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FetchSqrByIDResponse"
                },
                "example": {
                  "amount": 10000,
                  "closedAt": "2024-06-17T19:17:32+05:30",
                  "createdAt": "2024-05-17T19:17:32+05:30",
                  "currency": "Qui occaecati asperiores qui et consequatur.",
                  "expiryDate": "2024-06-17T19:17:32+05:30",
                  "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "intentLink": "upi://pay?pa=test-auto-pgruosncak@okokaxis\u0026pn=merchant-4\u0026am=100.00\u0026tr=SU1240659756905923780\u0026tn=samplesingle0useqr\u0026cu=INR\u0026mc=1234",
                  "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "merchantVpa": "fastestupi@pineaxis",
                  "metadata": { "InvoiceNumber": "INV-21-12-009" },
                  "minAmount": 1000,
                  "productConfigId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "qrCode": "",
                  "reason": {
                    "code": "unable-to-fulfill-request",
                    "desc": "unable-to-fulfill-request",
                    "npciErrCategory": "TD",
                    "npciErrCode": "YG",
                    "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
                    "npciRespCode": "YG",
                    "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)",
                    "setuDescription": "Merchant PSP error",
                    "suggestedAction": "Merchant PSP error"
                  },
                  "refId": "1240689979139556558",
                  "referenceId": "1240689979139556557",
                  "shortLink": "upipay.setu.co/Np3KnBCM8Om0",
                  "status": "active",
                  "transactionNote": "Payment for loan repayment"
                }
              }
            }
          },
          "400": {
            "description": "Bad request: Bad Request response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Forbidden response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not found: Not Found response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error: Internal Server Error response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          }
        },
        "security": [{ "jwt_header_Authorization": [] }]
      }
    },
    "/api/v1/merchants/tpv": {
      "post": {
        "tags": ["TPV"],
        "summary": "Create TPV QR",
        "description": "Create a TPV based qr which can be used to verify the bank account from which the payment was made",
        "operationId": "tpv#createTPV",
        "parameters": [
          {
            "name": "merchantId",
            "in": "header",
            "description": "Id associated with the merchant on our platform",
            "allowEmptyValue": true,
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id associated with the merchant on our platform",
              "example": "1240689979139556556"
            },
            "example": "1240689979139556556"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTPVRequestBody2"
              },
              "example": {
                "amount": 10000,
                "expireAfter": 10,
                "merchantVpa": "fastestupi@pineaxis",
                "metadata": { "InvoiceNumber": "INV-21-12-009" },
                "minAmount": 1000,
                "primaryAccount": {
                  "IFSC": "SBIN0000001",
                  "accountName": "deku",
                  "accountNumber": "1234567890"
                },
                "referenceId": "1240689979139556556",
                "secondaryAccounts": [
                  {
                    "IFSC": "SBIN0000001",
                    "accountName": "deku",
                    "accountNumber": "1234567890"
                  },
                  {
                    "IFSC": "SBIN0000001",
                    "accountName": "deku",
                    "accountNumber": "1234567890"
                  },
                  {
                    "IFSC": "SBIN0000001",
                    "accountName": "deku",
                    "accountNumber": "1234567890"
                  }
                ],
                "transactionNote": "test transaction"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created response.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CreateTPVResponse" },
                "example": {
                  "amount": 10000,
                  "closedAt": "Recusandae aut et dolorem.",
                  "createdAt": "2024-05-17T19:17:32+05:30",
                  "expireAfter": 10,
                  "id": "1240689979139556556",
                  "intentLink": "upi://pay?pa=test-auto-pgruosncak@okokaxis\u0026pn=merchant-4\u0026am=100.00\u0026tr=SU1240659756905923780\u0026tn=sample%20single%20use%20qr\u0026cu=INR\u0026mc=1234",
                  "merchantId": "1240689979139556556",
                  "merchantVpa": "fastestupi@pineaxis",
                  "metadata": { "InvoiceNumber": "INV-21-12-009" },
                  "minAmount": 1000,
                  "primaryAccount": {
                    "IFSC": "SBIN0000001",
                    "encryptedAccountName": "5e884898da28047151d0e56f8dc629277",
                    "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                    "hashedAccountName": "5e884898da28047151d0e56f8dc629277",
                    "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                    "maskedAccountName": "R*M*E*S*",
                    "maskedAccountNumber": "**** **** **** 7890"
                  },
                  "qrCode": "",
                  "reason": {
                    "code": "unable-to-fulfill-request",
                    "desc": "unable-to-fulfill-request",
                    "npciErrCategory": "TD",
                    "npciErrCode": "YG",
                    "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
                    "npciRespCode": "YG",
                    "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)",
                    "setuDescription": "Merchant PSP error",
                    "suggestedAction": "Merchant PSP error"
                  },
                  "refId": "1240689979139556558",
                  "referenceId": "1240689979139556556",
                  "requestId": "cjqml1f2e5ocq2mesej0",
                  "secondaryAccounts": [
                    {
                      "IFSC": "SBIN0000001",
                      "encryptedAccountName": "5e884898da28047151d0e56f8dc629277",
                      "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                      "hashedAccountName": "5e884898da28047151d0e56f8dc629277",
                      "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                      "maskedAccountName": "R*M*E*S*",
                      "maskedAccountNumber": "**** **** **** 7890"
                    },
                    {
                      "IFSC": "SBIN0000001",
                      "encryptedAccountName": "5e884898da28047151d0e56f8dc629277",
                      "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                      "hashedAccountName": "5e884898da28047151d0e56f8dc629277",
                      "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                      "maskedAccountName": "R*M*E*S*",
                      "maskedAccountNumber": "**** **** **** 7890"
                    }
                  ],
                  "shortLink": "upipay.setu.co/Np3KnBCM8Om0",
                  "status": "active",
                  "transactionNote": "test transaction"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest: Bad Request response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel2"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized: Unauthorized response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel2"
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError: Internal Server Error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel2"
                }
              }
            }
          }
        },
        "security": [{ "jwt_header_Authorization": [] }]
      }
    },
    "/api/v1/merchants/tpv-plus": {
      "post": {
        "tags": ["TPV Plus"],
        "summary": "Create tpv plus qr",
        "description": "Create a TPV Plus based qr which can be used to verify the bank account, payer apps from which the payment was made",
        "operationId": "tpv-plus#createTPVPlus",
        "parameters": [
          {
            "name": "merchantId",
            "in": "header",
            "description": "Id associated with the merchant on our platform",
            "allowEmptyValue": true,
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id associated with the merchant on our platform",
              "example": "1240689979139556556"
            },
            "example": "1240689979139556556"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTPVPlusRequestBody"
              },
              "example": {
                "amount": 10000,
                "bankCodes": ["ICIC", "HDFC", "FDRL"],
                "createdAt": "2024-05-17T19:17:32+05:30",
                "expireAfter": 10,
                "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                "intentLink": "upi://pay?pa=test-auto-pgruosncak@okokaxis\u0026pn=merchant-4\u0026am=100.00\u0026tr=SU1240659756905923780\u0026tn=samplesingleuseqr\u0026cu=INR\u0026mc=1234",
                "merchantVpa": "fastestupi@pineaxis",
                "metadata": { "InvoiceNumber": "INV-21-12-009" },
                "minAmount": 1000,
                "payerApps": ["gpay", "phonepe", "paytm", "amazonpay"],
                "payerVPAs": ["aadhitya@okhdfc", "ram@okaxis"],
                "qrCode": "",
                "reason": {
                  "code": "unable-to-fulfill-request",
                  "desc": "unable-to-fulfill-request",
                  "npciErrCategory": "TD",
                  "npciErrCode": "YG",
                  "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
                  "npciRespCode": "YG",
                  "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)",
                  "setuDescription": "Merchant PSP error",
                  "suggestedAction": "Merchant PSP error"
                },
                "refId": "1240689979139556558",
                "referenceId": "1240689979139556556",
                "shortLink": "upipay.setu.co/Np3KnBCM8Om0",
                "status": "active",
                "transactionNote": "test transaction"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateTPVPlusResponse"
                },
                "example": {
                  "amount": 10000,
                  "bankCodes": ["ICIC", "HDFC", "FDRL"],
                  "createdAt": "2024-05-17T19:17:32+05:30",
                  "expireAfter": 10,
                  "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "intentLink": "upi://pay?pa=test-auto-pgruosncak@okokaxis\u0026pn=merchant-4\u0026am=100.00\u0026tr=SU1240659756905923780\u0026tn=samplesingleuseqr\u0026cu=INR\u0026mc=1234",
                  "merchantId": "1240689979139556556",
                  "merchantVpa": "fastestupi@pineaxis",
                  "metadata": { "InvoiceNumber": "INV-21-12-009" },
                  "minAmount": 1000,
                  "payerApps": ["gpay", "phonepe", "paytm", "amazonpay"],
                  "payerVPAs": ["aadhitya@okhdfc", "ram@okaxis"],
                  "qrCode": "",
                  "reason": {
                    "code": "unable-to-fulfill-request",
                    "desc": "unable-to-fulfill-request",
                    "npciErrCategory": "TD",
                    "npciErrCode": "YG",
                    "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
                    "npciRespCode": "YG",
                    "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)",
                    "setuDescription": "Merchant PSP error",
                    "suggestedAction": "Merchant PSP error"
                  },
                  "refId": "1240689979139556558",
                  "referenceId": "1240689979139556556",
                  "requestId": "cjqml1f2e5ocq2mesej0",
                  "shortLink": "upipay.setu.co/Np3KnBCM8Om0",
                  "status": "active",
                  "transactionNote": "test transaction"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest: Bad Request response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel2"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized: Unauthorized response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel2"
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError: Internal Server Error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel2"
                }
              }
            }
          }
        },
        "security": [{ "jwt_header_Authorization": [] }]
      }
    },
    "/api/v1/merchants/tpv-plus/{id}": {
      "get": {
        "tags": ["TPV Plus"],
        "summary": "Fetch tpv plus request by id",
        "description": "API to fetch a tpv plus request resource by id, which has useful information like the current status of a tpv plus request",
        "operationId": "tpv-plus#fetchTPVPlus",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id associated with the tpv plus resource",
            "required": true,
            "schema": {
              "type": "string",
              "description": "id associated with the tpv plus resource",
              "example": "1240689979139556556"
            },
            "example": "1240689979139556556"
          },
          {
            "name": "merchantId",
            "in": "header",
            "description": "Id associated with the merchant on our platform",
            "allowEmptyValue": true,
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id associated with the merchant on our platform",
              "example": "1240689979139556556"
            },
            "example": "1240689979139556556"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FetchTPVPlusResponse"
                },
                "example": {
                  "amount": 10000,
                  "bankCodes": ["ICIC", "HDFC", "FDRL"],
                  "createdAt": "2024-05-17T19:17:32+05:30",
                  "expireAfter": 10,
                  "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "intentLink": "upi://pay?pa=test-auto-pgruosncak@okokaxis\u0026pn=merchant-4\u0026am=100.00\u0026tr=SU1240659756905923780\u0026tn=samplesingleuseqr\u0026cu=INR\u0026mc=1234",
                  "merchantId": "1240689979139556556",
                  "merchantVpa": "fastestupi@pineaxis",
                  "metadata": { "InvoiceNumber": "INV-21-12-009" },
                  "minAmount": 1000,
                  "payerApps": ["gpay", "phonepe", "paytm", "amazonpay"],
                  "payerVPAs": ["aadhitya@okhdfc", "ram@okaxis"],
                  "paymentDetails": {
                    "customerAccountType": "SAVINGS",
                    "customerVpa": "test-auto-tyvmm59i9b@okokaxis",
                    "paymentId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                    "paymentStatus": "initiated",
                    "rrn": "124068997913",
                    "txnId": "SETmBZkQOV0M7wyyP1V4PIFhRSzW5eSjmYI"
                  },
                  "qrCode": "",
                  "reason": {
                    "code": "unable-to-fulfill-request",
                    "desc": "unable-to-fulfill-request",
                    "npciErrCategory": "TD",
                    "npciErrCode": "YG",
                    "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
                    "npciRespCode": "YG",
                    "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)",
                    "setuDescription": "Merchant PSP error",
                    "suggestedAction": "Merchant PSP error"
                  },
                  "refId": "1240689979139556558",
                  "referenceId": "1240689979139556556",
                  "requestId": "cjqml1f2e5ocq2mesej0",
                  "shortLink": "upipay.setu.co/Np3KnBCM8Om0",
                  "status": "active",
                  "transactionNote": "test transaction"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest: Bad Request response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel2"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized: Unauthorized response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel2"
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError: Internal Server Error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel2"
                }
              }
            }
          }
        },
        "security": [{ "jwt_header_Authorization": [] }]
      }
    },
    "/api/v1/merchants/tpv/history": {
      "get": {
        "tags": ["TPV"],
        "summary": "List last few TPV Qrs",
        "description": "API to fetch the history of TPV QRs for a merchant",
        "operationId": "tpv#history",
        "parameters": [
          {
            "name": "merchantId",
            "in": "header",
            "allowEmptyValue": true,
            "required": true,
            "schema": {
              "type": "string",
              "example": "Est temporibus laboriosam omnis."
            },
            "example": "Earum accusantium impedit repellendus."
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListTpvHistoryResponse"
                },
                "example": {
                  "data": [
                    {
                      "amount": 10000,
                      "closedAt": "At commodi labore aut ut.",
                      "createdAt": "2024-05-17T19:17:32+05:30",
                      "expireAfter": 10,
                      "id": "1240689979139556556",
                      "intentLink": "upi://pay?pa=test-auto-pgruosncak@okokaxis\u0026pn=merchant-4\u0026am=100.00\u0026tr=SU1240659756905923780\u0026tn=sample%20single%20use%20qr\u0026cu=INR\u0026mc=1234",
                      "merchantId": "1240689979139556556",
                      "merchantVpa": "fastestupi@pineaxis",
                      "metadata": { "InvoiceNumber": "INV-21-12-009" },
                      "minAmount": 1000,
                      "primaryAccount": {
                        "IFSC": "SBIN0000001",
                        "encryptedAccountName": "5e884898da28047151d0e56f8dc629277",
                        "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                        "hashedAccountName": "5e884898da28047151d0e56f8dc629277",
                        "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                        "maskedAccountName": "R*M*E*S*",
                        "maskedAccountNumber": "**** **** **** 7890"
                      },
                      "qrCode": "",
                      "reason": {
                        "code": "unable-to-fulfill-request",
                        "desc": "unable-to-fulfill-request",
                        "npciErrCategory": "TD",
                        "npciErrCode": "YG",
                        "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
                        "npciRespCode": "YG",
                        "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)",
                        "setuDescription": "Merchant PSP error",
                        "suggestedAction": "Merchant PSP error"
                      },
                      "refId": "1240689979139556558",
                      "referenceId": "1240689979139556556",
                      "secondaryAccounts": [
                        {
                          "IFSC": "SBIN0000001",
                          "encryptedAccountName": "5e884898da28047151d0e56f8dc629277",
                          "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                          "hashedAccountName": "5e884898da28047151d0e56f8dc629277",
                          "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                          "maskedAccountName": "R*M*E*S*",
                          "maskedAccountNumber": "**** **** **** 7890"
                        },
                        {
                          "IFSC": "SBIN0000001",
                          "encryptedAccountName": "5e884898da28047151d0e56f8dc629277",
                          "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                          "hashedAccountName": "5e884898da28047151d0e56f8dc629277",
                          "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                          "maskedAccountName": "R*M*E*S*",
                          "maskedAccountNumber": "**** **** **** 7890"
                        }
                      ],
                      "shortLink": "upipay.setu.co/Np3KnBCM8Om0",
                      "status": "active",
                      "transactionNote": "test transaction"
                    },
                    {
                      "amount": 10000,
                      "closedAt": "At commodi labore aut ut.",
                      "createdAt": "2024-05-17T19:17:32+05:30",
                      "expireAfter": 10,
                      "id": "1240689979139556556",
                      "intentLink": "upi://pay?pa=test-auto-pgruosncak@okokaxis\u0026pn=merchant-4\u0026am=100.00\u0026tr=SU1240659756905923780\u0026tn=sample%20single%20use%20qr\u0026cu=INR\u0026mc=1234",
                      "merchantId": "1240689979139556556",
                      "merchantVpa": "fastestupi@pineaxis",
                      "metadata": { "InvoiceNumber": "INV-21-12-009" },
                      "minAmount": 1000,
                      "primaryAccount": {
                        "IFSC": "SBIN0000001",
                        "encryptedAccountName": "5e884898da28047151d0e56f8dc629277",
                        "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                        "hashedAccountName": "5e884898da28047151d0e56f8dc629277",
                        "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                        "maskedAccountName": "R*M*E*S*",
                        "maskedAccountNumber": "**** **** **** 7890"
                      },
                      "qrCode": "",
                      "reason": {
                        "code": "unable-to-fulfill-request",
                        "desc": "unable-to-fulfill-request",
                        "npciErrCategory": "TD",
                        "npciErrCode": "YG",
                        "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
                        "npciRespCode": "YG",
                        "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)",
                        "setuDescription": "Merchant PSP error",
                        "suggestedAction": "Merchant PSP error"
                      },
                      "refId": "1240689979139556558",
                      "referenceId": "1240689979139556556",
                      "secondaryAccounts": [
                        {
                          "IFSC": "SBIN0000001",
                          "encryptedAccountName": "5e884898da28047151d0e56f8dc629277",
                          "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                          "hashedAccountName": "5e884898da28047151d0e56f8dc629277",
                          "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                          "maskedAccountName": "R*M*E*S*",
                          "maskedAccountNumber": "**** **** **** 7890"
                        },
                        {
                          "IFSC": "SBIN0000001",
                          "encryptedAccountName": "5e884898da28047151d0e56f8dc629277",
                          "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                          "hashedAccountName": "5e884898da28047151d0e56f8dc629277",
                          "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                          "maskedAccountName": "R*M*E*S*",
                          "maskedAccountNumber": "**** **** **** 7890"
                        }
                      ],
                      "shortLink": "upipay.setu.co/Np3KnBCM8Om0",
                      "status": "active",
                      "transactionNote": "test transaction"
                    }
                  ],
                  "requestId": "cjqml1f2e5ocq2mesej0"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest: Bad Request response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel2"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized: Unauthorized response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel2"
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError: Internal Server Error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel2"
                }
              }
            }
          }
        },
        "security": [{ "jwt_header_Authorization": [] }]
      }
    },
    "/api/v1/merchants/tpv/{id}": {
      "get": {
        "tags": ["TPV"],
        "summary": "Fetch tpv request by id",
        "description": "API to fetch a tpv request resource by id, which has useful information like the current status of a tpv request",
        "operationId": "tpv#fetchTPV",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id associated with the tpv",
            "required": true,
            "schema": {
              "type": "string",
              "description": "id associated with the tpv",
              "example": "1240689979139556556"
            },
            "example": "1240689979139556556"
          },
          {
            "name": "merchantId",
            "in": "header",
            "description": "Id associated with the merchant on our platform",
            "allowEmptyValue": true,
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id associated with the merchant on our platform",
              "example": "1240689979139556556"
            },
            "example": "1240689979139556556"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/FetchTPVResponse" },
                "example": {
                  "amount": 10000,
                  "closedAt": "Quaerat voluptatibus eos libero autem odio.",
                  "createdAt": "2024-05-17T19:17:32+05:30",
                  "expireAfter": 10,
                  "id": "1240689979139556556",
                  "intentLink": "upi://pay?pa=test-auto-pgruosncak@okokaxis\u0026pn=merchant-4\u0026am=100.00\u0026tr=SU1240659756905923780\u0026tn=sample%20single%20use%20qr\u0026cu=INR\u0026mc=1234",
                  "merchantId": "1240689979139556556",
                  "merchantVpa": "fastestupi@pineaxis",
                  "metadata": { "InvoiceNumber": "INV-21-12-009" },
                  "minAmount": 1000,
                  "paymentDetails": {
                    "customerAccountType": "SAVINGS",
                    "customerVpa": "test-auto-tyvmm59i9b@okokaxis",
                    "paymentId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                    "paymentStatus": "initiated",
                    "rrn": "124068997913",
                    "txnId": "SETmBZkQOV0M7wyyP1V4PIFhRSzW5eSjmYI"
                  },
                  "primaryAccount": {
                    "IFSC": "SBIN0000001",
                    "encryptedAccountName": "5e884898da28047151d0e56f8dc629277",
                    "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                    "hashedAccountName": "5e884898da28047151d0e56f8dc629277",
                    "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                    "maskedAccountName": "R*M*E*S*",
                    "maskedAccountNumber": "**** **** **** 7890"
                  },
                  "qrCode": "",
                  "reason": {
                    "code": "unable-to-fulfill-request",
                    "desc": "unable-to-fulfill-request",
                    "npciErrCategory": "TD",
                    "npciErrCode": "YG",
                    "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
                    "npciRespCode": "YG",
                    "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)",
                    "setuDescription": "Merchant PSP error",
                    "suggestedAction": "Merchant PSP error"
                  },
                  "refId": "1240689979139556558",
                  "referenceId": "1240689979139556556",
                  "requestId": "cjqml1f2e5ocq2mesej0",
                  "secondaryAccounts": [
                    {
                      "IFSC": "SBIN0000001",
                      "encryptedAccountName": "5e884898da28047151d0e56f8dc629277",
                      "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                      "hashedAccountName": "5e884898da28047151d0e56f8dc629277",
                      "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                      "maskedAccountName": "R*M*E*S*",
                      "maskedAccountNumber": "**** **** **** 7890"
                    },
                    {
                      "IFSC": "SBIN0000001",
                      "encryptedAccountName": "5e884898da28047151d0e56f8dc629277",
                      "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                      "hashedAccountName": "5e884898da28047151d0e56f8dc629277",
                      "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                      "maskedAccountName": "R*M*E*S*",
                      "maskedAccountNumber": "**** **** **** 7890"
                    },
                    {
                      "IFSC": "SBIN0000001",
                      "encryptedAccountName": "5e884898da28047151d0e56f8dc629277",
                      "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                      "hashedAccountName": "5e884898da28047151d0e56f8dc629277",
                      "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                      "maskedAccountName": "R*M*E*S*",
                      "maskedAccountNumber": "**** **** **** 7890"
                    },
                    {
                      "IFSC": "SBIN0000001",
                      "encryptedAccountName": "5e884898da28047151d0e56f8dc629277",
                      "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                      "hashedAccountName": "5e884898da28047151d0e56f8dc629277",
                      "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                      "maskedAccountName": "R*M*E*S*",
                      "maskedAccountNumber": "**** **** **** 7890"
                    }
                  ],
                  "shortLink": "upipay.setu.co/Np3KnBCM8Om0",
                  "status": "active",
                  "transactionNote": "test transaction"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest: Bad Request response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel2"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized: Unauthorized response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel2"
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError: Internal Server Error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel2"
                }
              }
            }
          }
        },
        "security": [{ "jwt_header_Authorization": [] }]
      }
    },
    "/api/v1/merchants/tpv/{id}/expire": {
      "put": {
        "tags": ["TPV"],
        "summary": "Expire tpv instance by id",
        "description": "API to expire a tpv request resource by id",
        "operationId": "tpv#expireTPV",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id associated with the tpv",
            "required": true,
            "schema": {
              "type": "string",
              "description": "id associated with the tpv",
              "example": "1240689979139556556"
            },
            "example": "1240689979139556556"
          },
          {
            "name": "merchantId",
            "in": "header",
            "description": "Id associated with the merchant on our platform",
            "allowEmptyValue": true,
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id associated with the merchant on our platform",
              "example": "1240689979139556556"
            },
            "example": "1240689979139556556"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CreateTPVResponse" },
                "example": {
                  "amount": 10000,
                  "closedAt": "Repellat ut quo quis.",
                  "createdAt": "2024-05-17T19:17:32+05:30",
                  "expireAfter": 10,
                  "id": "1240689979139556556",
                  "intentLink": "upi://pay?pa=test-auto-pgruosncak@okokaxis\u0026pn=merchant-4\u0026am=100.00\u0026tr=SU1240659756905923780\u0026tn=sample%20single%20use%20qr\u0026cu=INR\u0026mc=1234",
                  "merchantId": "1240689979139556556",
                  "merchantVpa": "fastestupi@pineaxis",
                  "metadata": { "InvoiceNumber": "INV-21-12-009" },
                  "minAmount": 1000,
                  "primaryAccount": {
                    "IFSC": "SBIN0000001",
                    "encryptedAccountName": "5e884898da28047151d0e56f8dc629277",
                    "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                    "hashedAccountName": "5e884898da28047151d0e56f8dc629277",
                    "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                    "maskedAccountName": "R*M*E*S*",
                    "maskedAccountNumber": "**** **** **** 7890"
                  },
                  "qrCode": "",
                  "reason": {
                    "code": "unable-to-fulfill-request",
                    "desc": "unable-to-fulfill-request",
                    "npciErrCategory": "TD",
                    "npciErrCode": "YG",
                    "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
                    "npciRespCode": "YG",
                    "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)",
                    "setuDescription": "Merchant PSP error",
                    "suggestedAction": "Merchant PSP error"
                  },
                  "refId": "1240689979139556558",
                  "referenceId": "1240689979139556556",
                  "requestId": "cjqml1f2e5ocq2mesej0",
                  "secondaryAccounts": [
                    {
                      "IFSC": "SBIN0000001",
                      "encryptedAccountName": "5e884898da28047151d0e56f8dc629277",
                      "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                      "hashedAccountName": "5e884898da28047151d0e56f8dc629277",
                      "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                      "maskedAccountName": "R*M*E*S*",
                      "maskedAccountNumber": "**** **** **** 7890"
                    },
                    {
                      "IFSC": "SBIN0000001",
                      "encryptedAccountName": "5e884898da28047151d0e56f8dc629277",
                      "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                      "hashedAccountName": "5e884898da28047151d0e56f8dc629277",
                      "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                      "maskedAccountName": "R*M*E*S*",
                      "maskedAccountNumber": "**** **** **** 7890"
                    }
                  ],
                  "shortLink": "upipay.setu.co/Np3KnBCM8Om0",
                  "status": "active",
                  "transactionNote": "test transaction"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest: Bad Request response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel2"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized: Unauthorized response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel2"
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError: Internal Server Error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel2"
                }
              }
            }
          }
        },
        "security": [{ "jwt_header_Authorization": [] }]
      }
    },
    "/api/v1/merchants/vpas": {
      "get": {
        "tags": ["VPA"],
        "summary": "List VPAs",
        "description": "API to list all VPAs associated to a merchant",
        "operationId": "vpa#list",
        "parameters": [
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor to the current page",
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "description": "Cursor to the current page",
              "example": "MDFBUlozTkRFS1RTVjRSUkZGUTY5RzVGQVY="
            },
            "example": "MDFBUlozTkRFS1RTVjRSUkZGUTY5RzVGQVY="
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of records to be shown in a page",
            "allowEmptyValue": true,
            "schema": {
              "type": "integer",
              "description": "Number of records to be shown in a page",
              "default": 10,
              "example": 10,
              "minimum": 1,
              "maximum": 50
            },
            "example": 10
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Filters to be applied on the query",
            "allowEmptyValue": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "Beatae accusamus autem quod accusamus similique cupiditate."
              },
              "description": "Filters to be applied on the query",
              "example": ["name:foo"]
            },
            "example": ["name:foo"]
          },
          {
            "name": "merchantId",
            "in": "header",
            "description": "Id associated with the merchant on our platform",
            "allowEmptyValue": true,
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id associated with the merchant on our platform",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "headers": {
              "requestId": {
                "schema": {
                  "type": "string",
                  "example": "cjqml1f2e5ocq2mesej0"
                },
                "example": "cjqml1f2e5ocq2mesej0"
              }
            },
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ListVpaResponse" },
                "example": {
                  "meta": {
                    "cursor": {
                      "current": "MDFBUlozTkRFS1RTVjRSUkZGUTY5RzVGQVY=",
                      "next": "MDFBUlozTkRFS1RTVjRSUkZGUTY5RzVGQVY=",
                      "previous": "MDFBUlozTkRFS1RTVjRSUkZGUTY5RzVGQVY="
                    },
                    "filter": ["name:foo"],
                    "limit": 10,
                    "totalRecords": 2126004511
                  },
                  "vpas": [
                    {
                      "createdAt": "2024-05-17T19:17:32+05:30",
                      "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                      "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                      "referenceId": "1240689979139556557",
                      "status": "active",
                      "verificationStatus": "verified",
                      "vpa": "fastestupi@pineaxis"
                    },
                    {
                      "createdAt": "2024-05-17T19:17:32+05:30",
                      "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                      "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                      "referenceId": "1240689979139556557",
                      "status": "active",
                      "verificationStatus": "verified",
                      "vpa": "fastestupi@pineaxis"
                    },
                    {
                      "createdAt": "2024-05-17T19:17:32+05:30",
                      "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                      "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                      "referenceId": "1240689979139556557",
                      "status": "active",
                      "verificationStatus": "verified",
                      "vpa": "fastestupi@pineaxis"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad request: Bad Request response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Forbidden response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not found: Not Found response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error: Internal Server Error response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          }
        },
        "security": [{ "jwt_header_Authorization": [] }]
      },
      "post": {
        "tags": ["VPA"],
        "summary": "Register a VPA (UPI id)",
        "description": "API to register a UPI id on our platform, the VPA will be registered and verified only if it is available",
        "operationId": "vpa#create",
        "parameters": [
          {
            "name": "merchantId",
            "in": "header",
            "description": "Id associated with the merchant on our platform",
            "allowEmptyValue": true,
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id associated with the merchant on our platform",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CreateRequestBody5" },
              "example": {
                "referenceId": "1240689979139556557",
                "vpa": "fastestupi@pineaxis"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created response.",
            "headers": {
              "requestId": {
                "schema": {
                  "type": "string",
                  "example": "cjqml1f2e5ocq2mesej0"
                },
                "example": "cjqml1f2e5ocq2mesej0"
              }
            },
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/VpaResponse" },
                "example": {
                  "createdAt": "2024-05-17T19:17:32+05:30",
                  "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "referenceId": "1240689979139556557",
                  "status": "active",
                  "verificationStatus": "verified",
                  "vpa": "fastestupi@pineaxis"
                }
              }
            }
          },
          "400": {
            "description": "Bad request: Bad Request response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Forbidden response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not found: Not Found response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error: Internal Server Error response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          }
        },
        "security": [{ "jwt_header_Authorization": [] }]
      }
    },
    "/api/v1/merchants/vpas/availability": {
      "post": {
        "tags": ["VPA"],
        "summary": "Check VPA availability",
        "description": "API to check if a UPI id is available to be registered by a merchant",
        "operationId": "vpa#checkAvailability",
        "parameters": [
          {
            "name": "merchantId",
            "in": "header",
            "description": "Id associated with the merchant on our platform",
            "allowEmptyValue": true,
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id associated with the merchant on our platform",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CheckAvailabilityRequestBody"
              },
              "example": { "vpa": "fastestupi@pineaxis" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK response.",
            "headers": {
              "requestId": {
                "schema": {
                  "type": "string",
                  "example": "cjqml1f2e5ocq2mesej0"
                },
                "example": "cjqml1f2e5ocq2mesej0"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckVpaAvailabilityResponse"
                },
                "example": {
                  "availabilityStatus": "available",
                  "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "vpa": "fastestupi@pineaxis"
                }
              }
            }
          },
          "400": {
            "description": "Bad request: Bad Request response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Forbidden response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not found: Not Found response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error: Internal Server Error response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          }
        },
        "security": [{ "jwt_header_Authorization": [] }]
      }
    },
    "/api/v1/merchants/vpas/{id}": {
      "get": {
        "tags": ["VPA"],
        "summary": "Fetch VPA by id",
        "description": "API to fetch the VPA resource by id (the same id returned in the Register a VPA API response), the response has useful information like the current status of the vpa",
        "operationId": "vpa#fetchById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the resource, which is the same the id returned in the Create \u003cresource\u003e API response",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id of the resource, which is the same the id returned in the Create \u003cresource\u003e API response",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          {
            "name": "merchantId",
            "in": "header",
            "description": "Id associated with the merchant on our platform",
            "allowEmptyValue": true,
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id associated with the merchant on our platform",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "headers": {
              "requestId": {
                "schema": {
                  "type": "string",
                  "example": "cjqml1f2e5ocq2mesej0"
                },
                "example": "cjqml1f2e5ocq2mesej0"
              }
            },
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/VpaResponse" },
                "example": {
                  "createdAt": "2024-05-17T19:17:32+05:30",
                  "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "referenceId": "1240689979139556557",
                  "status": "active",
                  "verificationStatus": "verified",
                  "vpa": "fastestupi@pineaxis"
                }
              }
            }
          },
          "400": {
            "description": "Bad request: Bad Request response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Forbidden response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not found: Not Found response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error: Internal Server Error response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          }
        },
        "security": [{ "jwt_header_Authorization": [] }]
      }
    },
    "/api/v1/merchants/vpas/{id}/status": {
      "put": {
        "tags": ["VPA"],
        "summary": "Activate or deactivate a VPA (UPI id)",
        "description": "API to activate or deactivate a UPI id, to temporarily disallow payments and verification calls on the UPI id",
        "operationId": "vpa#updateStatus",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the resource, which is the same the id returned in the Create \u003cresource\u003e API response",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id of the resource, which is the same the id returned in the Create \u003cresource\u003e API response",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          {
            "name": "merchantId",
            "in": "header",
            "description": "Id associated with the merchant on our platform",
            "allowEmptyValue": true,
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id associated with the merchant on our platform",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateStatusRequestBody"
              },
              "example": { "status": "active" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK response.",
            "headers": {
              "requestId": {
                "schema": {
                  "type": "string",
                  "example": "cjqml1f2e5ocq2mesej0"
                },
                "example": "cjqml1f2e5ocq2mesej0"
              }
            },
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/VpaResponse" },
                "example": {
                  "createdAt": "2024-05-17T19:17:32+05:30",
                  "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "referenceId": "1240689979139556557",
                  "status": "active",
                  "verificationStatus": "verified",
                  "vpa": "fastestupi@pineaxis"
                }
              }
            }
          },
          "400": {
            "description": "Bad request: Bad Request response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Forbidden response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not found: Not Found response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error: Internal Server Error response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          }
        },
        "security": [{ "jwt_header_Authorization": [] }]
      }
    },
    "/api/v1/merchants/{id}": {
      "get": {
        "tags": ["Merchant"],
        "summary": "Fetch merchant",
        "description": "Fetch merchant",
        "operationId": "merchant#fetchById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the resource, which is the same the id returned in the Create \u003cresource\u003e API response",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id of the resource, which is the same the id returned in the Create \u003cresource\u003e API response",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "headers": {
              "requestId": {
                "schema": {
                  "type": "string",
                  "example": "cjqml1f2e5ocq2mesej0"
                },
                "example": "cjqml1f2e5ocq2mesej0"
              }
            },
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/MerchantResponse" },
                "example": {
                  "acceptDeemedTxns": true,
                  "addressProviderId": "1237800298651584417",
                  "businessName": "Setu",
                  "businessType": "PROPRIETARY",
                  "createdAt": "2024-05-17T19:17:32+05:30",
                  "documentStatus": "APPROVED",
                  "franchiseName": "Setu UPI",
                  "genre": "ONLINE",
                  "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "legalName": "BrokenTusk Technologies Pvt Ltd",
                  "mcc": "5432",
                  "merchantName": "Fugit nostrum.",
                  "merchantType": "large",
                  "onboardingType": "aggregator",
                  "paymentAggregatorId": "Aperiam illum corporis deleniti dolor dolores soluta.",
                  "paymentModes": [
                    "saving",
                    "lite",
                    "erupi",
                    "rupay_cc",
                    "ppi",
                    "current",
                    "nro",
                    "nre"
                  ],
                  "productAccountId": "Numquam natus quia et qui.",
                  "products": [
                    "pay_single",
                    "pay_multi",
                    "tpv",
                    "tpv_plus",
                    "intent_autopay"
                  ],
                  "settlement": {
                    "cycles": [
                      {
                        "endTime": "1977-01-17T07:19:44Z",
                        "settlementTime": "1995-03-19T23:15:19Z",
                        "startTime": "2008-11-27T00:50:41Z"
                      },
                      {
                        "endTime": "1977-01-17T07:19:44Z",
                        "settlementTime": "1995-03-19T23:15:19Z",
                        "startTime": "2008-11-27T00:50:41Z"
                      },
                      {
                        "endTime": "1977-01-17T07:19:44Z",
                        "settlementTime": "1995-03-19T23:15:19Z",
                        "startTime": "2008-11-27T00:50:41Z"
                      }
                    ],
                    "frequency": "TPlusOne",
                    "splitsEnabled": false,
                    "type": "Net"
                  },
                  "settlementsEnabled": true,
                  "standardAccountId": "Sint veniam repellat tenetur ea ex.",
                  "transactionStatus": "active",
                  "vpaHandles": ["pineaxis"],
                  "vpaPrefix": "acmecorp.*"
                }
              }
            }
          },
          "400": {
            "description": "Bad request: Bad Request response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not found: Not Found response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error: Internal Server Error response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          }
        },
        "security": [{ "jwt_header_Authorization": [] }]
      }
    },
    "/api/v1/merchants/{id}/status": {
      "put": {
        "tags": ["Merchant"],
        "summary": "Update Merchant transaction status",
        "description": "API to be used to update merchant transaction status",
        "operationId": "merchant#updateTxnStatus",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the resource, which is the same the id returned in the Create \u003cresource\u003e API response",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id of the resource, which is the same the id returned in the Create \u003cresource\u003e API response",
              "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
            },
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTxnStatusRequestBody"
              },
              "example": { "transactionStatus": "active" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK response.",
            "headers": {
              "requestId": {
                "schema": {
                  "type": "string",
                  "example": "cjqml1f2e5ocq2mesej0"
                },
                "example": "cjqml1f2e5ocq2mesej0"
              }
            },
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/MerchantResponse" },
                "example": {
                  "acceptDeemedTxns": true,
                  "addressProviderId": "1237800298651584417",
                  "businessName": "Setu",
                  "businessType": "PROPRIETARY",
                  "createdAt": "2024-05-17T19:17:32+05:30",
                  "documentStatus": "APPROVED",
                  "franchiseName": "Setu UPI",
                  "genre": "ONLINE",
                  "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "legalName": "BrokenTusk Technologies Pvt Ltd",
                  "mcc": "5432",
                  "merchantName": "Qui molestiae quis accusamus sint.",
                  "merchantType": "large",
                  "onboardingType": "aggregator",
                  "paymentAggregatorId": "Praesentium cupiditate.",
                  "paymentModes": [
                    "saving",
                    "lite",
                    "erupi",
                    "rupay_cc",
                    "ppi",
                    "current",
                    "nro",
                    "nre"
                  ],
                  "productAccountId": "At est totam.",
                  "products": [
                    "pay_single",
                    "pay_multi",
                    "tpv",
                    "tpv_plus",
                    "intent_autopay"
                  ],
                  "settlement": {
                    "cycles": [
                      {
                        "endTime": "1977-01-17T07:19:44Z",
                        "settlementTime": "1995-03-19T23:15:19Z",
                        "startTime": "2008-11-27T00:50:41Z"
                      },
                      {
                        "endTime": "1977-01-17T07:19:44Z",
                        "settlementTime": "1995-03-19T23:15:19Z",
                        "startTime": "2008-11-27T00:50:41Z"
                      },
                      {
                        "endTime": "1977-01-17T07:19:44Z",
                        "settlementTime": "1995-03-19T23:15:19Z",
                        "startTime": "2008-11-27T00:50:41Z"
                      }
                    ],
                    "frequency": "TPlusOne",
                    "splitsEnabled": false,
                    "type": "Net"
                  },
                  "settlementsEnabled": false,
                  "standardAccountId": "Quam cum doloremque.",
                  "transactionStatus": "active",
                  "vpaHandles": ["pineaxis"],
                  "vpaPrefix": "acmecorp.*"
                }
              }
            }
          },
          "400": {
            "description": "Bad request: Bad Request response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Forbidden response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not found: Not Found response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error: Internal Server Error response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          }
        },
        "security": [{ "jwt_header_Authorization": [] }]
      }
    },
    "/api/v1/resolve/{code}": {
      "get": {
        "tags": ["Short link"],
        "summary": "Resolve shortlink",
        "description": "API to resolve a shortlink to its underlying payment context",
        "operationId": "short-link#fetchByShortCode",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "description": "short code used for payment short link",
            "required": true,
            "schema": {
              "type": "string",
              "description": "short code used for payment short link",
              "example": "Np3KnBCM8Om0"
            },
            "example": "Np3KnBCM8Om0"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "headers": {
              "requestId": {
                "schema": {
                  "type": "string",
                  "example": "cjqml1f2e5ocq2mesej0"
                },
                "example": "cjqml1f2e5ocq2mesej0"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResolveShortlinkResponse"
                },
                "example": {
                  "amount": 10000,
                  "closedAt": "2024-06-17T19:17:32+05:30",
                  "createdAt": "2024-05-17T19:17:32+05:30",
                  "currency": "Facere dolores autem.",
                  "expiryDate": "2024-06-17T19:17:32+05:30",
                  "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "intentLink": "upi://pay?pa=test-auto-pgruosncak@okokaxis\u0026pn=merchant-4\u0026am=100.00\u0026tr=SU1240659756905923780\u0026tn=sample%20single%20use%20qr\u0026cu=INR\u0026mc=1234",
                  "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "merchantName": "Doofenshmirtz Evil Incorporated",
                  "merchantVpa": "fastestupi@pineaxis",
                  "metadata": { "InvoiceNumber": "INV-21-12-009" },
                  "minAmount": 1000,
                  "paymentDetails": {
                    "customerAccountType": "SAVINGS",
                    "customerVpa": "test-auto-tyvmm59i9b@okokaxis",
                    "paymentId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                    "paymentStatus": "initiated",
                    "rrn": "124068997913",
                    "txnId": "SETmBZkQOV0M7wyyP1V4PIFhRSzW5eSjmYI"
                  },
                  "paymentType": "Voluptatibus adipisci voluptas vitae dolore totam id.",
                  "qrCode": "",
                  "reason": {
                    "code": "unable-to-fulfill-request",
                    "desc": "unable-to-fulfill-request",
                    "npciErrCategory": "TD",
                    "npciErrCode": "YG",
                    "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
                    "npciRespCode": "YG",
                    "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)",
                    "setuDescription": "Merchant PSP error",
                    "suggestedAction": "Merchant PSP error"
                  },
                  "refId": "1240689979139556558",
                  "referenceId": "1240689979139556557",
                  "shortLink": "upipay.setu.co/Np3KnBCM8Om0",
                  "status": "active",
                  "transactionNote": "testpay"
                }
              }
            }
          },
          "400": {
            "description": "Bad request: Bad Request response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Forbidden response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not found: Not Found response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error: Internal Server Error response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/internal/api/v1/merchants/payments/{paymentId}/status": {
      "post": {
        "tags": ["Payments"],
        "summary": "Update payment status",
        "description": "API to update the status of a payment",
        "operationId": "payments#updatePaymentStatus",
        "parameters": [
          {
            "name": "paymentId",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "example": "Quasi magnam." },
            "example": "Vero magnam dignissimos quod."
          },
          {
            "name": "merchantId",
            "in": "header",
            "allowEmptyValue": true,
            "required": true,
            "schema": {
              "type": "string",
              "example": "Minima aperiam quia delectus aut."
            },
            "example": "Soluta quaerat et et dolor."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateStatusRequestBody"
              },
              "example": { "status": "Qui ut dolorem omnis labore." }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK response.",
            "headers": {
              "requestId": {
                "schema": {
                  "type": "string",
                  "example": "cjqml1f2e5ocq2mesej0"
                },
                "example": "cjqml1f2e5ocq2mesej0"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FetchPaymentResponse"
                },
                "example": {
                  "amount": 10000,
                  "bin": "652922",
                  "createdAt": "2024-05-17T19:17:32+05:30",
                  "currency": "INR",
                  "customerAccountType": "SAVINGS",
                  "customerVpa": "test-auto-tyvmm59i9b@okokaxis",
                  "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "merchantVpa": "test-auto-beibfev2oq@okokaxis",
                  "productInstanceId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "reason": {
                    "code": "unable-to-fulfill-request",
                    "desc": "unable-to-fulfill-request",
                    "npciErrCategory": "TD",
                    "npciErrCode": "YG",
                    "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
                    "npciRespCode": "YG",
                    "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)",
                    "setuDescription": "Merchant PSP error",
                    "suggestedAction": "Merchant PSP error"
                  },
                  "refId": "1240689979139556558",
                  "referenceId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "rrn": "124068997913",
                  "status": "initiated",
                  "txnId": "SETmBZkQOV0M7wyyP1V4PIFhRSzW5eSjmYI",
                  "txnNote": "testpay"
                }
              }
            }
          },
          "400": {
            "description": "Bad request: Bad Request response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized: Unauthorized response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not found: Not Found response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error: Internal Server Error response.",
            "headers": {
              "requestId": {
                "description": "a unique id associated with a particular request",
                "schema": {
                  "type": "string",
                  "description": "a unique id associated with a particular request",
                  "example": "cjqnn4cupm66hpf0a920"
                },
                "example": "cjqnn4cupm66hpf0a920"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSetuAPIErrorModel"
                }
              }
            }
          }
        },
        "security": [{ "jwt_header_Authorization": [] }]
      }
    }
  },
  "components": {
    "schemas": {
      "BaseSetuAPIErrorModel": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "error code",
            "example": "bad-request"
          },
          "detail": {
            "type": "string",
            "description": "a detailed description of the error",
            "example": "bad-request"
          },
          "docUrl": {
            "type": "string",
            "description": "link to a doc with more information about the error",
            "example": ""
          }
        },
        "example": {
          "code": "bad-request",
          "detail": "bad-request",
          "docUrl": ""
        }
      },
      "BaseSetuAPIErrorModel2": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "error code",
            "example": "bad-request"
          },
          "detail": {
            "type": "string",
            "description": "a detailed description of the error",
            "example": "bad-request"
          },
          "docUrl": {
            "type": "string",
            "description": "link to a doc with more information about the error",
            "example": ""
          },
          "requestId": {
            "type": "string",
            "description": "a unique id associated with a particular request",
            "example": "cjqnn4cupm66hpf0a920"
          }
        },
        "example": {
          "code": "bad-request",
          "detail": "bad-request",
          "docUrl": "",
          "requestId": "cjqnn4cupm66hpf0a920"
        }
      },
      "CalculateExecutionDatesRequestBody": {
        "type": "object",
        "properties": {
          "Mock": {
            "type": "string",
            "description": "If true, mock the API call",
            "default": "true",
            "example": "Tenetur labore libero consectetur et."
          },
          "createdAt": {
            "type": "string",
            "description": "ISO 8601 timestamp to indicate the creation date \u0026 time for the mandate",
            "example": "2023-09-04 12:08:20.202644 +0530 IST",
            "format": "date-time"
          },
          "cycles": {
            "type": "integer",
            "default": 12,
            "example": 3324164158932320252,
            "format": "int64"
          },
          "endDate": {
            "type": "string",
            "description": "End date of the mandate (ddmmyyyy)",
            "example": "02012008"
          },
          "firstExecutionAmount": {
            "type": "integer",
            "description": "First execution amount(in paise) of the mandate",
            "default": 0,
            "example": 1000,
            "format": "int64"
          },
          "frequency": {
            "type": "string",
            "description": "Frequency of the mandate",
            "example": "monthly",
            "enum": [
              "one time",
              "weekly",
              "daily",
              "fortnightly",
              "monthly",
              "bi monthly",
              "quarterly",
              "half yearly",
              "yearly",
              "as presented"
            ]
          },
          "recurrenceValue": {
            "type": "integer",
            "description": "Recurrence value of the mandate",
            "example": 1,
            "minimum": 0,
            "maximum": 31
          },
          "startDate": {
            "type": "string",
            "description": "Start date of the mandate (ddmmyyyy)",
            "example": "02012006"
          }
        },
        "example": {
          "Mock": "Cupiditate qui quia voluptate inventore veritatis unde.",
          "createdAt": "2023-09-04 12:08:20.202644 +0530 IST",
          "cycles": 3482080178260654572,
          "endDate": "02012008",
          "firstExecutionAmount": 1000,
          "frequency": "monthly",
          "recurrenceValue": 1,
          "startDate": "02012006"
        },
        "required": [
          "startDate",
          "endDate",
          "frequency",
          "recurrenceValue",
          "createdAt"
        ]
      },
      "CalculateExecutionDatesResponse": {
        "type": "object",
        "properties": {
          "createdAt": {
            "type": "string",
            "description": "ISO 8601 timestamp to indicate the creation date \u0026 time for the mandate",
            "example": "2023-09-04 12:08:20.202644 +0530 IST",
            "format": "date-time"
          },
          "cycles": {
            "type": "integer",
            "default": 12,
            "example": 6233079010993648953,
            "format": "int64"
          },
          "dates": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/ExecutionDates" },
            "description": "List of mandate execution / pre debit notification dates in upcoming mandate execution cycles",
            "example": [
              {
                "executionDate": "2023-09-06 12:08:20.202644 +0530 IST",
                "preDebitNotificationDate": "2023-09-04 12:08:20.202644 +0530 IST"
              },
              {
                "executionDate": "2023-09-06 12:08:20.202644 +0530 IST",
                "preDebitNotificationDate": "2023-09-04 12:08:20.202644 +0530 IST"
              },
              {
                "executionDate": "2023-09-06 12:08:20.202644 +0530 IST",
                "preDebitNotificationDate": "2023-09-04 12:08:20.202644 +0530 IST"
              }
            ]
          },
          "endDate": {
            "type": "string",
            "description": "End date of the mandate (ddmmyyyy)",
            "example": "02012008"
          },
          "firstExecutionAmount": {
            "type": "integer",
            "description": "First execution amount(in paise) of the mandate",
            "default": 0,
            "example": 1000,
            "format": "int64"
          },
          "frequency": {
            "type": "string",
            "description": "Frequency of the mandate",
            "example": "monthly",
            "enum": [
              "one time",
              "weekly",
              "daily",
              "fortnightly",
              "monthly",
              "bi monthly",
              "quarterly",
              "half yearly",
              "yearly",
              "as presented"
            ]
          },
          "recurrenceValue": {
            "type": "integer",
            "description": "Recurrence value of the mandate",
            "example": 1,
            "minimum": 0,
            "maximum": 31
          },
          "startDate": {
            "type": "string",
            "description": "Start date of the mandate (ddmmyyyy)",
            "example": "02012006"
          }
        },
        "example": {
          "createdAt": "2023-09-04 12:08:20.202644 +0530 IST",
          "cycles": 8867350034445837400,
          "dates": [
            {
              "executionDate": "2023-09-06 12:08:20.202644 +0530 IST",
              "preDebitNotificationDate": "2023-09-04 12:08:20.202644 +0530 IST"
            },
            {
              "executionDate": "2023-09-06 12:08:20.202644 +0530 IST",
              "preDebitNotificationDate": "2023-09-04 12:08:20.202644 +0530 IST"
            }
          ],
          "endDate": "02012008",
          "firstExecutionAmount": 1000,
          "frequency": "monthly",
          "recurrenceValue": 1,
          "startDate": "02012006"
        }
      },
      "CheckAvailabilityRequestBody": {
        "type": "object",
        "properties": {
          "vpa": {
            "type": "string",
            "description": "VPA to be created",
            "example": "fastestupi@pineaxis",
            "pattern": "^[a-z0-9.-]*@[a-z]*$",
            "minLength": 1
          }
        },
        "example": { "vpa": "fastestupi@pineaxis" },
        "required": ["vpa"]
      },
      "CheckVpaAvailabilityResponse": {
        "type": "object",
        "properties": {
          "availabilityStatus": {
            "type": "string",
            "description": "indicates if given vpa is available for use or not",
            "example": "available",
            "enum": ["available", "not_available"]
          },
          "merchantId": {
            "type": "string",
            "description": "Id associated with the merchant on our platform",
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "vpa": {
            "type": "string",
            "description": "UPI id of the merchant to be used to collect payments",
            "example": "fastestupi@pineaxis",
            "pattern": "^[a-z0-9.-]*@[a-z]*$"
          }
        },
        "example": {
          "availabilityStatus": "available",
          "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
          "vpa": "fastestupi@pineaxis"
        }
      },
      "CompactMerchantResponse": {
        "type": "object",
        "properties": {
          "acceptDeemedTxns": {
            "type": "boolean",
            "description": "Indicates whether deemed txns are to be accepted or not for the Merchant",
            "example": true
          },
          "businessName": {
            "type": "string",
            "description": "Brand name or Consumer facing name",
            "example": "Setu",
            "pattern": "^[a-zA-Z0-9 ]+$",
            "minLength": 1,
            "maxLength": 99
          },
          "businessType": {
            "type": "string",
            "description": "Incorporation type",
            "example": "PROPRIETARY",
            "enum": [
              "PROPRIETARY",
              "PARTNERSHIP",
              "PRIVATE",
              "PUBLIC",
              "OTHERS"
            ]
          },
          "createdAt": {
            "type": "string",
            "description": "RFC 3339 timestamp to indicate the creation date \u0026 time for the resource",
            "example": "2024-05-17T19:17:32+05:30",
            "format": "date-time"
          },
          "franchiseName": {
            "type": "string",
            "description": "Franchise name",
            "example": "Setu UPI",
            "pattern": "^[a-zA-Z0-9 ]+$"
          },
          "genre": {
            "type": "string",
            "description": "Online / Offline",
            "example": "ONLINE",
            "enum": ["ONLINE", "OFFLINE"]
          },
          "id": {
            "type": "string",
            "description": "Id of the resource, which is the same the id returned in the Create \u003cresource\u003e API response",
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "legalName": {
            "type": "string",
            "description": "Legal name as per incorporation documents",
            "example": "BrokenTusk Technologies Pvt Ltd",
            "pattern": "^[a-zA-Z0-9 ]+$",
            "minLength": 1,
            "maxLength": 99
          },
          "mcc": {
            "type": "string",
            "description": "Category of business operation",
            "example": "5432"
          },
          "merchantName": {
            "type": "string",
            "example": "Exercitationem sint autem aperiam inventore explicabo quis."
          },
          "merchantType": {
            "type": "string",
            "description": "merchant type",
            "default": "large",
            "example": "large",
            "enum": ["small", "large"]
          },
          "onboardingType": {
            "type": "string",
            "description": "onboarding type",
            "default": "aggregator",
            "example": "aggregator",
            "enum": ["bank", "aggregator"]
          },
          "paymentModes": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "saving",
              "enum": [
                "saving",
                "lite",
                "erupi",
                "rupay_cc",
                "ppi",
                "current",
                "nro",
                "nre"
              ]
            },
            "description": "payment modes allowed for merchants",
            "example": [
              "saving",
              "lite",
              "erupi",
              "rupay_cc",
              "ppi",
              "current",
              "nro",
              "nre"
            ]
          },
          "products": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "otm_collect_multi_debit",
              "enum": [
                "pay_single",
                "pay_multi",
                "tpv",
                "tpv_plus",
                "intent_autopay",
                "qr_autopay",
                "collect_autopay",
                "recur_tpv",
                "otm_intent_single_debit",
                "otm_intent_multi_debit",
                "otm_collect_single_debit",
                "otm_collect_multi_debit",
                "single_block_multi_debit"
              ]
            },
            "description": "products allowed for merchants",
            "example": [
              "pay_single",
              "pay_multi",
              "tpv",
              "tpv_plus",
              "intent_autopay"
            ]
          },
          "settlement": {
            "$ref": "#/components/schemas/SettlementConfiguration"
          },
          "settlementsEnabled": {
            "type": "boolean",
            "description": "indicates whether settlements are enabled for merchant or not",
            "example": false
          },
          "transactionStatus": {
            "type": "string",
            "description": "Current Transaction Status of the Merchant",
            "example": "active",
            "enum": ["active", "inactive"]
          },
          "vpaHandles": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "Magni veniam ad id a rerum error."
            },
            "description": "handles merchant supports",
            "example": ["pineaxis"]
          },
          "vpaPrefix": {
            "type": "string",
            "description": "VPA prefix according to which the VPA needs to be registered",
            "example": "acmecorp.*"
          }
        },
        "example": {
          "acceptDeemedTxns": true,
          "businessName": "Setu",
          "businessType": "PROPRIETARY",
          "createdAt": "2024-05-17T19:17:32+05:30",
          "franchiseName": "Setu UPI",
          "genre": "ONLINE",
          "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
          "legalName": "BrokenTusk Technologies Pvt Ltd",
          "mcc": "5432",
          "merchantName": "Distinctio quia laudantium quasi voluptatum a natus.",
          "merchantType": "large",
          "onboardingType": "aggregator",
          "paymentModes": [
            "saving",
            "lite",
            "erupi",
            "rupay_cc",
            "ppi",
            "current",
            "nro",
            "nre"
          ],
          "products": [
            "pay_single",
            "pay_multi",
            "tpv",
            "tpv_plus",
            "intent_autopay"
          ],
          "settlement": {
            "cycles": [
              {
                "endTime": "1977-01-17T07:19:44Z",
                "settlementTime": "1995-03-19T23:15:19Z",
                "startTime": "2008-11-27T00:50:41Z"
              },
              {
                "endTime": "1977-01-17T07:19:44Z",
                "settlementTime": "1995-03-19T23:15:19Z",
                "startTime": "2008-11-27T00:50:41Z"
              },
              {
                "endTime": "1977-01-17T07:19:44Z",
                "settlementTime": "1995-03-19T23:15:19Z",
                "startTime": "2008-11-27T00:50:41Z"
              }
            ],
            "frequency": "TPlusOne",
            "splitsEnabled": false,
            "type": "Net"
          },
          "settlementsEnabled": false,
          "transactionStatus": "active",
          "vpaHandles": ["pineaxis"],
          "vpaPrefix": "acmecorp.*"
        }
      },
      "CreateCollectResponse": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "integer",
            "description": "paise denominated value that needs to be collected from the user",
            "example": 10000,
            "minimum": 0,
            "maximum": 100000000000000000
          },
          "closedAt": {
            "type": "string",
            "description": "RFC 3339 timestamp to indicate the closure date \u0026 time",
            "example": "2024-05-17T19:17:32+05:30",
            "format": "date-time"
          },
          "createdAt": {
            "type": "string",
            "description": "RFC 3339 timestamp to indicate the creation date \u0026 time for the resource",
            "example": "2024-05-17T19:17:32+05:30",
            "format": "date-time"
          },
          "customerVpa": {
            "type": "string",
            "description": "UPI id of the customer to whom the collect request should be sent to",
            "example": "aadhitya@okaxis",
            "pattern": "^[A-Za-z0-9.-]*@[a-zA-Z0-9.-]*$"
          },
          "expireAfter": {
            "type": "integer",
            "description": "Expiry after (in minutes) for the collect request, the collect request will move to a closed state after this time has elapsed",
            "default": 30,
            "example": 2,
            "minimum": 1,
            "maximum": 64800
          },
          "id": {
            "type": "string",
            "description": "Id of the resource, which is the same the id returned in the Create \u003cresource\u003e API response",
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "merchantId": {
            "type": "string",
            "description": "Id associated with the merchant on our platform",
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "merchantVpa": {
            "type": "string",
            "description": "UPI id of the merchant on which the payments are collected",
            "example": "fastestupi@pineaxis"
          },
          "metadata": {
            "type": "string",
            "description": "field provided for the merchant to add additional key-value pairs",
            "example": { "InvoiceNumber": "INV-21-12-009" },
            "format": "binary"
          },
          "refId": {
            "type": "string",
            "description": "NPCI transaction refId",
            "example": "1240689979139556558",
            "pattern": "^[a-zA-Z0-9]*$",
            "minLength": 1,
            "maxLength": 35
          },
          "referenceId": {
            "type": "string",
            "description": "Id to be used by merchant to identify the collect request on our platform, this can be the customer's invoice number or loan number",
            "example": "1240689979139556557",
            "pattern": "^[a-zA-Z0-9]*$",
            "minLength": 1,
            "maxLength": 50
          },
          "status": {
            "type": "string",
            "description": "status defining the validity of the collect request",
            "example": "active",
            "enum": ["active", "paid", "closed"]
          },
          "transactionNote": {
            "type": "string",
            "description": "note displayed to the customer at the payment page",
            "example": "Payment for loan repayment",
            "pattern": "^[a-zA-Z0-9]*$",
            "minLength": 1,
            "maxLength": 50
          }
        },
        "example": {
          "amount": 10000,
          "closedAt": "2024-05-17T19:17:32+05:30",
          "createdAt": "2024-05-17T19:17:32+05:30",
          "customerVpa": "aadhitya@okaxis",
          "expireAfter": 2,
          "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
          "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
          "merchantVpa": "fastestupi@pineaxis",
          "metadata": { "InvoiceNumber": "INV-21-12-009" },
          "refId": "1240689979139556558",
          "referenceId": "1240689979139556557",
          "status": "active",
          "transactionNote": "Payment for loan repayment"
        }
      },
      "CreateDqrResponse": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "integer",
            "description": "Amount (in paise) that needs to be collected from the user. If populated this value gets displayed on the payer PSP's payment page",
            "example": 10000,
            "minimum": 100
          },
          "createdAt": {
            "type": "string",
            "description": "RFC 3339 timestamp to indicate the creation date \u0026 time for the resource",
            "example": "2024-05-17T19:17:32+05:30",
            "format": "date-time"
          },
          "expiryDate": {
            "type": "string",
            "description": "RFC 3339 timestamp to indicate the expiry date \u0026 time",
            "example": "2024-06-17T19:17:32+05:30",
            "format": "date-time"
          },
          "id": {
            "type": "string",
            "description": "Id of the resource, which is the same the id returned in the Create \u003cresource\u003e API response",
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "intentLink": {
            "type": "string",
            "description": "A UPI pay intent link built according to the spec enforced by NPCI",
            "example": "upi://pay?pa=test-auto-pgruosncak@okokaxis\u0026pn=merchant-4\u0026am=100.00\u0026tr=SU1240659756905923780\u0026tn=sample%20single%20use%20qr\u0026cu=INR\u0026mc=1234"
          },
          "merchantId": {
            "type": "string",
            "description": "Id associated with the merchant on our platform",
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "merchantVpa": {
            "type": "string",
            "description": "UPI id of the merchant on which the payments are collected",
            "example": "fastestupi@pineaxis",
            "pattern": "^[a-z0-9.-]*@[a-zA-Z]*$"
          },
          "metadata": {
            "type": "string",
            "description": "field provided for the merchant to add additional key-value pairs",
            "example": { "InvoiceNumber": "INV-21-12-009" },
            "format": "binary"
          },
          "minAmount": {
            "type": "integer",
            "description": "Minimum amount (in paise) - on setting this value the amount field on the PSP's payment page becomes editable and the customer can pay an amount equal to or greater than the minimum amount",
            "example": 1000,
            "minimum": 100
          },
          "qrCode": {
            "type": "string",
            "description": "QR code for the generated intent link in the form of base64 encoded string",
            "example": ""
          },
          "refId": {
            "type": "string",
            "description": "NPCI transaction refId",
            "example": "1240689979139556558",
            "pattern": "^[a-zA-Z0-9]*$",
            "minLength": 1,
            "maxLength": 35
          },
          "referenceId": {
            "type": "string",
            "description": "reference id in the merchant's system",
            "example": "1240689979139556557",
            "pattern": "^[a-zA-Z0-9]*$",
            "minLength": 1,
            "maxLength": 50
          },
          "shortLink": {
            "type": "string",
            "description": "A shortened URL for the given intent link",
            "example": "upipay.setu.co/Np3KnBCM8Om0"
          },
          "status": {
            "type": "string",
            "description": "status defining the validity of the payment link",
            "example": "active",
            "enum": ["inactive", "active", "paid", "closed"]
          },
          "transactionNote": {
            "type": "string",
            "description": "Transaction note displayed to the customer at the payer PSP's payment page",
            "example": "testpay"
          }
        },
        "example": {
          "amount": 10000,
          "createdAt": "2024-05-17T19:17:32+05:30",
          "expiryDate": "2024-06-17T19:17:32+05:30",
          "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
          "intentLink": "upi://pay?pa=test-auto-pgruosncak@okokaxis\u0026pn=merchant-4\u0026am=100.00\u0026tr=SU1240659756905923780\u0026tn=sample%20single%20use%20qr\u0026cu=INR\u0026mc=1234",
          "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
          "merchantVpa": "fastestupi@pineaxis",
          "metadata": { "InvoiceNumber": "INV-21-12-009" },
          "minAmount": 1000,
          "qrCode": "",
          "refId": "1240689979139556558",
          "referenceId": "1240689979139556557",
          "shortLink": "upipay.setu.co/Np3KnBCM8Om0",
          "status": "active",
          "transactionNote": "testpay"
        }
      },
      "CreateMandateResponse": {
        "type": "object",
        "properties": {
          "allowMultipleDebit": {
            "type": "boolean",
            "description": "Allow multiple debits for the mandate",
            "default": false,
            "example": true
          },
          "amount": {
            "type": "integer",
            "description": "Amount(in paise) of the mandate",
            "example": 1000,
            "minimum": 100,
            "maximum": 20000000
          },
          "amountRule": {
            "type": "string",
            "description": "Rule for verifying the debit amount is within range of specified amount_limit",
            "example": "max",
            "enum": ["max", "exact"]
          },
          "autoExecute": {
            "type": "boolean",
            "description": "Auto execute of the mandate",
            "example": true
          },
          "autoPreNotify": {
            "type": "boolean",
            "description": "Auto pre notify of the mandate",
            "example": true
          },
          "autoRefundFirstExecutionAmount": {
            "type": "boolean",
            "description": "Enable auto refund of first execution amount",
            "default": false,
            "example": false
          },
          "blockFunds": {
            "type": "boolean",
            "description": "Block funds for the mandate",
            "default": false,
            "example": true
          },
          "createdAt": {
            "type": "string",
            "description": "RFC 3339 timestamp to indicate the creation date \u0026 time for the resource",
            "example": "2024-05-17T19:17:32+05:30",
            "format": "date-time"
          },
          "creationMode": {
            "type": "string",
            "description": "Creation mode of the mandate",
            "example": "qr",
            "enum": ["collect", "intent"]
          },
          "currency": {
            "type": "string",
            "description": "Currency in which the mandate payment will be executed",
            "default": "INR",
            "example": "INR"
          },
          "customerRevocable": { "type": "boolean", "example": true },
          "customerVpa": {
            "type": "string",
            "description": "UPI id of the customer from which payments are made",
            "example": "ram@axis",
            "pattern": "^[a-zA-Z0-9.-]*@[a-zA-Z0-9.-]*$"
          },
          "endDate": {
            "type": "string",
            "description": "End date of the mandate (ddmmyyyy)",
            "example": "02012008"
          },
          "expireAfter": {
            "type": "integer",
            "description": "Number of minutes after which the mandate creation request will expire",
            "default": 2,
            "example": 2,
            "minimum": 2,
            "maximum": 64800
          },
          "firstExecutionAmount": {
            "type": "integer",
            "description": "First execution amount(in paise) of the mandate",
            "default": 0,
            "example": 1000,
            "format": "int64"
          },
          "frequency": {
            "type": "string",
            "description": "Frequency of the mandate",
            "example": "monthly",
            "enum": [
              "one time",
              "weekly",
              "daily",
              "fortnightly",
              "monthly",
              "bi monthly",
              "quarterly",
              "half yearly",
              "yearly",
              "as presented"
            ]
          },
          "id": {
            "type": "string",
            "description": "Id of the resource, which is the same the id returned in the Create \u003cresource\u003e API response",
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "initiationMode": {
            "type": "string",
            "description": "Initiation mode of the mandate",
            "example": "01",
            "enum": ["00", "01", "04"]
          },
          "intentLink": {
            "type": "string",
            "description": "Intent link for the mandate request",
            "example": "upi://mandate?pa=deku040920232@okokaxis\u0026pn=merchant-1\u0026validitystart=31121995\u0026validityend=31121996\u0026am=100.00\u0026amrule=MAX\u0026recur=one%20time\u0026recurvalue=0\u0026recurtype=on\u0026tr=SETgv8wOOCElAtpzfbAEXqcKvN8QPfunAhI\u0026cu=INR\u0026mc=1234\u0026mode=04\u0026purpose=14\u0026rev=N\u0026share=Y\u0026qrexpire=04092023\u0026block=N\u0026orgid=000000\u0026version=2.0\u0026txnType=create\u0026tid=SETgv8wOOCElAtpzfbAEXqcKvN8QPfunAhI"
          },
          "maxAmountLimit": {
            "type": "integer",
            "description": "Maximum amount(in paise) for which a mandate transaction can be executed",
            "example": 1000,
            "minimum": 100,
            "maximum": 20000000
          },
          "merchantId": {
            "type": "string",
            "description": "Id of the merchant who created the mandate",
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "merchantVpa": {
            "type": "string",
            "description": "UPI id of the merchant on which the payments are collected",
            "example": "fastestupi@pineaxis",
            "pattern": "^[a-z0-9.-]*@[a-zA-Z]*$"
          },
          "purpose": {
            "type": "string",
            "description": "Purpose of the mandate",
            "default": "14",
            "example": "14",
            "enum": ["00", "14", "76", "01"]
          },
          "qrCode": {
            "type": "string",
            "description": "QR code for the generated intent link in the form of base64 encoded string",
            "example": ""
          },
          "recurrenceRule": {
            "type": "string",
            "description": "Recurrence rule of the mandate",
            "default": "on",
            "example": "on",
            "enum": ["on", "before", "after"]
          },
          "recurrenceValue": {
            "type": "integer",
            "description": "Recurrence value of the mandate",
            "example": 1,
            "minimum": 0,
            "maximum": 31
          },
          "referenceId": {
            "type": "string",
            "description": "Merchant reference id of the mandate",
            "example": "ABC1234789",
            "minLength": 5,
            "maxLength": 50
          },
          "shareToPayee": { "type": "boolean", "example": false },
          "startDate": {
            "type": "string",
            "description": "Start date of the mandate (ddmmyyyy)",
            "example": "02012006"
          },
          "status": {
            "type": "string",
            "description": "Status of the mandate",
            "example": "pending",
            "enum": [
              "pending",
              "live",
              "paused",
              "revoked",
              "rejected",
              "completed"
            ]
          },
          "transactionNote": {
            "type": "string",
            "description": "Transaction note of the mandate",
            "example": "Transaction note"
          },
          "txnId": {
            "type": "string",
            "description": "NPCI transaction id",
            "example": "BTTZrc5gDFkuCr3n3I0ey4aNtzLOLR7K7aR",
            "pattern": "^[a-zA-Z0-9]*$",
            "minLength": 35,
            "maxLength": 35
          }
        },
        "example": {
          "allowMultipleDebit": true,
          "amount": 1000,
          "amountRule": "max",
          "autoExecute": true,
          "autoPreNotify": true,
          "autoRefundFirstExecutionAmount": false,
          "blockFunds": true,
          "createdAt": "2024-05-17T19:17:32+05:30",
          "creationMode": "qr",
          "currency": "INR",
          "customerRevocable": true,
          "customerVpa": "ram@axis",
          "endDate": "02012008",
          "expireAfter": 2,
          "firstExecutionAmount": 1000,
          "frequency": "monthly",
          "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
          "initiationMode": "04",
          "intentLink": "upi://mandate?pa=deku040920232@okokaxis\u0026pn=merchant-1\u0026validitystart=31121995\u0026validityend=31121996\u0026am=100.00\u0026amrule=MAX\u0026recur=one%20time\u0026recurvalue=0\u0026recurtype=on\u0026tr=SETgv8wOOCElAtpzfbAEXqcKvN8QPfunAhI\u0026cu=INR\u0026mc=1234\u0026mode=04\u0026purpose=14\u0026rev=N\u0026share=Y\u0026qrexpire=04092023\u0026block=N\u0026orgid=000000\u0026version=2.0\u0026txnType=create\u0026tid=SETgv8wOOCElAtpzfbAEXqcKvN8QPfunAhI",
          "maxAmountLimit": 1000,
          "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
          "merchantVpa": "fastestupi@pineaxis",
          "purpose": "14",
          "qrCode": "",
          "recurrenceRule": "on",
          "recurrenceValue": 1,
          "referenceId": "ABC1234789",
          "shareToPayee": false,
          "startDate": "02012006",
          "status": "pending",
          "transactionNote": "Transaction note",
          "txnId": "BTTZrc5gDFkuCr3n3I0ey4aNtzLOLR7K7aR"
        }
      },
      "CreateMerchantWrapperRequestBody": {
        "type": "object",
        "properties": {
          "acceptDeemedTxns": {
            "type": "boolean",
            "description": "Indicates whether deemed txns are to be accepted or not for the Merchant",
            "example": true
          },
          "aggregatorAccountId": {
            "type": "string",
            "description": "id of aggregator account associated with merchant",
            "example": "328a928f-e277-4798-8e28-4b19a61a8a23"
          },
          "businessName": {
            "type": "string",
            "description": "Brand name or Consumer facing name",
            "example": "Setu",
            "pattern": "^[a-zA-Z0-9 ]+$",
            "minLength": 1,
            "maxLength": 99
          },
          "businessType": {
            "type": "string",
            "description": "Incorporation type",
            "example": "PROPRIETARY",
            "enum": [
              "PROPRIETARY",
              "PARTNERSHIP",
              "PRIVATE",
              "PUBLIC",
              "OTHERS"
            ]
          },
          "franchiseName": {
            "type": "string",
            "description": "Franchise name",
            "example": "Setu UPI",
            "pattern": "^[a-zA-Z0-9 ]+$"
          },
          "genre": {
            "type": "string",
            "description": "Online / Offline",
            "example": "ONLINE",
            "enum": ["ONLINE", "OFFLINE"]
          },
          "legalName": {
            "type": "string",
            "description": "Legal name as per incorporation documents",
            "example": "BrokenTusk Technologies Pvt Ltd",
            "pattern": "^[a-zA-Z0-9 ]+$",
            "minLength": 1,
            "maxLength": 99
          },
          "mcc": {
            "type": "string",
            "description": "Category of business operation",
            "example": "5432"
          },
          "merchantName": { "type": "string", "example": "Sed nihil hic." },
          "merchantType": {
            "type": "string",
            "description": "merchant type",
            "default": "large",
            "example": "large",
            "enum": ["small", "large"]
          },
          "onboardingType": {
            "type": "string",
            "description": "onboarding type",
            "default": "aggregator",
            "example": "aggregator",
            "enum": ["bank", "aggregator"]
          },
          "paymentModes": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "nro",
              "enum": [
                "saving",
                "lite",
                "erupi",
                "rupay_cc",
                "ppi",
                "current",
                "nro",
                "nre"
              ]
            },
            "description": "payment modes allowed for merchants",
            "example": [
              "saving",
              "lite",
              "erupi",
              "rupay_cc",
              "ppi",
              "current",
              "nro",
              "nre"
            ]
          },
          "productAccountId": {
            "type": "string",
            "description": "id of product account associated with merchant",
            "example": "328a928f-e277-4798-8e28-4b19a61a8a22",
            "minLength": 1
          },
          "products": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "pay_multi",
              "enum": [
                "pay_single",
                "pay_multi",
                "tpv",
                "tpv_plus",
                "intent_autopay",
                "qr_autopay",
                "collect_autopay",
                "recur_tpv",
                "otm_intent_single_debit",
                "otm_intent_multi_debit",
                "otm_collect_single_debit",
                "otm_collect_multi_debit",
                "single_block_multi_debit"
              ]
            },
            "description": "products allowed for merchants",
            "example": [
              "pay_single",
              "pay_multi",
              "tpv",
              "tpv_plus",
              "intent_autopay"
            ]
          },
          "settlement": {
            "$ref": "#/components/schemas/SettlementConfiguration"
          },
          "settlementsEnabled": {
            "type": "boolean",
            "description": "indicates whether settlements are enabled for merchant or not",
            "example": true
          },
          "standardAccountId": {
            "type": "string",
            "description": "id of standard account associated with merchant",
            "example": "328a928f-e277-4798-8e28-4b19a61a8a22",
            "minLength": 1
          },
          "vpaHandles": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "Consequatur est sed dolores."
            },
            "description": "handles merchant supports",
            "example": ["pineaxis"]
          }
        },
        "example": {
          "acceptDeemedTxns": true,
          "aggregatorAccountId": "328a928f-e277-4798-8e28-4b19a61a8a23",
          "businessName": "Setu",
          "businessType": "PROPRIETARY",
          "franchiseName": "Setu UPI",
          "genre": "ONLINE",
          "legalName": "BrokenTusk Technologies Pvt Ltd",
          "mcc": "5432",
          "merchantName": "Aut est corporis.",
          "merchantType": "large",
          "onboardingType": "aggregator",
          "paymentModes": [
            "saving",
            "lite",
            "erupi",
            "rupay_cc",
            "ppi",
            "current",
            "nro",
            "nre"
          ],
          "productAccountId": "328a928f-e277-4798-8e28-4b19a61a8a22",
          "products": [
            "pay_single",
            "pay_multi",
            "tpv",
            "tpv_plus",
            "intent_autopay"
          ],
          "settlement": {
            "cycles": [
              {
                "endTime": "2007-08-23T21:31:09Z",
                "settlementTime": "1991-12-22T21:57:52Z",
                "startTime": "1995-04-19T10:17:12Z"
              },
              {
                "endTime": "2007-08-23T21:31:09Z",
                "settlementTime": "1991-12-22T21:57:52Z",
                "startTime": "1995-04-19T10:17:12Z"
              }
            ],
            "frequency": "TPlusOne",
            "splitsEnabled": true,
            "type": "Net"
          },
          "settlementsEnabled": true,
          "standardAccountId": "328a928f-e277-4798-8e28-4b19a61a8a22",
          "vpaHandles": ["pineaxis"]
        },
        "required": [
          "aggregatorAccountId",
          "legalName",
          "businessName",
          "businessType",
          "mcc",
          "genre"
        ]
      },
      "CreateOqrResponse": {
        "type": "object",
        "properties": {
          "createdAt": {
            "type": "string",
            "description": "RFC 3339 timestamp to indicate the creation date \u0026 time for the resource",
            "example": "2024-05-17T19:17:32+05:30",
            "format": "date-time"
          },
          "expiryDate": {
            "type": "string",
            "description": "RFC 3339 timestamp to indicate the expiry date \u0026 time",
            "example": "2024-06-17T19:17:32+05:30",
            "format": "date-time"
          },
          "id": {
            "type": "string",
            "description": "Id of the resource, which is the same the id returned in the Create \u003cresource\u003e API response",
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "intentLink": {
            "type": "string",
            "description": "A UPI pay intent link built according to the spec enforced by NPCI",
            "example": "upi://pay?pa=test-auto-pgruosncak@okokaxis\u0026pn=merchant-4\u0026am=100.00\u0026tr=SU1240659756905923780\u0026tn=samplesingle0useqr\u0026cu=INR\u0026mc=1234"
          },
          "merchantId": {
            "type": "string",
            "description": "Id associated with the merchant on our platform",
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "merchantVpa": {
            "type": "string",
            "description": "UPI id of the merchant on which the payments are collected",
            "example": "fastestupi@pineaxis",
            "pattern": "^[a-z0-9.-]*@[a-zA-Z]*$"
          },
          "referenceId": {
            "type": "string",
            "description": "reference id in the merchant's system",
            "example": "1240689979139556557",
            "pattern": "^[a-zA-Z0-9]*$",
            "minLength": 1,
            "maxLength": 50
          },
          "status": {
            "type": "string",
            "description": "status defining the validity of the payment link",
            "example": "active",
            "enum": ["inactive", "active", "paid", "closed"]
          },
          "transactionReference": {
            "type": "string",
            "description": "Transaction reference id circulated by NPCI",
            "example": "1240689979139556558",
            "pattern": "^[a-zA-Z0-9]*$",
            "minLength": 9,
            "maxLength": 35
          }
        },
        "example": {
          "createdAt": "2024-05-17T19:17:32+05:30",
          "expiryDate": "2024-06-17T19:17:32+05:30",
          "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
          "intentLink": "upi://pay?pa=test-auto-pgruosncak@okokaxis\u0026pn=merchant-4\u0026am=100.00\u0026tr=SU1240659756905923780\u0026tn=samplesingle0useqr\u0026cu=INR\u0026mc=1234",
          "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
          "merchantVpa": "fastestupi@pineaxis",
          "referenceId": "1240689979139556557",
          "status": "active",
          "transactionReference": "1240689979139556558"
        }
      },
      "CreateRefundResponse": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "integer",
            "description": "Amount to be refunded back to the customer",
            "example": 10000,
            "format": "int64"
          },
          "createdAt": {
            "type": "string",
            "description": "RFC 3339 timestamp to indicate the creation date \u0026 time for the resource",
            "example": "2024-05-17T19:17:32+05:30",
            "format": "date-time"
          },
          "id": {
            "type": "string",
            "description": "Id of the resource, which is the same the id returned in the Create \u003cresource\u003e API response",
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "paymentId": {
            "type": "string",
            "description": "Setu payment id on which merchant wants to raise a refund",
            "example": "01HKSEWQ509Z56CVQNQ2XHGJZ1"
          },
          "reason": { "$ref": "#/components/schemas/RefundReason" },
          "referenceId": {
            "type": "string",
            "description": "Unique identifier merchant wants to pass to reconcile refunds at their end",
            "example": "BILL12345"
          },
          "remarks": {
            "type": "string",
            "description": "Remarks on why the refund is being initiated",
            "example": "Services not rendered"
          },
          "status": {
            "type": "string",
            "description": "Status of the refund request",
            "example": "success",
            "enum": ["pending", "initiated", "success", "failed"]
          }
        },
        "example": {
          "amount": 10000,
          "createdAt": "2024-05-17T19:17:32+05:30",
          "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
          "paymentId": "01HKSEWQ509Z56CVQNQ2XHGJZ1",
          "reason": {
            "adjCode": "501",
            "adjFlag": "RRC",
            "errCode": "refund-disabled",
            "npciErrCode": "R21",
            "npciErrDesc": "ONLINE REFUND IS DISABLED IN UPI"
          },
          "referenceId": "BILL12345",
          "remarks": "Services not rendered",
          "status": "success"
        }
      },
      "CreateRequestBody": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "integer",
            "description": "paise denominated value that needs to be collected from the user",
            "example": 10000,
            "minimum": 0,
            "maximum": 100000000000000000
          },
          "customerVpa": {
            "type": "string",
            "description": "UPI id of the customer to whom the collect request should be sent to",
            "example": "aadhitya@okaxis",
            "pattern": "^[A-Za-z0-9.-]*@[a-zA-Z0-9.-]*$"
          },
          "expireAfter": {
            "type": "integer",
            "description": "Expiry after (in minutes) for the collect request, the collect request will move to a closed state after this time has elapsed",
            "default": 30,
            "example": 2,
            "minimum": 1,
            "maximum": 64800
          },
          "merchantVpa": {
            "type": "string",
            "description": "UPI id of the merchant on which the payments are collected",
            "example": "fastestupi@pineaxis"
          },
          "metadata": {
            "type": "string",
            "description": "field provided for the merchant to add additional key-value pairs",
            "example": { "InvoiceNumber": "INV-21-12-009" },
            "format": "binary"
          },
          "referenceId": {
            "type": "string",
            "description": "Id to be used by merchant to identify the collect request on our platform, this can be the customer's invoice number or loan number",
            "example": "1240689979139556557",
            "pattern": "^[a-zA-Z0-9]*$",
            "minLength": 1,
            "maxLength": 50
          },
          "transactionNote": {
            "type": "string",
            "description": "note displayed to the customer at the payment page",
            "example": "Payment for loan repayment",
            "pattern": "^[a-zA-Z0-9]*$",
            "minLength": 1,
            "maxLength": 50
          }
        },
        "example": {
          "amount": 10000,
          "customerVpa": "aadhitya@okaxis",
          "expireAfter": 2,
          "merchantVpa": "fastestupi@pineaxis",
          "metadata": { "InvoiceNumber": "INV-21-12-009" },
          "referenceId": "1240689979139556557",
          "transactionNote": "Payment for loan repayment"
        },
        "required": ["merchantVpa", "customerVpa", "amount"]
      },
      "CreateRequestBody2": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "integer",
            "description": "Amount (in paise) that needs to be collected from the user. If populated this value gets displayed on the payer PSP's payment page",
            "example": 10000,
            "minimum": 100
          },
          "expiryDate": {
            "type": "string",
            "description": "RFC 3339 timestamp to indicate the expiry date \u0026 time",
            "example": "2024-06-17T19:17:32+05:30",
            "format": "date-time"
          },
          "merchantVpa": {
            "type": "string",
            "description": "UPI id of the merchant on which the payments are collected",
            "example": "fastestupi@pineaxis",
            "pattern": "^[a-z0-9.-]*@[a-zA-Z]*$"
          },
          "metadata": {
            "type": "string",
            "description": "field provided for the merchant to add additional key-value pairs",
            "example": { "InvoiceNumber": "INV-21-12-009" },
            "format": "binary"
          },
          "minAmount": {
            "type": "integer",
            "description": "Minimum amount (in paise) - on setting this value the amount field on the PSP's payment page becomes editable and the customer can pay an amount equal to or greater than the minimum amount",
            "example": 1000,
            "minimum": 100
          },
          "referenceId": {
            "type": "string",
            "description": "reference id in the merchant's system",
            "example": "1240689979139556557",
            "pattern": "^[a-zA-Z0-9]*$",
            "minLength": 1,
            "maxLength": 50
          },
          "transactionNote": {
            "type": "string",
            "description": "Transaction note displayed to the customer at the payer PSP's payment page",
            "example": "testpay"
          }
        },
        "example": {
          "amount": 10000,
          "expiryDate": "2024-06-17T19:17:32+05:30",
          "merchantVpa": "fastestupi@pineaxis",
          "metadata": { "InvoiceNumber": "INV-21-12-009" },
          "minAmount": 1000,
          "referenceId": "1240689979139556557",
          "transactionNote": "testpay"
        },
        "required": ["merchantVpa"]
      },
      "CreateRequestBody3": {
        "type": "object",
        "properties": {
          "allowMultipleDebit": {
            "type": "boolean",
            "description": "Allow multiple debits for the mandate",
            "default": false,
            "example": true
          },
          "amount": {
            "type": "integer",
            "description": "Amount(in paise) of the mandate",
            "example": 1000,
            "minimum": 100,
            "maximum": 20000000
          },
          "amountRule": {
            "type": "string",
            "description": "Rule for verifying the debit amount is within range of specified amount_limit",
            "example": "max",
            "enum": ["max", "exact"]
          },
          "autoExecute": {
            "type": "boolean",
            "description": "Auto execute of the mandate",
            "default": true,
            "example": true
          },
          "autoPreNotify": {
            "type": "boolean",
            "description": "Auto pre notify of the mandate",
            "default": true,
            "example": true
          },
          "autoRefundFirstExecutionAmount": {
            "type": "boolean",
            "description": "Enable auto refund of first execution amount",
            "default": false,
            "example": false
          },
          "blockFunds": {
            "type": "boolean",
            "description": "Block funds for the mandate",
            "default": false,
            "example": true
          },
          "creationMode": {
            "type": "string",
            "description": "Creation mode of the mandate",
            "example": "qr",
            "enum": ["collect", "intent"]
          },
          "currency": {
            "type": "string",
            "description": "Currency in which the mandate payment will be executed",
            "default": "INR",
            "example": "INR"
          },
          "customerRevocable": {
            "type": "boolean",
            "default": true,
            "example": false
          },
          "customerVpa": {
            "type": "string",
            "description": "UPI id of the customer from which payments are made",
            "example": "ram@axis",
            "pattern": "^[a-zA-Z0-9.-]*@[a-zA-Z0-9.-]*$"
          },
          "endDate": {
            "type": "string",
            "description": "End date of the mandate (ddmmyyyy)",
            "example": "02012008"
          },
          "expireAfter": {
            "type": "integer",
            "description": "Number of minutes after which the mandate creation request will expire",
            "default": 2,
            "example": 2,
            "minimum": 2,
            "maximum": 64800
          },
          "firstExecutionAmount": {
            "type": "integer",
            "description": "First execution amount(in paise) of the mandate",
            "default": 0,
            "example": 1000,
            "format": "int64"
          },
          "frequency": {
            "type": "string",
            "description": "Frequency of the mandate",
            "example": "monthly",
            "enum": [
              "one time",
              "weekly",
              "daily",
              "fortnightly",
              "monthly",
              "bi monthly",
              "quarterly",
              "half yearly",
              "yearly",
              "as presented"
            ]
          },
          "initiationMode": {
            "type": "string",
            "description": "Initiation mode of the mandate",
            "example": "01",
            "enum": ["00", "01", "04"]
          },
          "merchantVpa": {
            "type": "string",
            "description": "UPI id of the merchant on which the payments are collected",
            "example": "fastestupi@pineaxis",
            "pattern": "^[a-z0-9.-]*@[a-zA-Z]*$"
          },
          "purpose": {
            "type": "string",
            "description": "Purpose of the mandate",
            "default": "14",
            "example": "14",
            "enum": ["00", "14", "76", "01"]
          },
          "recurrenceRule": {
            "type": "string",
            "description": "Recurrence rule of the mandate",
            "default": "on",
            "example": "on",
            "enum": ["on", "before", "after"]
          },
          "recurrenceValue": {
            "type": "integer",
            "description": "Recurrence value of the mandate",
            "example": 1,
            "minimum": 0,
            "maximum": 31
          },
          "referenceId": {
            "type": "string",
            "description": "Merchant reference id of the mandate",
            "example": "ABC1234789",
            "minLength": 5,
            "maxLength": 50
          },
          "shareToPayee": {
            "type": "boolean",
            "default": true,
            "example": false
          },
          "startDate": {
            "type": "string",
            "description": "Start date of the mandate (ddmmyyyy)",
            "example": "02012006"
          },
          "transactionNote": {
            "type": "string",
            "description": "Transaction note of the mandate",
            "example": "Transaction note"
          }
        },
        "example": {
          "allowMultipleDebit": true,
          "amount": 1000,
          "amountRule": "max",
          "autoExecute": true,
          "autoPreNotify": true,
          "autoRefundFirstExecutionAmount": false,
          "blockFunds": true,
          "creationMode": "qr",
          "currency": "INR",
          "customerRevocable": false,
          "customerVpa": "ram@axis",
          "endDate": "02012008",
          "expireAfter": 2,
          "firstExecutionAmount": 1000,
          "frequency": "monthly",
          "initiationMode": "01",
          "merchantVpa": "fastestupi@pineaxis",
          "purpose": "14",
          "recurrenceRule": "on",
          "recurrenceValue": 1,
          "referenceId": "ABC1234789",
          "shareToPayee": false,
          "startDate": "02012006",
          "transactionNote": "Transaction note"
        },
        "required": [
          "startDate",
          "endDate",
          "amount",
          "currency",
          "amountRule",
          "frequency",
          "recurrenceValue",
          "transactionNote",
          "purpose",
          "initiationMode",
          "creationMode",
          "merchantVpa"
        ]
      },
      "CreateRequestBody4": {
        "type": "object",
        "properties": {
          "intentLink": {
            "type": "string",
            "description": "A UPI pay intent link built according to the spec enforced by NPCI",
            "example": "upi://pay?pa=test-auto-pgruosncak@okokaxis\u0026pn=merchant-4\u0026am=100.00\u0026tr=SU1240659756905923780\u0026tn=samplesingle0useqr\u0026cu=INR\u0026mc=1234"
          },
          "merchantVpa": {
            "type": "string",
            "description": "UPI id of the merchant on which the payments are collected",
            "example": "fastestupi@pineaxis",
            "pattern": "^[a-z0-9.-]*@[a-zA-Z]*$"
          },
          "referenceId": {
            "type": "string",
            "description": "reference id in the merchant's system",
            "example": "1240689979139556557",
            "pattern": "^[a-zA-Z0-9]*$",
            "minLength": 1,
            "maxLength": 50
          },
          "transactionReference": {
            "type": "string",
            "description": "Transaction reference id circulated by NPCI",
            "example": "1240689979139556558",
            "pattern": "^[a-zA-Z0-9]*$",
            "minLength": 9,
            "maxLength": 35
          }
        },
        "example": {
          "intentLink": "upi://pay?pa=test-auto-pgruosncak@okokaxis\u0026pn=merchant-4\u0026am=100.00\u0026tr=SU1240659756905923780\u0026tn=samplesingle0useqr\u0026cu=INR\u0026mc=1234",
          "merchantVpa": "fastestupi@pineaxis",
          "referenceId": "1240689979139556557",
          "transactionReference": "1240689979139556558"
        },
        "required": ["merchantVpa", "transactionReference", "intentLink"]
      },
      "CreateRequestBody5": {
        "type": "object",
        "properties": {
          "referenceId": {
            "type": "string",
            "description": "reference id in the merchant's system",
            "example": "1240689979139556557",
            "pattern": "^[a-zA-Z0-9]*$",
            "minLength": 1,
            "maxLength": 50
          },
          "vpa": {
            "type": "string",
            "description": "UPI id of the merchant to be used to collect payments",
            "example": "fastestupi@pineaxis",
            "pattern": "^[a-z0-9.-]*@[a-z]*$"
          }
        },
        "example": {
          "referenceId": "1240689979139556557",
          "vpa": "fastestupi@pineaxis"
        },
        "required": ["vpa"]
      },
      "CreateRequestBody6": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "integer",
            "description": "Amount to be refunded back to the customer",
            "example": 10000,
            "format": "int64"
          },
          "paymentId": {
            "type": "string",
            "description": "Setu payment id on which merchant wants to raise a refund",
            "example": "01HKSEWQ509Z56CVQNQ2XHGJZ1"
          },
          "referenceId": {
            "type": "string",
            "description": "Unique identifier merchant wants to pass to reconcile refunds at their end",
            "example": "BILL12345"
          },
          "remarks": {
            "type": "string",
            "description": "Remarks on why the refund is being initiated",
            "example": "Services not rendered"
          }
        },
        "example": {
          "amount": 10000,
          "paymentId": "01HKSEWQ509Z56CVQNQ2XHGJZ1",
          "referenceId": "BILL12345",
          "remarks": "Services not rendered"
        },
        "required": ["paymentId", "amount"]
      },
      "CreateRequestBodyAsPresented": {
        "type": "object",
        "properties": {
          "startDate": {
            "type": "string",
            "description": "Start date of the mandate (ddmmyyyy)",
            "example": "02012006",
            "default": "System date - Today"
          },
          "endDate": {
            "type": "string",
            "description": "End date of the mandate (ddmmyyyy)",
            "example": "02012008",
            "default": "Mandate start date + 30 years"
          },
          "amount": {
            "type": "integer",
            "description": "Amount(in paise) of the mandate",
            "example": 1000,
            "minimum": 100,
            "maximum": 20000000
          },
          "amountRule": {
            "type": "string",
            "description": "Rule for verifying the debit amount is within range of specified amount_limit",
            "example": "max",
            "enum": ["max", "exact"],
            "default": "max"
          },
          "creationMode": {
            "type": "string",
            "description": "Creation mode of the mandate",
            "example": "qr",
            "enum": ["collect", "intent"],
            "default": "intent"
          },
          "currency": {
            "type": "string",
            "description": "Currency in which the mandate payment will be executed",
            "default": "INR",
            "example": "INR"
          },
          "customerRevocable": {
            "type": "boolean",
            "default": true,
            "example": true
          },
          "customerVpa": {
            "type": "string",
            "description": "UPI id of the customer from which payments are made",
            "example": "ram@axis",
            "pattern": "^[a-zA-Z0-9.-]*@[a-zA-Z0-9.-]*$"
          },
          "expireAfter": {
            "type": "integer",
            "description": "Number of minutes after which the mandate creation request will expire",
            "default": 2,
            "example": 2,
            "minimum": 2,
            "maximum": 64800
          },
          "firstExecutionAmount": {
            "type": "integer",
            "description": "First execution amount(in paise) of the mandate",
            "default": 0,
            "example": 1000,
            "format": "int64"
          },
          "merchantVpa": {
            "type": "string",
            "description": "UPI id of the merchant on which the payments are collected",
            "example": "fastestupi@pineaxis",
            "pattern": "^[a-z0-9.-]*@[a-zA-Z]*$"
          },
          "referenceId": {
            "type": "string",
            "description": "Merchant reference id of the mandate",
            "example": "ABC1234789",
            "minLength": 5,
            "maxLength": 50
          },
          "transactionNote": {
            "type": "string",
            "description": "Transaction note of the mandate",
            "example": "Transaction note"
          }
        },
        "required": ["amount", "merchantVpa"]
      },
      "CreateRequestBodyPeriodic": {
        "type": "object",
        "properties": {
          "startDate": {
            "type": "string",
            "description": "Start date of the mandate (ddmmyyyy)",
            "example": "02012006",
            "default": "System date - Today"
          },
          "endDate": {
            "type": "string",
            "description": "End date of the mandate (ddmmyyyy)",
            "example": "02012008",
            "default": "Mandate start date + 30 years"
          },
          "amount": {
            "type": "integer",
            "description": "Amount(in paise) of the mandate",
            "example": 1000,
            "minimum": 100,
            "maximum": 20000000
          },
          "autoExecute": {
            "type": "boolean",
            "description": "Auto execute of the mandate",
            "default": false,
            "enum": ["false", "true"],
            "example": false
          },
          "creationMode": {
            "type": "string",
            "description": "Creation mode of the mandate",
            "example": "qr",
            "enum": ["collect", "intent"],
            "default": "intent"
          },
          "currency": {
            "type": "string",
            "description": "Currency in which the mandate payment will be executed",
            "default": "INR",
            "example": "INR"
          },
          "customerRevocable": {
            "type": "boolean",
            "default": true,
            "example": false
          },
          "customerVpa": {
            "type": "string",
            "description": "UPI id of the customer from which payments are made",
            "example": "ram@axis",
            "pattern": "^[a-zA-Z0-9.-]*@[a-zA-Z0-9.-]*$"
          },
          "expireAfter": {
            "type": "integer",
            "description": "Number of minutes after which the mandate creation request will expire",
            "default": 2,
            "example": 2,
            "minimum": 2,
            "maximum": 64800
          },
          "firstExecutionAmount": {
            "type": "integer",
            "description": "First execution amount(in paise) of the mandate",
            "default": 0,
            "example": 1000,
            "format": "int64"
          },
          "frequency": {
            "type": "string",
            "description": "Frequency of the mandate",
            "example": "monthly",
            "enum": [
              "daily",
              "weekly",
              "fortnightly",
              "monthly",
              "bi monthly",
              "quarterly",
              "half yearly",
              "yearly"
            ]
          },
          "merchantVpa": {
            "type": "string",
            "description": "UPI id of the merchant on which the payments are collected",
            "example": "fastestupi@pineaxis",
            "pattern": "^[a-z0-9.-]*@[a-zA-Z]*$"
          },
          "recurrenceRule": {
            "type": "string",
            "description": "Recurrence rule of the mandate",
            "default": "on",
            "example": "on",
            "enum": ["on", "before", "after"]
          },
          "recurrenceValue": {
            "type": "integer",
            "description": "Recurrence value of the mandate",
            "example": 1,
            "minimum": 0,
            "maximum": 31
          },
          "referenceId": {
            "type": "string",
            "description": "Merchant reference id of the mandate",
            "example": "ABC1234789",
            "minLength": 5,
            "maxLength": 50
          },
          "shareToPayee": {
            "type": "boolean",
            "default": true,
            "example": false
          },
          "transactionNote": {
            "type": "string",
            "description": "Transaction note of the mandate",
            "example": "Transaction note"
          }
        },
        "required": ["amount", "merchantVpa", "frequency", "recurrenceValue"]
      },
      "CreateRequestBodyOneTime": {
        "type": "object",
        "properties": {
          "allowMultipleDebit": {
            "type": "boolean",
            "description": "Allow multiple debits for the mandate",
            "default": false,
            "example": false,
            "enum": ["false", "true"]
          },
          "startDate": {
            "type": "string",
            "description": "Start date of the mandate (ddmmyyyy)",
            "example": "02012006",
            "default": "System date - Today"
          },
          "endDate": {
            "type": "string",
            "description": "End date of the mandate (ddmmyyyy)",
            "example": "02012008",
            "default": "Mandate start date + 30 years"
          },
          "blockFunds": {
            "type": "boolean",
            "description": "Block funds for the mandate",
            "default": false,
            "example": true,
            "enum": ["false", "true"]
          },

          "amount": {
            "type": "integer",
            "description": "Amount(in paise) of the mandate",
            "example": 1000,
            "minimum": 100,
            "maximum": 20000000
          },
          "autoExecute": {
            "type": "boolean",
            "description": "Auto execute of the mandate",
            "default": false,
            "enum": ["false", "true"],
            "example": false
          },
          "creationMode": {
            "type": "string",
            "description": "Creation mode of the mandate",
            "example": "qr",
            "enum": ["collect", "intent"],
            "default": "intent"
          },
          "currency": {
            "type": "string",
            "description": "Currency in which the mandate payment will be executed",
            "default": "INR",
            "example": "INR"
          },
          "customerRevocable": {
            "type": "boolean",
            "default": true,
            "example": false
          },
          "customerVpa": {
            "type": "string",
            "description": "UPI id of the customer from which payments are made",
            "example": "ram@axis",
            "pattern": "^[a-zA-Z0-9.-]*@[a-zA-Z0-9.-]*$"
          },
          "expireAfter": {
            "type": "integer",
            "description": "Number of minutes after which the mandate creation request will expire",
            "default": 2,
            "example": 2,
            "minimum": 2,
            "maximum": 64800
          },
          "firstExecutionAmount": {
            "type": "integer",
            "description": "First execution amount(in paise) of the mandate",
            "default": 0,
            "example": 1000,
            "format": "int64"
          },
          "maxAmountLimit": {
            "type": "integer",
            "description": "Maximum amount(in paise) for which a mandate transaction can be executed",
            "example": 1000,
            "minimum": 100,
            "maximum": 20000000
          },
          "merchantVpa": {
            "type": "string",
            "description": "UPI id of the merchant on which the payments are collected",
            "example": "fastestupi@pineaxis",
            "pattern": "^[a-z0-9.-]*@[a-zA-Z]*$"
          },
          "recurrenceRule": {
            "type": "string",
            "description": "Recurrence rule of the mandate",
            "default": "on",
            "example": "on",
            "enum": ["on", "before", "after"]
          },
          "referenceId": {
            "type": "string",
            "description": "Merchant reference id of the mandate",
            "example": "ABC1234789",
            "minLength": 5,
            "maxLength": 50
          },
          "shareToPayee": {
            "type": "boolean",
            "default": true,
            "example": false
          },
          "transactionNote": {
            "type": "string",
            "description": "Transaction note of the mandate",
            "example": "Transaction note"
          }
        },
        "required": ["amount", "merchantVpa", "blockFunds"]
      },
      "CreateRequestBodyAsPresentedTPV": {
        "type": "object",
        "properties": {
          "startDate": {
            "type": "string",
            "description": "Start date of the mandate (ddmmyyyy)",
            "example": "02012006",
            "default": "System date - Today"
          },
          "endDate": {
            "type": "string",
            "description": "End date of the mandate (ddmmyyyy)",
            "example": "02012008",
            "default": "Mandate start date + 30 years"
          },
          "amount": {
            "type": "integer",
            "description": "Amount(in paise) of the mandate",
            "example": 1000,
            "minimum": 100,
            "maximum": 20000000
          },
          "amountRule": {
            "type": "string",
            "description": "Rule for verifying the debit amount is within range of specified amount_limit",
            "example": "max",
            "enum": ["max", "exact"],
            "default": "max"
          },
          "creationMode": {
            "type": "string",
            "description": "Creation mode of the mandate",
            "example": "qr",
            "enum": ["collect", "intent"],
            "default": "intent"
          },
          "currency": {
            "type": "string",
            "description": "Currency in which the mandate payment will be executed",
            "default": "INR",
            "example": "INR"
          },
          "customerRevocable": {
            "type": "boolean",
            "default": true,
            "example": true
          },
          "customerVpa": {
            "type": "string",
            "description": "UPI id of the customer from which payments are made",
            "example": "ram@axis",
            "pattern": "^[a-zA-Z0-9.-]*@[a-zA-Z0-9.-]*$"
          },
          "expireAfter": {
            "type": "integer",
            "description": "Number of minutes after which the mandate creation request will expire",
            "default": 2,
            "example": 2,
            "minimum": 2,
            "maximum": 64800
          },
          "firstExecutionAmount": {
            "type": "integer",
            "description": "First execution amount(in paise) of the mandate",
            "default": 0,
            "example": 1000,
            "format": "int64"
          },
          "merchantVpa": {
            "type": "string",
            "description": "UPI id of the merchant on which the payments are collected",
            "example": "fastestupi@pineaxis",
            "pattern": "^[a-z0-9.-]*@[a-zA-Z]*$"
          },
          "referenceId": {
            "type": "string",
            "description": "Merchant reference id of the mandate",
            "example": "ABC1234789",
            "minLength": 5,
            "maxLength": 50
          },
          "transactionNote": {
            "type": "string",
            "description": "Transaction note of the mandate",
            "example": "Transaction note"
          },
          "primaryAccount": {
            "$ref": "#/components/schemas/MandateTPVAccountDetail"
          }
        },
        "required": ["amount", "merchantVpa", "primaryAccount"]
      },
      "CreateSettlementBankAccountRequestBody": {
        "type": "object",
        "properties": {
          "accountHolderName": {
            "type": "string",
            "description": "account holder name for the settlement bank account",
            "example": "deku"
          },
          "accountNumber": {
            "type": "string",
            "description": "account number for the settlement bank account",
            "example": "1234567890"
          },
          "accountType": {
            "type": "string",
            "description": "account type for the settlement bank account",
            "default": "current",
            "example": "current",
            "enum": ["current", "savings"]
          },
          "ifsc": {
            "type": "string",
            "description": "ifsc for the settlement bank account",
            "example": "HDFC0000001"
          }
        },
        "example": {
          "accountHolderName": "deku",
          "accountNumber": "1234567890",
          "accountType": "current",
          "ifsc": "HDFC0000001"
        },
        "required": ["accountHolderName", "accountNumber", "ifsc"]
      },
      "CreateSqrResponse": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "integer",
            "description": "Amount (in paise) that needs to be collected from the user. If populated this value gets displayed on the payer PSP's payment page",
            "example": 10000,
            "minimum": 100
          },
          "createdAt": {
            "type": "string",
            "description": "RFC 3339 timestamp to indicate the creation date \u0026 time for the resource",
            "example": "2024-05-17T19:17:32+05:30",
            "format": "date-time"
          },
          "currency": {
            "type": "string",
            "example": "Nemo reprehenderit exercitationem tenetur est in."
          },
          "expiryDate": {
            "type": "string",
            "description": "RFC 3339 timestamp to indicate the expiry date \u0026 time",
            "example": "2024-06-17T19:17:32+05:30",
            "format": "date-time"
          },
          "id": {
            "type": "string",
            "description": "Id of the resource, which is the same the id returned in the Create \u003cresource\u003e API response",
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "intentLink": {
            "type": "string",
            "description": "A UPI pay intent link built according to the spec enforced by NPCI",
            "example": "upi://pay?pa=test-auto-pgruosncak@okokaxis\u0026pn=merchant-4\u0026am=100.00\u0026tr=SU1240659756905923780\u0026tn=samplesingle0useqr\u0026cu=INR\u0026mc=1234"
          },
          "merchantId": {
            "type": "string",
            "description": "Id associated with the merchant on our platform",
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "merchantVpa": {
            "type": "string",
            "description": "UPI id of the merchant on which the payments are collected",
            "example": "fastestupi@pineaxis",
            "pattern": "^[a-z0-9.-]*@[a-zA-Z]*$"
          },
          "metadata": {
            "type": "string",
            "description": "field provided for the merchant to add additional key-value pairs",
            "example": { "InvoiceNumber": "INV-21-12-009" },
            "format": "binary"
          },
          "minAmount": {
            "type": "integer",
            "description": "Minimum amount (in paise) - on setting this value the amount field on the PSP's payment page becomes editable and the customer can pay an amount equal to or greater than the minimum amount",
            "example": 1000,
            "minimum": 100
          },
          "qrCode": {
            "type": "string",
            "description": "QR code for the generated intent link in the form of base64 encoded string",
            "example": ""
          },
          "refId": {
            "type": "string",
            "description": "Transaction reference id circulated by NPCI",
            "example": "1240689979139556558",
            "pattern": "^[a-zA-Z0-9]*$",
            "minLength": 1,
            "maxLength": 35
          },
          "referenceId": {
            "type": "string",
            "description": "reference id in the merchant's system",
            "example": "1240689979139556557",
            "pattern": "^[a-zA-Z0-9]*$",
            "minLength": 1,
            "maxLength": 50
          },
          "shortLink": {
            "type": "string",
            "description": "A shortened URL for the given intent link",
            "example": "upipay.setu.co/Np3KnBCM8Om0"
          },
          "status": {
            "type": "string",
            "description": "status defining the validity of the payment link",
            "example": "active",
            "enum": ["inactive", "active", "paid", "closed"]
          },
          "transactionNote": {
            "type": "string",
            "description": "Transaction note displayed to the customer at the payment page",
            "example": "Payment for loan repayment"
          }
        },
        "example": {
          "amount": 10000,
          "createdAt": "2024-05-17T19:17:32+05:30",
          "currency": "Quas magni enim veritatis aut voluptatem.",
          "expiryDate": "2024-06-17T19:17:32+05:30",
          "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
          "intentLink": "upi://pay?pa=test-auto-pgruosncak@okokaxis\u0026pn=merchant-4\u0026am=100.00\u0026tr=SU1240659756905923780\u0026tn=samplesingle0useqr\u0026cu=INR\u0026mc=1234",
          "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
          "merchantVpa": "fastestupi@pineaxis",
          "metadata": { "InvoiceNumber": "INV-21-12-009" },
          "minAmount": 1000,
          "qrCode": "",
          "refId": "1240689979139556558",
          "referenceId": "1240689979139556557",
          "shortLink": "upipay.setu.co/Np3KnBCM8Om0",
          "status": "active",
          "transactionNote": "Payment for loan repayment"
        }
      },
      "CreateTPVPlusRequestBody": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "integer",
            "description": "Amount (in paise) that needs to be collected from the user. If populated this value gets displayed on the payer PSP's payment page",
            "example": 10000,
            "minimum": 100
          },
          "bankCodes": {
            "type": "array",
            "items": { "type": "string", "example": "Enim aliquid." },
            "description": "bank codes to be validated, first 4 characters of ifsc",
            "example": ["ICIC", "HDFC", "FDRL"],
            "maxItems": 10
          },
          "createdAt": {
            "type": "string",
            "description": "RFC 3339 timestamp to indicate the creation date \u0026 time for the resource",
            "example": "2024-05-17T19:17:32+05:30",
            "format": "date-time"
          },
          "expireAfter": {
            "type": "integer",
            "description": "Expire after (in minutes) for the transaction",
            "example": 10,
            "format": "int64"
          },
          "id": {
            "type": "string",
            "description": "Id of the resource, which is the same the id returned in the Create \u003cresource\u003e API response",
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "intentLink": {
            "type": "string",
            "description": "upi link for the payment link",
            "example": "upi://pay?pa=test-auto-pgruosncak@okokaxis\u0026pn=merchant-4\u0026am=100.00\u0026tr=SU1240659756905923780\u0026tn=samplesingleuseqr\u0026cu=INR\u0026mc=1234"
          },
          "merchantVpa": {
            "type": "string",
            "description": "UPI id of the merchant on which the payments are collected",
            "example": "fastestupi@pineaxis",
            "pattern": "^[a-z0-9.-]*@[a-zA-Z]*$"
          },
          "metadata": {
            "type": "string",
            "description": "field provided for the merchant to add additional key-value pairs",
            "example": { "InvoiceNumber": "INV-21-12-009" },
            "format": "binary"
          },
          "minAmount": {
            "type": "integer",
            "description": "Minimum amount (in paise) - on setting this value the amount field on the PSP's payment page becomes editable and the customer can pay an amount equal to or greater than the minimum amount",
            "example": 1000,
            "minimum": 100
          },
          "payerApps": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "Aperiam aut sint iure assumenda."
            },
            "description": "payer apps to be validated",
            "example": ["gpay", "phonepe", "paytm", "amazonpay"],
            "maxItems": 10
          },
          "payerVPAs": {
            "type": "array",
            "items": { "type": "string", "example": "Ea sit id veniam." },
            "description": "VPAs of the payer to be validated",
            "example": ["aadhitya@okhdfc", "ram@okaxis"],
            "maxItems": 10
          },
          "qrCode": {
            "type": "string",
            "description": "QR code for the payment link",
            "example": ""
          },
          "reason": { "$ref": "#/components/schemas/Reason" },
          "refId": {
            "type": "string",
            "description": "NPCI transaction refId",
            "example": "1240689979139556558",
            "pattern": "^[a-zA-Z0-9]*$",
            "minLength": 1,
            "maxLength": 35
          },
          "referenceId": {
            "type": "string",
            "description": "Reference id provided by the merchant",
            "example": "1240689979139556556"
          },
          "shortLink": {
            "type": "string",
            "description": "short link for the payment link",
            "example": "upipay.setu.co/Np3KnBCM8Om0"
          },
          "status": {
            "type": "string",
            "description": "status defining the validity of the payment",
            "example": "active",
            "enum": ["paid", "closed", "active"]
          },
          "transactionNote": {
            "type": "string",
            "description": "transaction note for the transaction",
            "example": "test transaction"
          }
        },
        "example": {
          "amount": 10000,
          "bankCodes": ["ICIC", "HDFC", "FDRL"],
          "createdAt": "2024-05-17T19:17:32+05:30",
          "expireAfter": 10,
          "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
          "intentLink": "upi://pay?pa=test-auto-pgruosncak@okokaxis\u0026pn=merchant-4\u0026am=100.00\u0026tr=SU1240659756905923780\u0026tn=samplesingleuseqr\u0026cu=INR\u0026mc=1234",
          "merchantVpa": "fastestupi@pineaxis",
          "metadata": { "InvoiceNumber": "INV-21-12-009" },
          "minAmount": 1000,
          "payerApps": ["gpay", "phonepe", "paytm", "amazonpay"],
          "payerVPAs": ["aadhitya@okhdfc", "ram@okaxis"],
          "qrCode": "",
          "reason": {
            "code": "unable-to-fulfill-request",
            "desc": "unable-to-fulfill-request",
            "npciErrCategory": "TD",
            "npciErrCode": "YG",
            "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
            "npciRespCode": "YG",
            "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)",
            "setuDescription": "Merchant PSP error",
            "suggestedAction": "Merchant PSP error"
          },
          "refId": "1240689979139556558",
          "referenceId": "1240689979139556556",
          "shortLink": "upipay.setu.co/Np3KnBCM8Om0",
          "status": "active",
          "transactionNote": "test transaction"
        },
        "required": ["merchantVpa"]
      },
      "CreateTPVPlusResponse": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "integer",
            "description": "Amount (in paise) that needs to be collected from the user. If populated this value gets displayed on the payer PSP's payment page",
            "example": 10000,
            "minimum": 100
          },
          "bankCodes": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "Ea id amet modi voluptatem et."
            },
            "description": "bank codes to be validated, first 4 characters of ifsc",
            "example": ["ICIC", "HDFC", "FDRL"],
            "maxItems": 10
          },
          "createdAt": {
            "type": "string",
            "description": "RFC 3339 timestamp to indicate the creation date \u0026 time for the resource",
            "example": "2024-05-17T19:17:32+05:30",
            "format": "date-time"
          },
          "expireAfter": {
            "type": "integer",
            "description": "Expire after (in minutes) for the transaction",
            "example": 10,
            "format": "int64"
          },
          "id": {
            "type": "string",
            "description": "Id of the resource, which is the same the id returned in the Create \u003cresource\u003e API response",
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "intentLink": {
            "type": "string",
            "description": "upi link for the payment link",
            "example": "upi://pay?pa=test-auto-pgruosncak@okokaxis\u0026pn=merchant-4\u0026am=100.00\u0026tr=SU1240659756905923780\u0026tn=samplesingleuseqr\u0026cu=INR\u0026mc=1234"
          },
          "merchantId": {
            "type": "string",
            "description": "Id associated with the merchant on our platform",
            "example": "1240689979139556556"
          },
          "merchantVpa": {
            "type": "string",
            "description": "UPI id of the merchant on which the payments are collected",
            "example": "fastestupi@pineaxis",
            "pattern": "^[a-z0-9.-]*@[a-zA-Z]*$"
          },
          "metadata": {
            "type": "string",
            "description": "field provided for the merchant to add additional key-value pairs",
            "example": { "InvoiceNumber": "INV-21-12-009" },
            "format": "binary"
          },
          "minAmount": {
            "type": "integer",
            "description": "Minimum amount (in paise) - on setting this value the amount field on the PSP's payment page becomes editable and the customer can pay an amount equal to or greater than the minimum amount",
            "example": 1000,
            "minimum": 100
          },
          "payerApps": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "Voluptate consequuntur non quaerat aut et."
            },
            "description": "payer apps to be validated",
            "example": ["gpay", "phonepe", "paytm", "amazonpay"],
            "maxItems": 10
          },
          "payerVPAs": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "Praesentium atque architecto sint beatae."
            },
            "description": "VPAs of the payer to be validated",
            "example": ["aadhitya@okhdfc", "ram@okaxis"],
            "maxItems": 10
          },
          "qrCode": {
            "type": "string",
            "description": "QR code for the payment link",
            "example": ""
          },
          "reason": { "$ref": "#/components/schemas/Reason" },
          "refId": {
            "type": "string",
            "description": "NPCI transaction refId",
            "example": "1240689979139556558",
            "pattern": "^[a-zA-Z0-9]*$",
            "minLength": 1,
            "maxLength": 35
          },
          "referenceId": {
            "type": "string",
            "description": "Reference id provided by the merchant",
            "example": "1240689979139556556"
          },
          "requestId": {
            "type": "string",
            "example": "cjqml1f2e5ocq2mesej0"
          },
          "shortLink": {
            "type": "string",
            "description": "short link for the payment link",
            "example": "upipay.setu.co/Np3KnBCM8Om0"
          },
          "status": {
            "type": "string",
            "description": "status defining the validity of the payment",
            "example": "active",
            "enum": ["paid", "closed", "active"]
          },
          "transactionNote": {
            "type": "string",
            "description": "transaction note for the transaction",
            "example": "test transaction"
          }
        },
        "example": {
          "amount": 10000,
          "bankCodes": ["ICIC", "HDFC", "FDRL"],
          "createdAt": "2024-05-17T19:17:32+05:30",
          "expireAfter": 10,
          "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
          "intentLink": "upi://pay?pa=test-auto-pgruosncak@okokaxis\u0026pn=merchant-4\u0026am=100.00\u0026tr=SU1240659756905923780\u0026tn=samplesingleuseqr\u0026cu=INR\u0026mc=1234",
          "merchantId": "1240689979139556556",
          "merchantVpa": "fastestupi@pineaxis",
          "metadata": { "InvoiceNumber": "INV-21-12-009" },
          "minAmount": 1000,
          "payerApps": ["gpay", "phonepe", "paytm", "amazonpay"],
          "payerVPAs": ["aadhitya@okhdfc", "ram@okaxis"],
          "qrCode": "",
          "reason": {
            "code": "unable-to-fulfill-request",
            "desc": "unable-to-fulfill-request",
            "npciErrCategory": "TD",
            "npciErrCode": "YG",
            "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
            "npciRespCode": "YG",
            "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)",
            "setuDescription": "Merchant PSP error",
            "suggestedAction": "Merchant PSP error"
          },
          "refId": "1240689979139556558",
          "referenceId": "1240689979139556556",
          "requestId": "cjqml1f2e5ocq2mesej0",
          "shortLink": "upipay.setu.co/Np3KnBCM8Om0",
          "status": "active",
          "transactionNote": "test transaction"
        }
      },
      "CreateTPVRequestBody": {
        "type": "object",
        "properties": {
          "allowMultipleDebit": {
            "type": "boolean",
            "description": "Allow multiple debits for the mandate",
            "default": false,
            "example": true
          },
          "amount": {
            "type": "integer",
            "description": "Amount(in paise) of the mandate",
            "example": 1000,
            "minimum": 100,
            "maximum": 20000000
          },
          "amountRule": {
            "type": "string",
            "description": "Rule for verifying the debit amount is within range of specified amount_limit",
            "example": "max",
            "enum": ["max", "exact"]
          },
          "autoExecute": {
            "type": "boolean",
            "description": "Auto execute of the mandate",
            "default": true,
            "example": true
          },
          "autoPreNotify": {
            "type": "boolean",
            "description": "Auto pre notify of the mandate",
            "default": true,
            "example": true
          },
          "blockFunds": {
            "type": "boolean",
            "description": "Block funds for the mandate",
            "default": false,
            "example": true
          },
          "creationMode": {
            "type": "string",
            "description": "Creation mode of the mandate",
            "example": "qr",
            "enum": ["collect", "intent"]
          },
          "currency": {
            "type": "string",
            "description": "Currency in which the mandate payment will be executed",
            "default": "INR",
            "example": "INR"
          },
          "customerRevocable": {
            "type": "boolean",
            "default": true,
            "example": false
          },
          "customerVpa": {
            "type": "string",
            "description": "UPI id of the customer from which payments are made",
            "example": "ram@axis",
            "pattern": "^[a-zA-Z0-9.-]*@[a-zA-Z0-9.-]*$"
          },
          "endDate": {
            "type": "string",
            "description": "End date of the mandate (ddmmyyyy)",
            "example": "02012008"
          },
          "expireAfter": {
            "type": "integer",
            "description": "Number of minutes after which the mandate creation request will expire",
            "default": 2,
            "example": 2,
            "minimum": 2,
            "maximum": 64800
          },
          "firstExecutionAmount": {
            "type": "integer",
            "description": "First execution amount(in paise) of the mandate",
            "default": 0,
            "example": 1000,
            "format": "int64"
          },
          "frequency": {
            "type": "string",
            "description": "Frequency of the mandate",
            "example": "monthly",
            "enum": [
              "one time",
              "weekly",
              "daily",
              "fortnightly",
              "monthly",
              "bi monthly",
              "quarterly",
              "half yearly",
              "yearly",
              "as presented"
            ]
          },
          "initiationMode": {
            "type": "string",
            "description": "Initiation mode of the mandate",
            "example": "01",
            "enum": ["00", "01", "04"]
          },
          "merchantVpa": {
            "type": "string",
            "description": "UPI id of the merchant on which the payments are collected",
            "example": "fastestupi@pineaxis",
            "pattern": "^[a-z0-9.-]*@[a-zA-Z]*$"
          },
          "primaryAccount": {
            "$ref": "#/components/schemas/MandateTPVAccountDetail"
          },
          "purpose": {
            "type": "string",
            "description": "Purpose of the mandate",
            "default": "14",
            "example": "14",
            "enum": ["00", "14", "76", "01"]
          },
          "recurrenceRule": {
            "type": "string",
            "description": "Recurrence rule of the mandate",
            "default": "on",
            "example": "on",
            "enum": ["on", "before", "after"]
          },
          "recurrenceValue": {
            "type": "integer",
            "description": "Recurrence value of the mandate",
            "example": 1,
            "minimum": 0,
            "maximum": 31
          },
          "referenceId": {
            "type": "string",
            "description": "Merchant reference id of the mandate",
            "example": "ABC1234789",
            "minLength": 5,
            "maxLength": 50
          },
          "secondaryAccounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MandateTPVAccountDetail"
            },
            "description": "Secondary account details",
            "example": [
              {
                "IFSC": "SBIN0000001",
                "accountName": "deku",
                "accountNumber": "1234567890"
              },
              {
                "IFSC": "SBIN0000001",
                "accountName": "deku",
                "accountNumber": "1234567890"
              },
              {
                "IFSC": "SBIN0000001",
                "accountName": "deku",
                "accountNumber": "1234567890"
              }
            ]
          },
          "shareToPayee": {
            "type": "boolean",
            "default": true,
            "example": false
          },
          "startDate": {
            "type": "string",
            "description": "Start date of the mandate (ddmmyyyy)",
            "example": "02012006"
          },
          "transactionNote": {
            "type": "string",
            "description": "Transaction note of the mandate",
            "example": "Transaction note"
          }
        },
        "example": {
          "allowMultipleDebit": true,
          "amount": 1000,
          "amountRule": "max",
          "autoExecute": true,
          "autoPreNotify": true,
          "blockFunds": true,
          "creationMode": "qr",
          "currency": "INR",
          "customerRevocable": false,
          "customerVpa": "ram@axis",
          "endDate": "02012008",
          "expireAfter": 2,
          "firstExecutionAmount": 1000,
          "frequency": "monthly",
          "initiationMode": "04",
          "merchantVpa": "fastestupi@pineaxis",
          "primaryAccount": {
            "IFSC": "SBIN0000001",
            "accountName": "deku",
            "accountNumber": "1234567890"
          },
          "purpose": "14",
          "recurrenceRule": "on",
          "recurrenceValue": 1,
          "referenceId": "ABC1234789",
          "secondaryAccounts": [
            {
              "IFSC": "SBIN0000001",
              "accountName": "deku",
              "accountNumber": "1234567890"
            },
            {
              "IFSC": "SBIN0000001",
              "accountName": "deku",
              "accountNumber": "1234567890"
            },
            {
              "IFSC": "SBIN0000001",
              "accountName": "deku",
              "accountNumber": "1234567890"
            },
            {
              "IFSC": "SBIN0000001",
              "accountName": "deku",
              "accountNumber": "1234567890"
            }
          ],
          "shareToPayee": false,
          "startDate": "02012006",
          "transactionNote": "Transaction note"
        },
        "required": [
          "startDate",
          "endDate",
          "amount",
          "currency",
          "amountRule",
          "frequency",
          "recurrenceValue",
          "transactionNote",
          "purpose",
          "initiationMode",
          "creationMode",
          "merchantVpa",
          "primaryAccount"
        ]
      },
      "CreateTPVRequestBody2": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "integer",
            "description": "Amount (in paise) that needs to be collected from the user. If populated this value gets displayed on the payer PSP's payment page",
            "example": 10000,
            "minimum": 100
          },
          "expireAfter": {
            "type": "integer",
            "description": "Expire after (in minutes) for the transaction",
            "example": 10,
            "format": "int64"
          },
          "merchantVpa": {
            "type": "string",
            "description": "UPI id of the merchant on which the payments are collected",
            "example": "fastestupi@pineaxis",
            "pattern": "^[a-z0-9.-]*@[a-zA-Z]*$"
          },
          "metadata": {
            "type": "string",
            "description": "field provided for the merchant to add additional key-value pairs",
            "example": { "InvoiceNumber": "INV-21-12-009" },
            "format": "binary"
          },
          "minAmount": {
            "type": "integer",
            "description": "Minimum amount (in paise) - on setting this value the amount field on the PSP's payment page becomes editable and the customer can pay an amount equal to or greater than the minimum amount",
            "example": 1000,
            "minimum": 100
          },
          "primaryAccount": {
            "$ref": "#/components/schemas/MandateTPVAccountDetail"
          },
          "referenceId": {
            "type": "string",
            "description": "Reference id provided by the merchant",
            "example": "1240689979139556556"
          },
          "secondaryAccounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MandateTPVAccountDetail"
            },
            "description": "secondary accounts for the tpv transaction",
            "example": [
              {
                "IFSC": "SBIN0000001",
                "accountName": "deku",
                "accountNumber": "1234567890"
              },
              {
                "IFSC": "SBIN0000001",
                "accountName": "deku",
                "accountNumber": "1234567890"
              },
              {
                "IFSC": "SBIN0000001",
                "accountName": "deku",
                "accountNumber": "1234567890"
              }
            ]
          },
          "transactionNote": {
            "type": "string",
            "description": "transaction note for the transaction",
            "example": "test transaction"
          }
        },
        "example": {
          "amount": 10000,
          "expireAfter": 10,
          "merchantVpa": "fastestupi@pineaxis",
          "metadata": { "InvoiceNumber": "INV-21-12-009" },
          "minAmount": 1000,
          "primaryAccount": {
            "IFSC": "SBIN0000001",
            "accountName": "deku",
            "accountNumber": "1234567890"
          },
          "referenceId": "1240689979139556556",
          "secondaryAccounts": [
            {
              "IFSC": "SBIN0000001",
              "accountName": "deku",
              "accountNumber": "1234567890"
            },
            {
              "IFSC": "SBIN0000001",
              "accountName": "deku",
              "accountNumber": "1234567890"
            },
            {
              "IFSC": "SBIN0000001",
              "accountName": "deku",
              "accountNumber": "1234567890"
            },
            {
              "IFSC": "SBIN0000001",
              "accountName": "deku",
              "accountNumber": "1234567890"
            }
          ],
          "transactionNote": "test transaction"
        },
        "required": ["merchantVpa", "primaryAccount"]
      },
      "CreateTPVResponse": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "integer",
            "description": "Amount (in paise) that needs to be collected from the user. If populated this value gets displayed on the payer PSP's payment page",
            "example": 10000,
            "minimum": 100
          },
          "closedAt": {
            "type": "string",
            "example": "Qui laboriosam ea voluptatum quibusdam."
          },
          "createdAt": {
            "type": "string",
            "description": "RFC 3339 timestamp to indicate the creation date \u0026 time for the resource",
            "example": "2024-05-17T19:17:32+05:30",
            "format": "date-time"
          },
          "expireAfter": {
            "type": "integer",
            "description": "Expire after (in minutes) for the transaction",
            "example": 10,
            "format": "int64"
          },
          "id": {
            "type": "string",
            "description": "id associated with the tpv",
            "example": "1240689979139556556"
          },
          "intentLink": {
            "type": "string",
            "description": "upi link for the payment link",
            "example": "upi://pay?pa=test-auto-pgruosncak@okokaxis\u0026pn=merchant-4\u0026am=100.00\u0026tr=SU1240659756905923780\u0026tn=sample%20single%20use%20qr\u0026cu=INR\u0026mc=1234"
          },
          "merchantId": {
            "type": "string",
            "description": "Id associated with the merchant on our platform",
            "example": "1240689979139556556"
          },
          "merchantVpa": {
            "type": "string",
            "description": "UPI id of the merchant on which the payments are collected",
            "example": "fastestupi@pineaxis",
            "pattern": "^[a-z0-9.-]*@[a-zA-Z]*$"
          },
          "metadata": {
            "type": "string",
            "description": "field provided for the merchant to add additional key-value pairs",
            "example": { "InvoiceNumber": "INV-21-12-009" },
            "format": "binary"
          },
          "minAmount": {
            "type": "integer",
            "description": "Minimum amount (in paise) - on setting this value the amount field on the PSP's payment page becomes editable and the customer can pay an amount equal to or greater than the minimum amount",
            "example": 1000,
            "minimum": 100
          },
          "primaryAccount": {
            "$ref": "#/components/schemas/TPVAccountDetailResponse"
          },
          "qrCode": {
            "type": "string",
            "description": "QR code for the payment link",
            "example": ""
          },
          "reason": { "$ref": "#/components/schemas/Reason" },
          "refId": {
            "type": "string",
            "description": "NPCI transaction refId",
            "example": "1240689979139556558",
            "pattern": "^[a-zA-Z0-9]*$",
            "minLength": 1,
            "maxLength": 35
          },
          "referenceId": {
            "type": "string",
            "description": "Reference id provided by the merchant",
            "example": "1240689979139556556"
          },
          "requestId": {
            "type": "string",
            "example": "cjqml1f2e5ocq2mesej0"
          },
          "secondaryAccounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TPVAccountDetailResponse"
            },
            "description": "secondary accounts for the tpv transaction",
            "example": [
              {
                "IFSC": "SBIN0000001",
                "encryptedAccountName": "5e884898da28047151d0e56f8dc629277",
                "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                "hashedAccountName": "5e884898da28047151d0e56f8dc629277",
                "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                "maskedAccountName": "R*M*E*S*",
                "maskedAccountNumber": "**** **** **** 7890"
              },
              {
                "IFSC": "SBIN0000001",
                "encryptedAccountName": "5e884898da28047151d0e56f8dc629277",
                "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                "hashedAccountName": "5e884898da28047151d0e56f8dc629277",
                "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                "maskedAccountName": "R*M*E*S*",
                "maskedAccountNumber": "**** **** **** 7890"
              },
              {
                "IFSC": "SBIN0000001",
                "encryptedAccountName": "5e884898da28047151d0e56f8dc629277",
                "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                "hashedAccountName": "5e884898da28047151d0e56f8dc629277",
                "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                "maskedAccountName": "R*M*E*S*",
                "maskedAccountNumber": "**** **** **** 7890"
              }
            ]
          },
          "shortLink": {
            "type": "string",
            "description": "short link for the payment link",
            "example": "upipay.setu.co/Np3KnBCM8Om0"
          },
          "status": {
            "type": "string",
            "description": "status defining the validity of the payment",
            "example": "active",
            "enum": ["paid", "closed", "active"]
          },
          "transactionNote": {
            "type": "string",
            "description": "transaction note for the transaction",
            "example": "test transaction"
          }
        },
        "example": {
          "amount": 10000,
          "closedAt": "Non sint ut laborum.",
          "createdAt": "2024-05-17T19:17:32+05:30",
          "expireAfter": 10,
          "id": "1240689979139556556",
          "intentLink": "upi://pay?pa=test-auto-pgruosncak@okokaxis\u0026pn=merchant-4\u0026am=100.00\u0026tr=SU1240659756905923780\u0026tn=sample%20single%20use%20qr\u0026cu=INR\u0026mc=1234",
          "merchantId": "1240689979139556556",
          "merchantVpa": "fastestupi@pineaxis",
          "metadata": { "InvoiceNumber": "INV-21-12-009" },
          "minAmount": 1000,
          "primaryAccount": {
            "IFSC": "SBIN0000001",
            "encryptedAccountName": "5e884898da28047151d0e56f8dc629277",
            "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
            "hashedAccountName": "5e884898da28047151d0e56f8dc629277",
            "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
            "maskedAccountName": "R*M*E*S*",
            "maskedAccountNumber": "**** **** **** 7890"
          },
          "qrCode": "",
          "reason": {
            "code": "unable-to-fulfill-request",
            "desc": "unable-to-fulfill-request",
            "npciErrCategory": "TD",
            "npciErrCode": "YG",
            "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
            "npciRespCode": "YG",
            "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)",
            "setuDescription": "Merchant PSP error",
            "suggestedAction": "Merchant PSP error"
          },
          "refId": "1240689979139556558",
          "referenceId": "1240689979139556556",
          "requestId": "cjqml1f2e5ocq2mesej0",
          "secondaryAccounts": [
            {
              "IFSC": "SBIN0000001",
              "encryptedAccountName": "5e884898da28047151d0e56f8dc629277",
              "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
              "hashedAccountName": "5e884898da28047151d0e56f8dc629277",
              "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
              "maskedAccountName": "R*M*E*S*",
              "maskedAccountNumber": "**** **** **** 7890"
            },
            {
              "IFSC": "SBIN0000001",
              "encryptedAccountName": "5e884898da28047151d0e56f8dc629277",
              "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
              "hashedAccountName": "5e884898da28047151d0e56f8dc629277",
              "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
              "maskedAccountName": "R*M*E*S*",
              "maskedAccountNumber": "**** **** **** 7890"
            },
            {
              "IFSC": "SBIN0000001",
              "encryptedAccountName": "5e884898da28047151d0e56f8dc629277",
              "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
              "hashedAccountName": "5e884898da28047151d0e56f8dc629277",
              "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
              "maskedAccountName": "R*M*E*S*",
              "maskedAccountNumber": "**** **** **** 7890"
            },
            {
              "IFSC": "SBIN0000001",
              "encryptedAccountName": "5e884898da28047151d0e56f8dc629277",
              "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
              "hashedAccountName": "5e884898da28047151d0e56f8dc629277",
              "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
              "maskedAccountName": "R*M*E*S*",
              "maskedAccountNumber": "**** **** **** 7890"
            }
          ],
          "shortLink": "upipay.setu.co/Np3KnBCM8Om0",
          "status": "active",
          "transactionNote": "test transaction"
        }
      },
      "CreateTpvMandateResponse": {
        "type": "object",
        "properties": {
          "allowMultipleDebit": {
            "type": "boolean",
            "description": "Allow multiple debits for the mandate",
            "default": false,
            "example": true
          },
          "amount": {
            "type": "integer",
            "description": "Amount(in paise) of the mandate",
            "example": 1000,
            "minimum": 100,
            "maximum": 20000000
          },
          "amountRule": {
            "type": "string",
            "description": "Rule for verifying the debit amount is within range of specified amount_limit",
            "example": "max",
            "enum": ["max", "exact"]
          },
          "autoExecute": {
            "type": "boolean",
            "description": "Auto execute of the mandate",
            "example": true
          },
          "autoPreNotify": {
            "type": "boolean",
            "description": "Auto pre notify of the mandate",
            "example": true
          },
          "autoRefundFirstExecutionAmount": {
            "type": "boolean",
            "description": "Enable auto refund of first execution amount",
            "default": false,
            "example": false
          },
          "blockFunds": {
            "type": "boolean",
            "description": "Block funds for the mandate",
            "default": false,
            "example": true
          },
          "createdAt": {
            "type": "string",
            "description": "RFC 3339 timestamp to indicate the creation date \u0026 time for the resource",
            "example": "2024-05-17T19:17:32+05:30",
            "format": "date-time"
          },
          "creationMode": {
            "type": "string",
            "description": "Creation mode of the mandate",
            "example": "qr",
            "enum": ["collect", "intent"]
          },
          "currency": {
            "type": "string",
            "description": "Currency in which the mandate payment will be executed",
            "default": "INR",
            "example": "INR"
          },
          "customerRevocable": { "type": "boolean", "example": true },
          "customerVpa": {
            "type": "string",
            "description": "UPI id of the customer from which payments are made",
            "example": "ram@axis",
            "pattern": "^[a-zA-Z0-9.-]*@[a-zA-Z0-9.-]*$"
          },
          "endDate": {
            "type": "string",
            "description": "End date of the mandate (ddmmyyyy)",
            "example": "02012008"
          },
          "expireAfter": {
            "type": "integer",
            "description": "Number of minutes after which the mandate creation request will expire",
            "default": 2,
            "example": 2,
            "minimum": 2,
            "maximum": 64800
          },
          "firstExecutionAmount": {
            "type": "integer",
            "description": "First execution amount(in paise) of the mandate",
            "default": 0,
            "example": 1000,
            "format": "int64"
          },
          "frequency": {
            "type": "string",
            "description": "Frequency of the mandate",
            "example": "monthly",
            "enum": [
              "one time",
              "weekly",
              "daily",
              "fortnightly",
              "monthly",
              "bi monthly",
              "quarterly",
              "half yearly",
              "yearly",
              "as presented"
            ]
          },
          "id": {
            "type": "string",
            "description": "Id of the resource, which is the same the id returned in the Create \u003cresource\u003e API response",
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "initiationMode": {
            "type": "string",
            "description": "Initiation mode of the mandate",
            "example": "01",
            "enum": ["00", "01", "04"]
          },
          "intentLink": {
            "type": "string",
            "description": "Intent link for the mandate request",
            "example": "upi://mandate?pa=deku040920232@okokaxis\u0026pn=merchant-1\u0026validitystart=31121995\u0026validityend=31121996\u0026am=100.00\u0026amrule=MAX\u0026recur=one%20time\u0026recurvalue=0\u0026recurtype=on\u0026tr=SETgv8wOOCElAtpzfbAEXqcKvN8QPfunAhI\u0026cu=INR\u0026mc=1234\u0026mode=04\u0026purpose=14\u0026rev=N\u0026share=Y\u0026qrexpire=04092023\u0026block=N\u0026orgid=000000\u0026version=2.0\u0026txnType=create\u0026tid=SETgv8wOOCElAtpzfbAEXqcKvN8QPfunAhI"
          },
          "maxAmountLimit": {
            "type": "integer",
            "description": "Maximum amount(in paise) for which a mandate transaction can be executed",
            "example": 1000,
            "minimum": 100,
            "maximum": 20000000
          },
          "merchantId": {
            "type": "string",
            "description": "Id of the merchant who created the mandate",
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "merchantVpa": {
            "type": "string",
            "description": "UPI id of the merchant on which the payments are collected",
            "example": "fastestupi@pineaxis",
            "pattern": "^[a-z0-9.-]*@[a-zA-Z]*$"
          },
          "primaryAccount": {
            "$ref": "#/components/schemas/TPVAccountDetailResponse"
          },
          "purpose": {
            "type": "string",
            "description": "Purpose of the mandate",
            "default": "14",
            "example": "14",
            "enum": ["00", "14", "76", "01"]
          },
          "qrCode": {
            "type": "string",
            "description": "QR code for the generated intent link in the form of base64 encoded string",
            "example": ""
          },
          "recurrenceRule": {
            "type": "string",
            "description": "Recurrence rule of the mandate",
            "default": "on",
            "example": "on",
            "enum": ["on", "before", "after"]
          },
          "recurrenceValue": {
            "type": "integer",
            "description": "Recurrence value of the mandate",
            "example": 1,
            "minimum": 0,
            "maximum": 31
          },
          "referenceId": {
            "type": "string",
            "description": "Merchant reference id of the mandate",
            "example": "ABC1234789",
            "minLength": 5,
            "maxLength": 50
          },
          "secondaryAccounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TPVAccountDetailResponse"
            },
            "description": "secondary accounts for the recur tpv transaction",
            "example": [
              {
                "IFSC": "SBIN0000001",
                "encryptedAccountName": "5e884898da28047151d0e56f8dc629277",
                "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                "hashedAccountName": "5e884898da28047151d0e56f8dc629277",
                "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                "maskedAccountName": "R*M*E*S*",
                "maskedAccountNumber": "**** **** **** 7890"
              },
              {
                "IFSC": "SBIN0000001",
                "encryptedAccountName": "5e884898da28047151d0e56f8dc629277",
                "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                "hashedAccountName": "5e884898da28047151d0e56f8dc629277",
                "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                "maskedAccountName": "R*M*E*S*",
                "maskedAccountNumber": "**** **** **** 7890"
              }
            ]
          },
          "shareToPayee": { "type": "boolean", "example": false },
          "startDate": {
            "type": "string",
            "description": "Start date of the mandate (ddmmyyyy)",
            "example": "02012006"
          },
          "status": {
            "type": "string",
            "description": "Status of the mandate",
            "example": "pending",
            "enum": [
              "pending",
              "live",
              "paused",
              "revoked",
              "rejected",
              "completed"
            ]
          },
          "transactionNote": {
            "type": "string",
            "description": "Transaction note of the mandate",
            "example": "Transaction note"
          },
          "txnId": {
            "type": "string",
            "description": "NPCI transaction id",
            "example": "BTTZrc5gDFkuCr3n3I0ey4aNtzLOLR7K7aR",
            "pattern": "^[a-zA-Z0-9]*$",
            "minLength": 35,
            "maxLength": 35
          }
        },
        "example": {
          "allowMultipleDebit": true,
          "amount": 1000,
          "amountRule": "max",
          "autoExecute": true,
          "autoPreNotify": true,
          "autoRefundFirstExecutionAmount": false,
          "blockFunds": true,
          "createdAt": "2024-05-17T19:17:32+05:30",
          "creationMode": "qr",
          "currency": "INR",
          "customerRevocable": true,
          "customerVpa": "ram@axis",
          "endDate": "02012008",
          "expireAfter": 2,
          "firstExecutionAmount": 1000,
          "frequency": "monthly",
          "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
          "initiationMode": "04",
          "intentLink": "upi://mandate?pa=deku040920232@okokaxis\u0026pn=merchant-1\u0026validitystart=31121995\u0026validityend=31121996\u0026am=100.00\u0026amrule=MAX\u0026recur=one%20time\u0026recurvalue=0\u0026recurtype=on\u0026tr=SETgv8wOOCElAtpzfbAEXqcKvN8QPfunAhI\u0026cu=INR\u0026mc=1234\u0026mode=04\u0026purpose=14\u0026rev=N\u0026share=Y\u0026qrexpire=04092023\u0026block=N\u0026orgid=000000\u0026version=2.0\u0026txnType=create\u0026tid=SETgv8wOOCElAtpzfbAEXqcKvN8QPfunAhI",
          "maxAmountLimit": 1000,
          "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
          "merchantVpa": "fastestupi@pineaxis",
          "primaryAccount": {
            "IFSC": "SBIN0000001",
            "encryptedAccountName": "5e884898da28047151d0e56f8dc629277",
            "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
            "hashedAccountName": "5e884898da28047151d0e56f8dc629277",
            "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
            "maskedAccountName": "R*M*E*S*",
            "maskedAccountNumber": "**** **** **** 7890"
          },
          "purpose": "14",
          "qrCode": "",
          "recurrenceRule": "on",
          "recurrenceValue": 1,
          "referenceId": "ABC1234789",
          "secondaryAccounts": [
            {
              "IFSC": "SBIN0000001",
              "encryptedAccountName": "5e884898da28047151d0e56f8dc629277",
              "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
              "hashedAccountName": "5e884898da28047151d0e56f8dc629277",
              "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
              "maskedAccountName": "R*M*E*S*",
              "maskedAccountNumber": "**** **** **** 7890"
            },
            {
              "IFSC": "SBIN0000001",
              "encryptedAccountName": "5e884898da28047151d0e56f8dc629277",
              "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
              "hashedAccountName": "5e884898da28047151d0e56f8dc629277",
              "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
              "maskedAccountName": "R*M*E*S*",
              "maskedAccountNumber": "**** **** **** 7890"
            },
            {
              "IFSC": "SBIN0000001",
              "encryptedAccountName": "5e884898da28047151d0e56f8dc629277",
              "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
              "hashedAccountName": "5e884898da28047151d0e56f8dc629277",
              "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
              "maskedAccountName": "R*M*E*S*",
              "maskedAccountNumber": "**** **** **** 7890"
            },
            {
              "IFSC": "SBIN0000001",
              "encryptedAccountName": "5e884898da28047151d0e56f8dc629277",
              "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
              "hashedAccountName": "5e884898da28047151d0e56f8dc629277",
              "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
              "maskedAccountName": "R*M*E*S*",
              "maskedAccountNumber": "**** **** **** 7890"
            }
          ],
          "shareToPayee": false,
          "startDate": "02012006",
          "status": "pending",
          "transactionNote": "Transaction note",
          "txnId": "BTTZrc5gDFkuCr3n3I0ey4aNtzLOLR7K7aR"
        }
      },
      "Cursor": {
        "type": "object",
        "properties": {
          "current": {
            "type": "string",
            "description": "Cursor to the current page",
            "example": "MDFBUlozTkRFS1RTVjRSUkZGUTY5RzVGQVY="
          },
          "next": {
            "type": "string",
            "description": "Cursor to the next page",
            "example": "MDFBUlozTkRFS1RTVjRSUkZGUTY5RzVGQVY="
          },
          "previous": {
            "type": "string",
            "description": "Cursor to the previous page",
            "example": "MDFBUlozTkRFS1RTVjRSUkZGUTY5RzVGQVY="
          }
        },
        "example": {
          "current": "MDFBUlozTkRFS1RTVjRSUkZGUTY5RzVGQVY=",
          "next": "MDFBUlozTkRFS1RTVjRSUkZGUTY5RzVGQVY=",
          "previous": "MDFBUlozTkRFS1RTVjRSUkZGUTY5RzVGQVY="
        }
      },
      "DoCustomerVpaVerificationRequestBody": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "Ipsum nihil unde qui recusandae in tempore."
          },
          "status": {
            "type": "string",
            "example": "valid",
            "enum": ["pending", "valid", "invalid", "failed"]
          }
        },
        "example": {
          "id": "Assumenda officia quaerat maxime.",
          "status": "invalid"
        },
        "required": ["id", "status"]
      },
      "DoPaymentRequestBody": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "integer",
            "description": "Payment amount in paise",
            "example": 5713511464300884615,
            "format": "int64"
          },
          "offerId": { "type": "string", "example": "Qui placeat." },
          "payeeVpa": {
            "type": "string",
            "description": "VPA of the payee - merchant VPA",
            "example": "Dolorem distinctio ut facere minus."
          },
          "payerAccountDetails": {
            "$ref": "#/components/schemas/PayerAccountDetails"
          },
          "payerName": {
            "type": "string",
            "description": "name of the payer - payer account name",
            "example": "Sequi fugiat fugiat eligendi dicta doloremque."
          },
          "payerVpa": {
            "type": "string",
            "description": "VPA of the payer - customer VPA",
            "example": "Cupiditate consectetur id repudiandae voluptatem."
          },
          "refId": {
            "type": "string",
            "description": "Product instance ID",
            "example": "Aliquid impedit adipisci eaque qui voluptas harum."
          }
        },
        "example": {
          "amount": 525223695645943358,
          "offerId": "Ex est.",
          "payeeVpa": "Eligendi quia voluptates.",
          "payerAccountDetails": {
            "accountNumber": "Facilis voluptate sit enim architecto.",
            "accountType": "Fuga non.",
            "ifsc": "Vel voluptas."
          },
          "payerName": "Enim rerum omnis corrupti dolorem pariatur.",
          "payerVpa": "Quia eum nam et cum esse officiis.",
          "refId": "Ipsa neque voluptas illum a et deserunt."
        },
        "required": ["refId", "payerVpa", "payeeVpa"]
      },
      "ExecuteRequestBody": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "integer",
            "description": "Amount of the mandate",
            "example": 1000,
            "minimum": 100,
            "maximum": 20000000
          },
          "referenceId": {
            "type": "string",
            "description": "Merchant reference id of the mandate",
            "example": "ABC1234789",
            "minLength": 5,
            "maxLength": 50
          },
          "remark": {
            "type": "string",
            "description": "Remark for the mandate transaction",
            "example": "Transaction for car loan emi"
          },
          "sequenceNumber": {
            "type": "integer",
            "description": "Sequence number of the mandate",
            "example": 1,
            "format": "int64"
          },
          "umn": {
            "type": "string",
            "description": "Unique mandate number",
            "example": "123456789"
          }
        },
        "example": {
          "amount": 1000,
          "referenceId": "ABC1234789",
          "remark": "Transaction for car loan emi",
          "sequenceNumber": 1,
          "umn": "123456789"
        },
        "required": ["umn", "amount", "sequenceNumber"]
      },
      "ExecutionDates": {
        "type": "object",
        "properties": {
          "executionDate": {
            "type": "string",
            "description": "ISO 8601 timestamp to indicate the mandate execution time for a given cycle",
            "example": "2023-09-06 12:08:20.202644 +0530 IST",
            "format": "date-time"
          },
          "preDebitNotificationDate": {
            "type": "string",
            "description": "ISO 8601 timestamp to indicate the mandate pre debit notification time for a given cycle",
            "example": "2023-09-04 12:08:20.202644 +0530 IST",
            "format": "date-time"
          }
        },
        "example": {
          "executionDate": "2023-09-06 12:08:20.202644 +0530 IST",
          "preDebitNotificationDate": "2023-09-04 12:08:20.202644 +0530 IST"
        }
      },
      "ExpireDqrByIDResponse": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "integer",
            "description": "Amount (in paise) that needs to be collected from the user. If populated this value gets displayed on the payer PSP's payment page",
            "example": 10000,
            "minimum": 100
          },
          "closedAt": {
            "type": "string",
            "description": "RFC 3339 timestamp to indicate the closure date \u0026 time",
            "example": "2024-06-17T19:17:32+05:30",
            "format": "date-time"
          },
          "createdAt": {
            "type": "string",
            "description": "RFC 3339 timestamp to indicate the creation date \u0026 time for the resource",
            "example": "2024-05-17T19:17:32+05:30",
            "format": "date-time"
          },
          "expiryDate": {
            "type": "string",
            "description": "RFC 3339 timestamp to indicate the expiry date \u0026 time",
            "example": "2024-06-17T19:17:32+05:30",
            "format": "date-time"
          },
          "id": {
            "type": "string",
            "description": "Id of the resource, which is the same the id returned in the Create \u003cresource\u003e API response",
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "intentLink": {
            "type": "string",
            "description": "A UPI pay intent link built according to the spec enforced by NPCI",
            "example": "upi://pay?pa=test-auto-pgruosncak@okokaxis\u0026pn=merchant-4\u0026am=100.00\u0026tr=SU1240659756905923780\u0026tn=sample%20single%20use%20qr\u0026cu=INR\u0026mc=1234"
          },
          "merchantId": {
            "type": "string",
            "description": "Id associated with the merchant on our platform",
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "merchantVpa": {
            "type": "string",
            "description": "UPI id of the merchant on which the payments are collected",
            "example": "fastestupi@pineaxis",
            "pattern": "^[a-z0-9.-]*@[a-zA-Z]*$"
          },
          "metadata": {
            "type": "string",
            "description": "field provided for the merchant to add additional key-value pairs",
            "example": { "InvoiceNumber": "INV-21-12-009" },
            "format": "binary"
          },
          "minAmount": {
            "type": "integer",
            "description": "Minimum amount (in paise) - on setting this value the amount field on the PSP's payment page becomes editable and the customer can pay an amount equal to or greater than the minimum amount",
            "example": 1000,
            "minimum": 100
          },
          "qrCode": {
            "type": "string",
            "description": "QR code for the generated intent link in the form of base64 encoded string",
            "example": ""
          },
          "reason": { "$ref": "#/components/schemas/Reason" },
          "refId": {
            "type": "string",
            "description": "NPCI transaction refId",
            "example": "1240689979139556558",
            "pattern": "^[a-zA-Z0-9]*$",
            "minLength": 1,
            "maxLength": 35
          },
          "referenceId": {
            "type": "string",
            "description": "reference id in the merchant's system",
            "example": "1240689979139556557",
            "pattern": "^[a-zA-Z0-9]*$",
            "minLength": 1,
            "maxLength": 50
          },
          "shortLink": {
            "type": "string",
            "description": "A shortened URL for the given intent link",
            "example": "upipay.setu.co/Np3KnBCM8Om0"
          },
          "status": {
            "type": "string",
            "description": "status defining the validity of the payment link",
            "example": "active",
            "enum": ["inactive", "active", "paid", "closed"]
          },
          "transactionNote": {
            "type": "string",
            "description": "Transaction note displayed to the customer at the payer PSP's payment page",
            "example": "testpay"
          }
        },
        "example": {
          "amount": 10000,
          "closedAt": "2024-06-17T19:17:32+05:30",
          "createdAt": "2024-05-17T19:17:32+05:30",
          "expiryDate": "2024-06-17T19:17:32+05:30",
          "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
          "intentLink": "upi://pay?pa=test-auto-pgruosncak@okokaxis\u0026pn=merchant-4\u0026am=100.00\u0026tr=SU1240659756905923780\u0026tn=sample%20single%20use%20qr\u0026cu=INR\u0026mc=1234",
          "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
          "merchantVpa": "fastestupi@pineaxis",
          "metadata": { "InvoiceNumber": "INV-21-12-009" },
          "minAmount": 1000,
          "qrCode": "",
          "reason": {
            "code": "unable-to-fulfill-request",
            "desc": "unable-to-fulfill-request",
            "npciErrCategory": "TD",
            "npciErrCode": "YG",
            "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
            "npciRespCode": "YG",
            "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)",
            "setuDescription": "Merchant PSP error",
            "suggestedAction": "Merchant PSP error"
          },
          "refId": "1240689979139556558",
          "referenceId": "1240689979139556557",
          "shortLink": "upipay.setu.co/Np3KnBCM8Om0",
          "status": "active",
          "transactionNote": "testpay"
        }
      },
      "FetchAnalyseCustomerVpaByIDResponse": {
        "type": "object",
        "properties": {
          "createdAt": {
            "type": "string",
            "description": "ISO 8601 timestamp to indicate the creation date \u0026 time for the verification request",
            "example": "2024-05-17T19:17:32+05:30",
            "format": "date-time"
          },
          "customerAccountIfsc": {
            "type": "string",
            "description": "account ifsc of the customer's bank account",
            "example": "ICIC000001"
          },
          "customerAccountType": {
            "type": "string",
            "description": "account type of the customer",
            "example": "SAVINGS",
            "enum": ["SAVINGS", "CURRENT", "CREDIT"]
          },
          "customerName": {
            "type": "string",
            "description": "Customer's name as registered with the UPI id",
            "example": "Ram"
          },
          "customerVpa": {
            "type": "string",
            "description": "UPI id of the customer that needs to be verified",
            "example": "ram@okhdfc",
            "pattern": "^[a-zA-Z0-9.-]*@[a-zA-Z0-9.-]*$"
          },
          "id": {
            "type": "string",
            "description": "ID of the request",
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "merchantDetails": {
            "$ref": "#/components/schemas/VpaMerchantDetails"
          },
          "merchantId": {
            "type": "string",
            "description": "Id associated with the merchant on our platform",
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "reason": { "$ref": "#/components/schemas/Reason" },
          "referenceId": {
            "type": "string",
            "description": "Id to be used by merchant to identify the verifcation request on our platform",
            "example": "1240689979139556557",
            "pattern": "^[a-zA-Z0-9]*$",
            "minLength": 1,
            "maxLength": 50
          },
          "status": {
            "type": "string",
            "description": "status defining the validity of the customer vpa",
            "example": "pending",
            "enum": ["pending", "valid", "invalid", "failed"]
          }
        },
        "example": {
          "createdAt": "2024-05-17T19:17:32+05:30",
          "customerAccountIfsc": "ICIC000001",
          "customerAccountType": "SAVINGS",
          "customerName": "Ram",
          "customerVpa": "ram@okhdfc",
          "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
          "merchantDetails": {
            "brandName": "Setu",
            "businessType": "PROPRIETARY",
            "franchiseName": "Setu UPI",
            "genre": "ONLINE",
            "legalName": "BrokenTusk Technologies Pvt Ltd",
            "mcc": "5432",
            "merchantType": "large",
            "onboardingType": "aggregator"
          },
          "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
          "reason": {
            "code": "unable-to-fulfill-request",
            "desc": "unable-to-fulfill-request",
            "npciErrCategory": "TD",
            "npciErrCode": "YG",
            "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
            "npciRespCode": "YG",
            "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)",
            "setuDescription": "Merchant PSP error",
            "suggestedAction": "Merchant PSP error"
          },
          "referenceId": "1240689979139556557",
          "status": "pending"
        }
      },
      "FetchCollectResponse": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "integer",
            "description": "paise denominated value that needs to be collected from the user",
            "example": 10000,
            "minimum": 0,
            "maximum": 100000000000000000
          },
          "closedAt": {
            "type": "string",
            "description": "RFC 3339 timestamp to indicate the closure date \u0026 time",
            "example": "2024-05-17T19:17:32+05:30",
            "format": "date-time"
          },
          "createdAt": {
            "type": "string",
            "description": "RFC 3339 timestamp to indicate the creation date \u0026 time for the resource",
            "example": "2024-05-17T19:17:32+05:30",
            "format": "date-time"
          },
          "customerVpa": {
            "type": "string",
            "description": "UPI id of the customer to whom the collect request should be sent to",
            "example": "aadhitya@okaxis",
            "pattern": "^[A-Za-z0-9.-]*@[a-zA-Z0-9.-]*$"
          },
          "expireAfter": {
            "type": "integer",
            "description": "Expiry after (in minutes) for the collect request, the collect request will move to a closed state after this time has elapsed",
            "default": 30,
            "example": 2,
            "minimum": 1,
            "maximum": 64800
          },
          "id": {
            "type": "string",
            "description": "Id of the resource, which is the same the id returned in the Create \u003cresource\u003e API response",
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "merchantId": {
            "type": "string",
            "description": "Id associated with the merchant on our platform",
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "merchantVpa": {
            "type": "string",
            "description": "UPI id of the merchant on which the payments are collected",
            "example": "fastestupi@pineaxis"
          },
          "metadata": {
            "type": "string",
            "description": "field provided for the merchant to add additional key-value pairs",
            "example": { "InvoiceNumber": "INV-21-12-009" },
            "format": "binary"
          },
          "reason": { "$ref": "#/components/schemas/Reason" },
          "refId": {
            "type": "string",
            "description": "NPCI transaction refId",
            "example": "1240689979139556558",
            "pattern": "^[a-zA-Z0-9]*$",
            "minLength": 1,
            "maxLength": 35
          },
          "referenceId": {
            "type": "string",
            "description": "Id to be used by merchant to identify the collect request on our platform, this can be the customer's invoice number or loan number",
            "example": "1240689979139556557",
            "pattern": "^[a-zA-Z0-9]*$",
            "minLength": 1,
            "maxLength": 50
          },
          "status": {
            "type": "string",
            "description": "status defining the validity of the collect request",
            "example": "active",
            "enum": ["active", "paid", "closed"]
          },
          "transactionNote": {
            "type": "string",
            "description": "note displayed to the customer at the payment page",
            "example": "Payment for loan repayment",
            "pattern": "^[a-zA-Z0-9]*$",
            "minLength": 1,
            "maxLength": 50
          }
        },
        "example": {
          "amount": 10000,
          "closedAt": "2024-05-17T19:17:32+05:30",
          "createdAt": "2024-05-17T19:17:32+05:30",
          "customerVpa": "aadhitya@okaxis",
          "expireAfter": 2,
          "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
          "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
          "merchantVpa": "fastestupi@pineaxis",
          "metadata": { "InvoiceNumber": "INV-21-12-009" },
          "reason": {
            "code": "unable-to-fulfill-request",
            "desc": "unable-to-fulfill-request",
            "npciErrCategory": "TD",
            "npciErrCode": "YG",
            "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
            "npciRespCode": "YG",
            "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)",
            "setuDescription": "Merchant PSP error",
            "suggestedAction": "Merchant PSP error"
          },
          "refId": "1240689979139556558",
          "referenceId": "1240689979139556557",
          "status": "active",
          "transactionNote": "Payment for loan repayment"
        }
      },
      "FetchCustomerVpaByIDResponse": {
        "type": "object",
        "properties": {
          "createdAt": {
            "type": "string",
            "description": "ISO 8601 timestamp to indicate the creation date \u0026 time for the verification request",
            "example": "2024-05-17T19:17:32+05:30",
            "format": "date-time"
          },
          "customerAccountType": {
            "type": "string",
            "description": "account type of the customer",
            "example": "SAVINGS",
            "enum": ["SAVINGS", "CURRENT", "CREDIT"]
          },
          "customerVpa": {
            "type": "string",
            "description": "UPI id of the customer that needs to be verified",
            "example": "ram@okhdfc",
            "pattern": "^[a-zA-Z0-9.-]*@[a-zA-Z0-9.-]*$"
          },
          "id": {
            "type": "string",
            "description": "ID of the request",
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "merchantId": {
            "type": "string",
            "description": "Id associated with the merchant on our platform",
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "reason": { "$ref": "#/components/schemas/Reason" },
          "referenceId": {
            "type": "string",
            "description": "Id to be used by merchant to identify the verifcation request on our platform",
            "example": "1240689979139556557",
            "pattern": "^[a-zA-Z0-9]*$",
            "minLength": 1,
            "maxLength": 50
          },
          "status": {
            "type": "string",
            "description": "status defining the validity of the customer vpa",
            "example": "pending",
            "enum": ["pending", "valid", "invalid", "failed"]
          }
        },
        "example": {
          "createdAt": "2024-05-17T19:17:32+05:30",
          "customerAccountType": "SAVINGS",
          "customerVpa": "ram@okhdfc",
          "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
          "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
          "reason": {
            "code": "unable-to-fulfill-request",
            "desc": "unable-to-fulfill-request",
            "npciErrCategory": "TD",
            "npciErrCode": "YG",
            "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
            "npciRespCode": "YG",
            "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)",
            "setuDescription": "Merchant PSP error",
            "suggestedAction": "Merchant PSP error"
          },
          "referenceId": "1240689979139556557",
          "status": "pending"
        }
      },
      "FetchDqrByIDResponse": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "integer",
            "description": "Amount (in paise) that needs to be collected from the user. If populated this value gets displayed on the payer PSP's payment page",
            "example": 10000,
            "minimum": 100
          },
          "closedAt": {
            "type": "string",
            "description": "RFC 3339 timestamp to indicate the closure date \u0026 time",
            "example": "2024-06-17T19:17:32+05:30",
            "format": "date-time"
          },
          "createdAt": {
            "type": "string",
            "description": "RFC 3339 timestamp to indicate the creation date \u0026 time for the resource",
            "example": "2024-05-17T19:17:32+05:30",
            "format": "date-time"
          },
          "expiryDate": {
            "type": "string",
            "description": "RFC 3339 timestamp to indicate the expiry date \u0026 time",
            "example": "2024-06-17T19:17:32+05:30",
            "format": "date-time"
          },
          "id": {
            "type": "string",
            "description": "Id of the resource, which is the same the id returned in the Create \u003cresource\u003e API response",
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "intentLink": {
            "type": "string",
            "description": "A UPI pay intent link built according to the spec enforced by NPCI",
            "example": "upi://pay?pa=test-auto-pgruosncak@okokaxis\u0026pn=merchant-4\u0026am=100.00\u0026tr=SU1240659756905923780\u0026tn=sample%20single%20use%20qr\u0026cu=INR\u0026mc=1234"
          },
          "merchantId": {
            "type": "string",
            "description": "Id associated with the merchant on our platform",
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "merchantVpa": {
            "type": "string",
            "description": "UPI id of the merchant on which the payments are collected",
            "example": "fastestupi@pineaxis",
            "pattern": "^[a-z0-9.-]*@[a-zA-Z]*$"
          },
          "metadata": {
            "type": "string",
            "description": "field provided for the merchant to add additional key-value pairs",
            "example": { "InvoiceNumber": "INV-21-12-009" },
            "format": "binary"
          },
          "minAmount": {
            "type": "integer",
            "description": "Minimum amount (in paise) - on setting this value the amount field on the PSP's payment page becomes editable and the customer can pay an amount equal to or greater than the minimum amount",
            "example": 1000,
            "minimum": 100
          },
          "paymentDetails": { "$ref": "#/components/schemas/PaymentDetails" },
          "qrCode": {
            "type": "string",
            "description": "QR code for the generated intent link in the form of base64 encoded string",
            "example": ""
          },
          "reason": { "$ref": "#/components/schemas/Reason" },
          "refId": {
            "type": "string",
            "description": "NPCI transaction refId",
            "example": "1240689979139556558",
            "pattern": "^[a-zA-Z0-9]*$",
            "minLength": 1,
            "maxLength": 35
          },
          "referenceId": {
            "type": "string",
            "description": "reference id in the merchant's system",
            "example": "1240689979139556557",
            "pattern": "^[a-zA-Z0-9]*$",
            "minLength": 1,
            "maxLength": 50
          },
          "shortLink": {
            "type": "string",
            "description": "A shortened URL for the given intent link",
            "example": "upipay.setu.co/Np3KnBCM8Om0"
          },
          "status": {
            "type": "string",
            "description": "status defining the validity of the payment link",
            "example": "active",
            "enum": ["inactive", "active", "paid", "closed"]
          },
          "transactionNote": {
            "type": "string",
            "description": "Transaction note displayed to the customer at the payer PSP's payment page",
            "example": "testpay"
          }
        },
        "example": {
          "amount": 10000,
          "closedAt": "2024-06-17T19:17:32+05:30",
          "createdAt": "2024-05-17T19:17:32+05:30",
          "expiryDate": "2024-06-17T19:17:32+05:30",
          "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
          "intentLink": "upi://pay?pa=test-auto-pgruosncak@okokaxis\u0026pn=merchant-4\u0026am=100.00\u0026tr=SU1240659756905923780\u0026tn=sample%20single%20use%20qr\u0026cu=INR\u0026mc=1234",
          "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
          "merchantVpa": "fastestupi@pineaxis",
          "metadata": { "InvoiceNumber": "INV-21-12-009" },
          "minAmount": 1000,
          "paymentDetails": {
            "customerAccountType": "SAVINGS",
            "customerVpa": "test-auto-tyvmm59i9b@okokaxis",
            "paymentId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
            "paymentStatus": "initiated",
            "rrn": "124068997913",
            "txnId": "SETmBZkQOV0M7wyyP1V4PIFhRSzW5eSjmYI"
          },
          "qrCode": "",
          "reason": {
            "code": "unable-to-fulfill-request",
            "desc": "unable-to-fulfill-request",
            "npciErrCategory": "TD",
            "npciErrCode": "YG",
            "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
            "npciRespCode": "YG",
            "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)",
            "setuDescription": "Merchant PSP error",
            "suggestedAction": "Merchant PSP error"
          },
          "refId": "1240689979139556558",
          "referenceId": "1240689979139556557",
          "shortLink": "upipay.setu.co/Np3KnBCM8Om0",
          "status": "active",
          "transactionNote": "testpay"
        }
      },
      "FetchMandateExecutionResponse": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "integer",
            "description": "Amount of the mandate",
            "example": 1000,
            "minimum": 100,
            "maximum": 20000000
          },
          "createdAt": {
            "type": "string",
            "description": "RFC 3339 timestamp to indicate the creation date \u0026 time for the resource",
            "example": "2024-05-17T19:17:32+05:30",
            "format": "date-time"
          },
          "id": {
            "type": "string",
            "description": "Id of the resource, which is the same the id returned in the Create \u003cresource\u003e API response",
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "mandateId": {
            "type": "string",
            "description": "Id of the mandate that needs to be executed",
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "merchantId": {
            "type": "string",
            "description": "Id of the merchant who created the mandate",
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "reason": { "$ref": "#/components/schemas/Reason" },
          "referenceId": {
            "type": "string",
            "description": "Merchant reference id of the mandate",
            "example": "ABC1234789",
            "minLength": 5,
            "maxLength": 50
          },
          "remark": {
            "type": "string",
            "description": "Remark for the mandate transaction",
            "example": "Transaction for car loan emi"
          },
          "sequenceNumber": {
            "type": "integer",
            "description": "Sequence number of the mandate",
            "example": 1,
            "format": "int64"
          },
          "status": {
            "type": "string",
            "description": "Status of the mandate execution request",
            "example": "live",
            "enum": ["pending", "initiated", "success", "failed"]
          },
          "txnId": {
            "type": "string",
            "description": "NPCI transaction id",
            "example": "BTTZrc5gDFkuCr3n3I0ey4aNtzLOLR7K7aR",
            "pattern": "^[a-zA-Z0-9]*$",
            "minLength": 35,
            "maxLength": 35
          },
          "umn": {
            "type": "string",
            "description": "Unique mandate number",
            "example": "c27f5fc30d344e9594fce0afa34f8859@mypsp"
          }
        },
        "example": {
          "amount": 1000,
          "createdAt": "2024-05-17T19:17:32+05:30",
          "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
          "mandateId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
          "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
          "reason": {
            "code": "unable-to-fulfill-request",
            "desc": "unable-to-fulfill-request",
            "npciErrCategory": "TD",
            "npciErrCode": "YG",
            "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
            "npciRespCode": "YG",
            "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)",
            "setuDescription": "Merchant PSP error",
            "suggestedAction": "Merchant PSP error"
          },
          "referenceId": "ABC1234789",
          "remark": "Transaction for car loan emi",
          "sequenceNumber": 1,
          "status": "live",
          "txnId": "BTTZrc5gDFkuCr3n3I0ey4aNtzLOLR7K7aR",
          "umn": "c27f5fc30d344e9594fce0afa34f8859@mypsp"
        }
      },
      "FetchMandateOperationResponse": {
        "type": "object",
        "properties": {
          "amountLimit": {
            "type": "integer",
            "description": "Maximum amount for which a mandate transaction can be executed",
            "example": 1000,
            "minimum": 10000,
            "maximum": 2000000000
          },
          "createdAt": {
            "type": "string",
            "description": "ISO 8601 timestamp to indicate the creation date \u0026 time for the mandate operation request",
            "example": "2024-05-17T19:17:32+05:30",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "description": "End date of the mandate",
            "example": "02012006"
          },
          "expireAfter": {
            "type": "integer",
            "description": "Number of minutes after which the mandate update request will expire",
            "default": 2,
            "example": 2,
            "minimum": 2,
            "maximum": 64800
          },
          "id": {
            "type": "string",
            "description": "Id of the mandate request resource",
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "intentLink": {
            "type": "string",
            "example": "upi://mandate?pa=deku040920232@okokaxis\u0026validitystart=31121995\u0026validityend=30122025\u0026am=901.00\u0026amrule=max\u0026recur=one%20time\u0026recurvalue=0\u0026recurtype=on\u0026cu=INR\u0026mc=1234\u0026mode=01\u0026purpose=14\u0026rev=N\u0026block=N\u0026txnType=update\u0026umn=SETUS7mxYHK1A6yXhxJsoKM7yxKqC2r0\u0026tid=SETM3Iij4WQrtEUbOUFkTpQp2EpR5wqy5Ou"
          },
          "mandateId": {
            "type": "string",
            "description": "Id of the mandate resource",
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "merchantId": {
            "type": "string",
            "description": "Id of the merchant who created the mandate",
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "mode": {
            "type": "string",
            "description": "Mandate operation mode",
            "example": "qr",
            "enum": ["collect", "qr", "intent"]
          },
          "qrCode": {
            "type": "string",
            "description": "QR code for the generated intent link in the form of base64 encoded string",
            "example": ""
          },
          "reason": { "$ref": "#/components/schemas/Reason" },
          "referenceId": {
            "type": "string",
            "description": "Merchant reference id of the mandate",
            "example": "ABC1234789",
            "minLength": 5,
            "maxLength": 50
          },
          "status": {
            "type": "string",
            "example": "pending",
            "enum": ["pending", "initiated", "success", "failed"]
          },
          "txnId": {
            "type": "string",
            "description": "NPCI transaction id",
            "example": "BTTZrc5gDFkuCr3n3I0ey4aNtzLOLR7K7aR",
            "pattern": "^[a-zA-Z0-9]*$",
            "minLength": 35,
            "maxLength": 35
          },
          "type": {
            "type": "string",
            "description": "Mandate operation type",
            "example": "Sed amet necessitatibus."
          },
          "umn": {
            "type": "string",
            "description": "Unique mandate number",
            "example": "c27f5fc30d344e9594fce0afa34f8859@mypsp"
          }
        },
        "example": {
          "amountLimit": 1000,
          "createdAt": "2024-05-17T19:17:32+05:30",
          "endDate": "02012006",
          "expireAfter": 2,
          "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
          "intentLink": "upi://mandate?pa=deku040920232@okokaxis\u0026validitystart=31121995\u0026validityend=30122025\u0026am=901.00\u0026amrule=max\u0026recur=one%20time\u0026recurvalue=0\u0026recurtype=on\u0026cu=INR\u0026mc=1234\u0026mode=01\u0026purpose=14\u0026rev=N\u0026block=N\u0026txnType=update\u0026umn=SETUS7mxYHK1A6yXhxJsoKM7yxKqC2r0\u0026tid=SETM3Iij4WQrtEUbOUFkTpQp2EpR5wqy5Ou",
          "mandateId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
          "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
          "mode": "qr",
          "qrCode": "",
          "reason": {
            "code": "unable-to-fulfill-request",
            "desc": "unable-to-fulfill-request",
            "npciErrCategory": "TD",
            "npciErrCode": "YG",
            "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
            "npciRespCode": "YG",
            "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)",
            "setuDescription": "Merchant PSP error",
            "suggestedAction": "Merchant PSP error"
          },
          "referenceId": "ABC1234789",
          "status": "pending",
          "txnId": "BTTZrc5gDFkuCr3n3I0ey4aNtzLOLR7K7aR",
          "type": "Occaecati veritatis qui ratione perferendis doloribus.",
          "umn": "c27f5fc30d344e9594fce0afa34f8859@mypsp"
        }
      },
      "FetchMandatePreDebitNotificationResponse": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "integer",
            "description": "Amount of the mandate",
            "example": 1000,
            "minimum": 100,
            "maximum": 20000000
          },
          "createdAt": {
            "type": "string",
            "description": "RFC 3339 timestamp to indicate the creation date \u0026 time for the resource",
            "example": "2024-05-17T19:17:32+05:30",
            "format": "date-time"
          },
          "executionDate": {
            "type": "string",
            "description": "Execution date of the mandate",
            "example": "02012006"
          },
          "id": {
            "type": "string",
            "description": "Id of the resource, which is the same the id returned in the Create \u003cresource\u003e API response",
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "mandateId": {
            "type": "string",
            "description": "Id of the mandate that needs to be notified",
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "merchantId": {
            "type": "string",
            "description": "Id of the merchant who created the mandate",
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "reason": { "$ref": "#/components/schemas/Reason" },
          "referenceId": {
            "type": "string",
            "description": "Merchant reference id of the mandate",
            "example": "ABC1234789",
            "minLength": 5,
            "maxLength": 50
          },
          "sequenceNumber": {
            "type": "integer",
            "description": "Sequence number of the mandate",
            "example": 1,
            "format": "int64"
          },
          "status": {
            "type": "string",
            "description": "Status of the pre debit notification request",
            "example": "success",
            "enum": ["pending", "initiated", "success", "failed"]
          },
          "txnId": {
            "type": "string",
            "description": "NPCI transaction id",
            "example": "BTTZrc5gDFkuCr3n3I0ey4aNtzLOLR7K7aR",
            "pattern": "^[a-zA-Z0-9]*$",
            "minLength": 35,
            "maxLength": 35
          },
          "umn": {
            "type": "string",
            "description": "Unique mandate number",
            "example": "c27f5fc30d344e9594fce0afa34f8859@mypsp"
          }
        },
        "example": {
          "amount": 1000,
          "createdAt": "2024-05-17T19:17:32+05:30",
          "executionDate": "02012006",
          "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
          "mandateId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
          "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
          "reason": {
            "code": "unable-to-fulfill-request",
            "desc": "unable-to-fulfill-request",
            "npciErrCategory": "TD",
            "npciErrCode": "YG",
            "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
            "npciRespCode": "YG",
            "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)",
            "setuDescription": "Merchant PSP error",
            "suggestedAction": "Merchant PSP error"
          },
          "referenceId": "ABC1234789",
          "sequenceNumber": 1,
          "status": "success",
          "txnId": "BTTZrc5gDFkuCr3n3I0ey4aNtzLOLR7K7aR",
          "umn": "c27f5fc30d344e9594fce0afa34f8859@mypsp"
        }
      },
      "FetchMandateResponse": {
        "type": "object",
        "properties": {
          "allowMultipleDebit": {
            "type": "boolean",
            "description": "Allow multiple debits for the mandate",
            "default": false,
            "example": true
          },
          "amount": {
            "type": "integer",
            "description": "Amount(in paise) of the mandate",
            "example": 1000,
            "minimum": 100,
            "maximum": 20000000
          },
          "amountRule": {
            "type": "string",
            "description": "Rule for verifying the debit amount is within range of specified amount_limit",
            "example": "max",
            "enum": ["max", "exact"]
          },
          "autoExecute": {
            "type": "boolean",
            "description": "Auto execute of the mandate",
            "example": true
          },
          "autoPreNotify": {
            "type": "boolean",
            "description": "Auto pre notify of the mandate",
            "example": true
          },
          "autoRefundFirstExecutionAmount": {
            "type": "boolean",
            "description": "Enable auto refund of first execution amount",
            "default": false,
            "example": false
          },
          "blockFunds": {
            "type": "boolean",
            "description": "Block funds for the mandate",
            "default": false,
            "example": true
          },
          "createdAt": {
            "type": "string",
            "description": "RFC 3339 timestamp to indicate the creation date \u0026 time for the resource",
            "example": "2024-05-17T19:17:32+05:30",
            "format": "date-time"
          },
          "creationMode": {
            "type": "string",
            "description": "Creation mode of the mandate",
            "example": "qr",
            "enum": ["collect", "intent"]
          },
          "currency": {
            "type": "string",
            "description": "Currency in which the mandate payment will be executed",
            "default": "INR",
            "example": "INR"
          },
          "customerRevocable": { "type": "boolean", "example": true },
          "customerVpa": {
            "type": "string",
            "description": "UPI id of the customer from which payments are made",
            "example": "ram@axis",
            "pattern": "^[a-zA-Z0-9.-]*@[a-zA-Z0-9.-]*$"
          },
          "endDate": {
            "type": "string",
            "description": "End date of the mandate (ddmmyyyy)",
            "example": "02012008"
          },
          "expireAfter": {
            "type": "integer",
            "description": "Number of minutes after which the mandate creation request will expire",
            "default": 2,
            "example": 2,
            "minimum": 2,
            "maximum": 64800
          },
          "firstExecutionAmount": {
            "type": "integer",
            "description": "First execution amount(in paise) of the mandate",
            "default": 0,
            "example": 1000,
            "format": "int64"
          },
          "frequency": {
            "type": "string",
            "description": "Frequency of the mandate",
            "example": "monthly",
            "enum": [
              "one time",
              "weekly",
              "daily",
              "fortnightly",
              "monthly",
              "bi monthly",
              "quarterly",
              "half yearly",
              "yearly",
              "as presented"
            ]
          },
          "id": {
            "type": "string",
            "description": "Id of the resource, which is the same the id returned in the Create \u003cresource\u003e API response",
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "initiationMode": {
            "type": "string",
            "description": "Initiation mode of the mandate",
            "example": "01",
            "enum": ["00", "01", "04"]
          },
          "intentLink": {
            "type": "string",
            "description": "Intent link for the mandate request",
            "example": "upi://mandate?pa=deku040920232@okokaxis\u0026pn=merchant-1\u0026validitystart=31121995\u0026validityend=31121996\u0026am=100.00\u0026amrule=MAX\u0026recur=one%20time\u0026recurvalue=0\u0026recurtype=on\u0026tr=SETgv8wOOCElAtpzfbAEXqcKvN8QPfunAhI\u0026cu=INR\u0026mc=1234\u0026mode=04\u0026purpose=14\u0026rev=N\u0026share=Y\u0026qrexpire=04092023\u0026block=N\u0026orgid=000000\u0026version=2.0\u0026txnType=create\u0026tid=SETgv8wOOCElAtpzfbAEXqcKvN8QPfunAhI"
          },
          "maxAmountLimit": {
            "type": "integer",
            "description": "Maximum amount(in paise) for which a mandate transaction can be executed",
            "example": 1000,
            "minimum": 100,
            "maximum": 20000000
          },
          "merchantId": {
            "type": "string",
            "description": "Id of the merchant who created the mandate",
            "example": "Delectus excepturi sunt sit animi expedita inventore."
          },
          "merchantVpa": {
            "type": "string",
            "description": "UPI id of the merchant on which the payments are collected",
            "example": "fastestupi@pineaxis",
            "pattern": "^[a-z0-9.-]*@[a-zA-Z]*$"
          },
          "primaryAccount": {
            "$ref": "#/components/schemas/TPVAccountDetailResponse"
          },
          "productConfigId": {
            "type": "string",
            "description": "Configuration Id of the product",
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "purpose": {
            "type": "string",
            "description": "Purpose of the mandate",
            "default": "14",
            "example": "14",
            "enum": ["00", "14", "76", "01"]
          },
          "qrCode": {
            "type": "string",
            "description": "QR code for the generated intent link in the form of base64 encoded string",
            "example": ""
          },
          "reason": { "$ref": "#/components/schemas/Reason" },
          "recurrenceRule": {
            "type": "string",
            "description": "Recurrence rule of the mandate",
            "default": "on",
            "example": "on",
            "enum": ["on", "before", "after"]
          },
          "recurrenceValue": {
            "type": "integer",
            "description": "Recurrence value of the mandate",
            "example": 1,
            "minimum": 0,
            "maximum": 31
          },
          "referenceId": {
            "type": "string",
            "description": "Merchant reference id of the mandate",
            "example": "ABC1234789",
            "minLength": 5,
            "maxLength": 50
          },
          "secondaryAccounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TPVAccountDetailResponse"
            },
            "description": "secondary accounts for the recur tpv transaction",
            "example": [
              {
                "IFSC": "SBIN0000001",
                "encryptedAccountName": "5e884898da28047151d0e56f8dc629277",
                "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                "hashedAccountName": "5e884898da28047151d0e56f8dc629277",
                "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                "maskedAccountName": "R*M*E*S*",
                "maskedAccountNumber": "**** **** **** 7890"
              },
              {
                "IFSC": "SBIN0000001",
                "encryptedAccountName": "5e884898da28047151d0e56f8dc629277",
                "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                "hashedAccountName": "5e884898da28047151d0e56f8dc629277",
                "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                "maskedAccountName": "R*M*E*S*",
                "maskedAccountNumber": "**** **** **** 7890"
              },
              {
                "IFSC": "SBIN0000001",
                "encryptedAccountName": "5e884898da28047151d0e56f8dc629277",
                "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                "hashedAccountName": "5e884898da28047151d0e56f8dc629277",
                "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                "maskedAccountName": "R*M*E*S*",
                "maskedAccountNumber": "**** **** **** 7890"
              },
              {
                "IFSC": "SBIN0000001",
                "encryptedAccountName": "5e884898da28047151d0e56f8dc629277",
                "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                "hashedAccountName": "5e884898da28047151d0e56f8dc629277",
                "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                "maskedAccountName": "R*M*E*S*",
                "maskedAccountNumber": "**** **** **** 7890"
              }
            ]
          },
          "shareToPayee": { "type": "boolean", "example": false },
          "startDate": {
            "type": "string",
            "description": "Start date of the mandate (ddmmyyyy)",
            "example": "02012006"
          },
          "status": {
            "type": "string",
            "description": "Status of the mandate",
            "example": "pending",
            "enum": [
              "pending",
              "live",
              "paused",
              "revoked",
              "rejected",
              "completed"
            ]
          },
          "transactionNote": {
            "type": "string",
            "description": "Transaction note of the mandate",
            "example": "Transaction note"
          },
          "txnId": {
            "type": "string",
            "description": "NPCI transaction id",
            "example": "BTTZrc5gDFkuCr3n3I0ey4aNtzLOLR7K7aR",
            "pattern": "^[a-zA-Z0-9]*$",
            "minLength": 35,
            "maxLength": 35
          },
          "umn": {
            "type": "string",
            "description": "Unique mandate number",
            "example": "c27f5fc30d344e9594fce0afa34f8859@mypsp"
          }
        },
        "example": {
          "allowMultipleDebit": true,
          "amount": 1000,
          "amountRule": "max",
          "autoExecute": true,
          "autoPreNotify": true,
          "autoRefundFirstExecutionAmount": false,
          "blockFunds": true,
          "createdAt": "2024-05-17T19:17:32+05:30",
          "creationMode": "qr",
          "currency": "INR",
          "customerRevocable": true,
          "customerVpa": "ram@axis",
          "endDate": "02012008",
          "expireAfter": 2,
          "firstExecutionAmount": 1000,
          "frequency": "monthly",
          "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
          "initiationMode": "01",
          "intentLink": "upi://mandate?pa=deku040920232@okokaxis\u0026pn=merchant-1\u0026validitystart=31121995\u0026validityend=31121996\u0026am=100.00\u0026amrule=MAX\u0026recur=one%20time\u0026recurvalue=0\u0026recurtype=on\u0026tr=SETgv8wOOCElAtpzfbAEXqcKvN8QPfunAhI\u0026cu=INR\u0026mc=1234\u0026mode=04\u0026purpose=14\u0026rev=N\u0026share=Y\u0026qrexpire=04092023\u0026block=N\u0026orgid=000000\u0026version=2.0\u0026txnType=create\u0026tid=SETgv8wOOCElAtpzfbAEXqcKvN8QPfunAhI",
          "maxAmountLimit": 1000,
          "merchantId": "A qui.",
          "merchantVpa": "fastestupi@pineaxis",
          "primaryAccount": {
            "IFSC": "SBIN0000001",
            "encryptedAccountName": "5e884898da28047151d0e56f8dc629277",
            "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
            "hashedAccountName": "5e884898da28047151d0e56f8dc629277",
            "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
            "maskedAccountName": "R*M*E*S*",
            "maskedAccountNumber": "**** **** **** 7890"
          },
          "productConfigId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
          "purpose": "14",
          "qrCode": "",
          "reason": {
            "code": "unable-to-fulfill-request",
            "desc": "unable-to-fulfill-request",
            "npciErrCategory": "TD",
            "npciErrCode": "YG",
            "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
            "npciRespCode": "YG",
            "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)",
            "setuDescription": "Merchant PSP error",
            "suggestedAction": "Merchant PSP error"
          },
          "recurrenceRule": "on",
          "recurrenceValue": 1,
          "referenceId": "ABC1234789",
          "secondaryAccounts": [
            {
              "IFSC": "SBIN0000001",
              "encryptedAccountName": "5e884898da28047151d0e56f8dc629277",
              "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
              "hashedAccountName": "5e884898da28047151d0e56f8dc629277",
              "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
              "maskedAccountName": "R*M*E*S*",
              "maskedAccountNumber": "**** **** **** 7890"
            },
            {
              "IFSC": "SBIN0000001",
              "encryptedAccountName": "5e884898da28047151d0e56f8dc629277",
              "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
              "hashedAccountName": "5e884898da28047151d0e56f8dc629277",
              "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
              "maskedAccountName": "R*M*E*S*",
              "maskedAccountNumber": "**** **** **** 7890"
            }
          ],
          "shareToPayee": false,
          "startDate": "02012006",
          "status": "pending",
          "transactionNote": "Transaction note",
          "txnId": "BTTZrc5gDFkuCr3n3I0ey4aNtzLOLR7K7aR",
          "umn": "c27f5fc30d344e9594fce0afa34f8859@mypsp"
        }
      },
      "FetchOqrByIDResponse": {
        "type": "object",
        "properties": {
          "closedAt": {
            "type": "string",
            "description": "RFC 3339 timestamp to indicate the closure date \u0026 time",
            "example": "2024-06-17T19:17:32+05:30",
            "format": "date-time"
          },
          "createdAt": {
            "type": "string",
            "description": "RFC 3339 timestamp to indicate the creation date \u0026 time for the resource",
            "example": "2024-05-17T19:17:32+05:30",
            "format": "date-time"
          },
          "expiryDate": {
            "type": "string",
            "description": "RFC 3339 timestamp to indicate the expiry date \u0026 time",
            "example": "2024-06-17T19:17:32+05:30",
            "format": "date-time"
          },
          "id": {
            "type": "string",
            "description": "Id of the resource, which is the same the id returned in the Create \u003cresource\u003e API response",
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "intentLink": {
            "type": "string",
            "description": "A UPI pay intent link built according to the spec enforced by NPCI",
            "example": "upi://pay?pa=test-auto-pgruosncak@okokaxis\u0026pn=merchant-4\u0026am=100.00\u0026tr=SU1240659756905923780\u0026tn=samplesingle0useqr\u0026cu=INR\u0026mc=1234"
          },
          "merchantId": {
            "type": "string",
            "description": "Id associated with the merchant on our platform",
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "merchantVpa": {
            "type": "string",
            "description": "UPI id of the merchant on which the payments are collected",
            "example": "fastestupi@pineaxis",
            "pattern": "^[a-z0-9.-]*@[a-zA-Z]*$"
          },
          "reason": { "$ref": "#/components/schemas/Reason" },
          "referenceId": {
            "type": "string",
            "description": "reference id in the merchant's system",
            "example": "1240689979139556557",
            "pattern": "^[a-zA-Z0-9]*$",
            "minLength": 1,
            "maxLength": 50
          },
          "status": {
            "type": "string",
            "description": "status defining the validity of the payment link",
            "example": "active",
            "enum": ["inactive", "active", "paid", "closed"]
          },
          "transactionReference": {
            "type": "string",
            "description": "Transaction reference id circulated by NPCI",
            "example": "1240689979139556558",
            "pattern": "^[a-zA-Z0-9]*$",
            "minLength": 9,
            "maxLength": 35
          }
        },
        "example": {
          "closedAt": "2024-06-17T19:17:32+05:30",
          "createdAt": "2024-05-17T19:17:32+05:30",
          "expiryDate": "2024-06-17T19:17:32+05:30",
          "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
          "intentLink": "upi://pay?pa=test-auto-pgruosncak@okokaxis\u0026pn=merchant-4\u0026am=100.00\u0026tr=SU1240659756905923780\u0026tn=samplesingle0useqr\u0026cu=INR\u0026mc=1234",
          "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
          "merchantVpa": "fastestupi@pineaxis",
          "reason": {
            "code": "unable-to-fulfill-request",
            "desc": "unable-to-fulfill-request",
            "npciErrCategory": "TD",
            "npciErrCode": "YG",
            "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
            "npciRespCode": "YG",
            "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)",
            "setuDescription": "Merchant PSP error",
            "suggestedAction": "Merchant PSP error"
          },
          "referenceId": "1240689979139556557",
          "status": "active",
          "transactionReference": "1240689979139556558"
        }
      },
      "FetchPaymentListResponse": {
        "type": "object",
        "properties": {
          "Payments": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/FetchPaymentResponse2" },
            "example": [
              {
                "amount": 10000,
                "bin": "652922",
                "createdAt": "2024-05-17T19:17:32+05:30",
                "currency": "INR",
                "customerAccountType": "SAVINGS",
                "customerVpa": "test-auto-tyvmm59i9b@okokaxis",
                "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                "merchantVpa": "test-auto-beibfev2oq@okokaxis",
                "productInstanceId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                "reason": {
                  "code": "unable-to-fulfill-request",
                  "desc": "unable-to-fulfill-request",
                  "npciErrCategory": "TD",
                  "npciErrCode": "YG",
                  "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
                  "npciRespCode": "YG",
                  "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)",
                  "setuDescription": "Merchant PSP error",
                  "suggestedAction": "Merchant PSP error"
                },
                "refId": "1240689979139556558",
                "referenceId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                "requestId": "cjqml1f2e5ocq2mesej0",
                "rrn": "124068997913",
                "status": "initiated",
                "txnId": "SETmBZkQOV0M7wyyP1V4PIFhRSzW5eSjmYI",
                "txnNote": "testpay"
              },
              {
                "amount": 10000,
                "bin": "652922",
                "createdAt": "2024-05-17T19:17:32+05:30",
                "currency": "INR",
                "customerAccountType": "SAVINGS",
                "customerVpa": "test-auto-tyvmm59i9b@okokaxis",
                "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                "merchantVpa": "test-auto-beibfev2oq@okokaxis",
                "productInstanceId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                "reason": {
                  "code": "unable-to-fulfill-request",
                  "desc": "unable-to-fulfill-request",
                  "npciErrCategory": "TD",
                  "npciErrCode": "YG",
                  "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
                  "npciRespCode": "YG",
                  "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)",
                  "setuDescription": "Merchant PSP error",
                  "suggestedAction": "Merchant PSP error"
                },
                "refId": "1240689979139556558",
                "referenceId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                "requestId": "cjqml1f2e5ocq2mesej0",
                "rrn": "124068997913",
                "status": "initiated",
                "txnId": "SETmBZkQOV0M7wyyP1V4PIFhRSzW5eSjmYI",
                "txnNote": "testpay"
              },
              {
                "amount": 10000,
                "bin": "652922",
                "createdAt": "2024-05-17T19:17:32+05:30",
                "currency": "INR",
                "customerAccountType": "SAVINGS",
                "customerVpa": "test-auto-tyvmm59i9b@okokaxis",
                "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                "merchantVpa": "test-auto-beibfev2oq@okokaxis",
                "productInstanceId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                "reason": {
                  "code": "unable-to-fulfill-request",
                  "desc": "unable-to-fulfill-request",
                  "npciErrCategory": "TD",
                  "npciErrCode": "YG",
                  "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
                  "npciRespCode": "YG",
                  "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)",
                  "setuDescription": "Merchant PSP error",
                  "suggestedAction": "Merchant PSP error"
                },
                "refId": "1240689979139556558",
                "referenceId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                "requestId": "cjqml1f2e5ocq2mesej0",
                "rrn": "124068997913",
                "status": "initiated",
                "txnId": "SETmBZkQOV0M7wyyP1V4PIFhRSzW5eSjmYI",
                "txnNote": "testpay"
              }
            ]
          }
        },
        "example": {
          "Payments": [
            {
              "amount": 10000,
              "bin": "652922",
              "createdAt": "2024-05-17T19:17:32+05:30",
              "currency": "INR",
              "customerAccountType": "SAVINGS",
              "customerVpa": "test-auto-tyvmm59i9b@okokaxis",
              "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
              "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
              "merchantVpa": "test-auto-beibfev2oq@okokaxis",
              "productInstanceId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
              "reason": {
                "code": "unable-to-fulfill-request",
                "desc": "unable-to-fulfill-request",
                "npciErrCategory": "TD",
                "npciErrCode": "YG",
                "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
                "npciRespCode": "YG",
                "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)",
                "setuDescription": "Merchant PSP error",
                "suggestedAction": "Merchant PSP error"
              },
              "refId": "1240689979139556558",
              "referenceId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
              "requestId": "cjqml1f2e5ocq2mesej0",
              "rrn": "124068997913",
              "status": "initiated",
              "txnId": "SETmBZkQOV0M7wyyP1V4PIFhRSzW5eSjmYI",
              "txnNote": "testpay"
            },
            {
              "amount": 10000,
              "bin": "652922",
              "createdAt": "2024-05-17T19:17:32+05:30",
              "currency": "INR",
              "customerAccountType": "SAVINGS",
              "customerVpa": "test-auto-tyvmm59i9b@okokaxis",
              "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
              "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
              "merchantVpa": "test-auto-beibfev2oq@okokaxis",
              "productInstanceId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
              "reason": {
                "code": "unable-to-fulfill-request",
                "desc": "unable-to-fulfill-request",
                "npciErrCategory": "TD",
                "npciErrCode": "YG",
                "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
                "npciRespCode": "YG",
                "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)",
                "setuDescription": "Merchant PSP error",
                "suggestedAction": "Merchant PSP error"
              },
              "refId": "1240689979139556558",
              "referenceId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
              "requestId": "cjqml1f2e5ocq2mesej0",
              "rrn": "124068997913",
              "status": "initiated",
              "txnId": "SETmBZkQOV0M7wyyP1V4PIFhRSzW5eSjmYI",
              "txnNote": "testpay"
            },
            {
              "amount": 10000,
              "bin": "652922",
              "createdAt": "2024-05-17T19:17:32+05:30",
              "currency": "INR",
              "customerAccountType": "SAVINGS",
              "customerVpa": "test-auto-tyvmm59i9b@okokaxis",
              "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
              "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
              "merchantVpa": "test-auto-beibfev2oq@okokaxis",
              "productInstanceId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
              "reason": {
                "code": "unable-to-fulfill-request",
                "desc": "unable-to-fulfill-request",
                "npciErrCategory": "TD",
                "npciErrCode": "YG",
                "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
                "npciRespCode": "YG",
                "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)",
                "setuDescription": "Merchant PSP error",
                "suggestedAction": "Merchant PSP error"
              },
              "refId": "1240689979139556558",
              "referenceId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
              "requestId": "cjqml1f2e5ocq2mesej0",
              "rrn": "124068997913",
              "status": "initiated",
              "txnId": "SETmBZkQOV0M7wyyP1V4PIFhRSzW5eSjmYI",
              "txnNote": "testpay"
            },
            {
              "amount": 10000,
              "bin": "652922",
              "createdAt": "2024-05-17T19:17:32+05:30",
              "currency": "INR",
              "customerAccountType": "SAVINGS",
              "customerVpa": "test-auto-tyvmm59i9b@okokaxis",
              "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
              "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
              "merchantVpa": "test-auto-beibfev2oq@okokaxis",
              "productInstanceId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
              "reason": {
                "code": "unable-to-fulfill-request",
                "desc": "unable-to-fulfill-request",
                "npciErrCategory": "TD",
                "npciErrCode": "YG",
                "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
                "npciRespCode": "YG",
                "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)",
                "setuDescription": "Merchant PSP error",
                "suggestedAction": "Merchant PSP error"
              },
              "refId": "1240689979139556558",
              "referenceId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
              "requestId": "cjqml1f2e5ocq2mesej0",
              "rrn": "124068997913",
              "status": "initiated",
              "txnId": "SETmBZkQOV0M7wyyP1V4PIFhRSzW5eSjmYI",
              "txnNote": "testpay"
            }
          ]
        }
      },
      "FetchPaymentResponse": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "integer",
            "description": "paise denominated value collected from the user",
            "example": 10000,
            "format": "int64"
          },
          "bin": {
            "type": "string",
            "description": "bin number",
            "example": "652922"
          },
          "createdAt": {
            "type": "string",
            "description": "RFC 3339 timestamp to indicate the creation date \u0026 time for the resource",
            "example": "2024-05-17T19:17:32+05:30",
            "format": "date-time"
          },
          "currency": {
            "type": "string",
            "description": "indicates the currency used during the transaction",
            "example": "INR"
          },
          "customerAccountType": {
            "type": "string",
            "description": "account type of the customer",
            "example": "SAVINGS",
            "enum": ["SAVINGS", "CURRENT", "CREDIT"]
          },
          "customerVpa": {
            "type": "string",
            "description": "remitter's VPA",
            "example": "test-auto-tyvmm59i9b@okokaxis"
          },
          "id": {
            "type": "string",
            "description": "Id of the resource, which is the same the id returned in the Create \u003cresource\u003e API response",
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "merchantId": {
            "type": "string",
            "description": "Id associated with the merchant on our platform",
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "merchantVpa": {
            "type": "string",
            "description": "VPA used to accept payment",
            "example": "test-auto-beibfev2oq@okokaxis"
          },
          "productInstanceId": {
            "type": "string",
            "description": "this is the deeplink / collect request / mandate id associated with the payment",
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "reason": { "$ref": "#/components/schemas/Reason" },
          "refId": {
            "type": "string",
            "description": "NPCI transaction refId",
            "example": "1240689979139556558"
          },
          "referenceId": {
            "type": "string",
            "description": "reference id in the merchant's system",
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "rrn": {
            "type": "string",
            "description": "NPCI transaction custRef",
            "example": "124068997913"
          },
          "status": {
            "type": "string",
            "description": "status defining the validity of the payment",
            "example": "initiated",
            "enum": ["initiated", "pending", "success", "failed"]
          },
          "txnId": {
            "type": "string",
            "description": "NPCI transaction id",
            "example": "SETmBZkQOV0M7wyyP1V4PIFhRSzW5eSjmYI"
          },
          "txnNote": {
            "type": "string",
            "description": "note displayed to the customer at the payment page",
            "example": "testpay"
          }
        },
        "example": {
          "amount": 10000,
          "bin": "652922",
          "createdAt": "2024-05-17T19:17:32+05:30",
          "currency": "INR",
          "customerAccountType": "SAVINGS",
          "customerVpa": "test-auto-tyvmm59i9b@okokaxis",
          "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
          "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
          "merchantVpa": "test-auto-beibfev2oq@okokaxis",
          "productInstanceId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
          "reason": {
            "code": "unable-to-fulfill-request",
            "desc": "unable-to-fulfill-request",
            "npciErrCategory": "TD",
            "npciErrCode": "YG",
            "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
            "npciRespCode": "YG",
            "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)",
            "setuDescription": "Merchant PSP error",
            "suggestedAction": "Merchant PSP error"
          },
          "refId": "1240689979139556558",
          "referenceId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
          "rrn": "124068997913",
          "status": "initiated",
          "txnId": "SETmBZkQOV0M7wyyP1V4PIFhRSzW5eSjmYI",
          "txnNote": "testpay"
        },
        "required": [
          "merchantVpa",
          "customerVpa",
          "amount",
          "productInstanceId"
        ]
      },
      "FetchPaymentResponse2": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "integer",
            "description": "paise denominated value collected from the user",
            "example": 10000,
            "format": "int64"
          },
          "bin": {
            "type": "string",
            "description": "bin number",
            "example": "652922"
          },
          "createdAt": {
            "type": "string",
            "description": "RFC 3339 timestamp to indicate the creation date \u0026 time for the resource",
            "example": "2024-05-17T19:17:32+05:30",
            "format": "date-time"
          },
          "currency": {
            "type": "string",
            "description": "indicates the currency used during the transaction",
            "example": "INR"
          },
          "customerAccountType": {
            "type": "string",
            "description": "account type of the customer",
            "example": "SAVINGS",
            "enum": ["SAVINGS", "CURRENT", "CREDIT"]
          },
          "customerVpa": {
            "type": "string",
            "description": "remitter's VPA",
            "example": "test-auto-tyvmm59i9b@okokaxis"
          },
          "id": {
            "type": "string",
            "description": "Id of the resource, which is the same the id returned in the Create \u003cresource\u003e API response",
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "merchantId": {
            "type": "string",
            "description": "Id associated with the merchant on our platform",
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "merchantVpa": {
            "type": "string",
            "description": "VPA used to accept payment",
            "example": "test-auto-beibfev2oq@okokaxis"
          },
          "productInstanceId": {
            "type": "string",
            "description": "this is the deeplink / collect request / mandate id associated with the payment",
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "reason": { "$ref": "#/components/schemas/Reason" },
          "refId": {
            "type": "string",
            "description": "NPCI transaction refId",
            "example": "1240689979139556558"
          },
          "referenceId": {
            "type": "string",
            "description": "reference id in the merchant's system",
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "requestId": {
            "type": "string",
            "example": "cjqml1f2e5ocq2mesej0"
          },
          "rrn": {
            "type": "string",
            "description": "NPCI transaction custRef",
            "example": "124068997913"
          },
          "status": {
            "type": "string",
            "description": "status defining the validity of the payment",
            "example": "initiated",
            "enum": ["initiated", "pending", "success", "failed"]
          },
          "txnId": {
            "type": "string",
            "description": "NPCI transaction id",
            "example": "SETmBZkQOV0M7wyyP1V4PIFhRSzW5eSjmYI"
          },
          "txnNote": {
            "type": "string",
            "description": "note displayed to the customer at the payment page",
            "example": "testpay"
          }
        },
        "description": "FetchPaymentResponse is the response type returned by the payment service",
        "example": {
          "amount": 10000,
          "bin": "652922",
          "createdAt": "2024-05-17T19:17:32+05:30",
          "currency": "INR",
          "customerAccountType": "SAVINGS",
          "customerVpa": "test-auto-tyvmm59i9b@okokaxis",
          "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
          "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
          "merchantVpa": "test-auto-beibfev2oq@okokaxis",
          "productInstanceId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
          "reason": {
            "code": "unable-to-fulfill-request",
            "desc": "unable-to-fulfill-request",
            "npciErrCategory": "TD",
            "npciErrCode": "YG",
            "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
            "npciRespCode": "YG",
            "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)",
            "setuDescription": "Merchant PSP error",
            "suggestedAction": "Merchant PSP error"
          },
          "refId": "1240689979139556558",
          "referenceId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
          "requestId": "cjqml1f2e5ocq2mesej0",
          "rrn": "124068997913",
          "status": "initiated",
          "txnId": "SETmBZkQOV0M7wyyP1V4PIFhRSzW5eSjmYI",
          "txnNote": "testpay"
        },
        "required": [
          "merchantVpa",
          "customerVpa",
          "amount",
          "productInstanceId"
        ]
      },
      "FetchSqrByIDResponse": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "integer",
            "description": "Amount (in paise) that needs to be collected from the user. If populated this value gets displayed on the payer PSP's payment page",
            "example": 10000,
            "minimum": 100
          },
          "closedAt": {
            "type": "string",
            "description": "RFC 3339 timestamp to indicate the closure date \u0026 time",
            "example": "2024-06-17T19:17:32+05:30",
            "format": "date-time"
          },
          "createdAt": {
            "type": "string",
            "description": "RFC 3339 timestamp to indicate the creation date \u0026 time for the resource",
            "example": "2024-05-17T19:17:32+05:30",
            "format": "date-time"
          },
          "currency": { "type": "string", "example": "Nemo tenetur porro." },
          "expiryDate": {
            "type": "string",
            "description": "RFC 3339 timestamp to indicate the expiry date \u0026 time",
            "example": "2024-06-17T19:17:32+05:30",
            "format": "date-time"
          },
          "id": {
            "type": "string",
            "description": "Id of the resource, which is the same the id returned in the Create \u003cresource\u003e API response",
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "intentLink": {
            "type": "string",
            "description": "A UPI pay intent link built according to the spec enforced by NPCI",
            "example": "upi://pay?pa=test-auto-pgruosncak@okokaxis\u0026pn=merchant-4\u0026am=100.00\u0026tr=SU1240659756905923780\u0026tn=samplesingle0useqr\u0026cu=INR\u0026mc=1234"
          },
          "merchantId": {
            "type": "string",
            "description": "Id associated with the merchant on our platform",
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "merchantVpa": {
            "type": "string",
            "description": "UPI id of the merchant on which the payments are collected",
            "example": "fastestupi@pineaxis",
            "pattern": "^[a-z0-9.-]*@[a-zA-Z]*$"
          },
          "metadata": {
            "type": "string",
            "description": "field provided for the merchant to add additional key-value pairs",
            "example": { "InvoiceNumber": "INV-21-12-009" },
            "format": "binary"
          },
          "minAmount": {
            "type": "integer",
            "description": "Minimum amount (in paise) - on setting this value the amount field on the PSP's payment page becomes editable and the customer can pay an amount equal to or greater than the minimum amount",
            "example": 1000,
            "minimum": 100
          },
          "productConfigId": {
            "type": "string",
            "description": "id of the product config associated with the qr / payment link",
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "qrCode": {
            "type": "string",
            "description": "QR code for the generated intent link in the form of base64 encoded string",
            "example": ""
          },
          "reason": { "$ref": "#/components/schemas/Reason" },
          "refId": {
            "type": "string",
            "description": "Transaction reference id circulated by NPCI",
            "example": "1240689979139556558",
            "pattern": "^[a-zA-Z0-9]*$",
            "minLength": 1,
            "maxLength": 35
          },
          "referenceId": {
            "type": "string",
            "description": "reference id in the merchant's system",
            "example": "1240689979139556557",
            "pattern": "^[a-zA-Z0-9]*$",
            "minLength": 1,
            "maxLength": 50
          },
          "shortLink": {
            "type": "string",
            "description": "A shortened URL for the given intent link",
            "example": "upipay.setu.co/Np3KnBCM8Om0"
          },
          "status": {
            "type": "string",
            "description": "status defining the validity of the payment link",
            "example": "active",
            "enum": ["inactive", "active", "paid", "closed"]
          },
          "transactionNote": {
            "type": "string",
            "description": "Transaction note displayed to the customer at the payment page",
            "example": "Payment for loan repayment"
          }
        },
        "example": {
          "amount": 10000,
          "closedAt": "2024-06-17T19:17:32+05:30",
          "createdAt": "2024-05-17T19:17:32+05:30",
          "currency": "Quis et veritatis odio.",
          "expiryDate": "2024-06-17T19:17:32+05:30",
          "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
          "intentLink": "upi://pay?pa=test-auto-pgruosncak@okokaxis\u0026pn=merchant-4\u0026am=100.00\u0026tr=SU1240659756905923780\u0026tn=samplesingle0useqr\u0026cu=INR\u0026mc=1234",
          "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
          "merchantVpa": "fastestupi@pineaxis",
          "metadata": { "InvoiceNumber": "INV-21-12-009" },
          "minAmount": 1000,
          "productConfigId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
          "qrCode": "",
          "reason": {
            "code": "unable-to-fulfill-request",
            "desc": "unable-to-fulfill-request",
            "npciErrCategory": "TD",
            "npciErrCode": "YG",
            "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
            "npciRespCode": "YG",
            "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)",
            "setuDescription": "Merchant PSP error",
            "suggestedAction": "Merchant PSP error"
          },
          "refId": "1240689979139556558",
          "referenceId": "1240689979139556557",
          "shortLink": "upipay.setu.co/Np3KnBCM8Om0",
          "status": "active",
          "transactionNote": "Payment for loan repayment"
        }
      },
      "FetchTPVPlusResponse": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "integer",
            "description": "Amount (in paise) that needs to be collected from the user. If populated this value gets displayed on the payer PSP's payment page",
            "example": 10000,
            "minimum": 100
          },
          "bankCodes": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "Dolore qui iure laboriosam asperiores recusandae."
            },
            "description": "bank codes to be validated, first 4 characters of ifsc",
            "example": ["ICIC", "HDFC", "FDRL"],
            "maxItems": 10
          },
          "createdAt": {
            "type": "string",
            "description": "RFC 3339 timestamp to indicate the creation date \u0026 time for the resource",
            "example": "2024-05-17T19:17:32+05:30",
            "format": "date-time"
          },
          "expireAfter": {
            "type": "integer",
            "description": "Expire after (in minutes) for the transaction",
            "example": 10,
            "format": "int64"
          },
          "id": {
            "type": "string",
            "description": "Id of the resource, which is the same the id returned in the Create \u003cresource\u003e API response",
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "intentLink": {
            "type": "string",
            "description": "upi link for the payment link",
            "example": "upi://pay?pa=test-auto-pgruosncak@okokaxis\u0026pn=merchant-4\u0026am=100.00\u0026tr=SU1240659756905923780\u0026tn=samplesingleuseqr\u0026cu=INR\u0026mc=1234"
          },
          "merchantId": {
            "type": "string",
            "description": "Id associated with the merchant on our platform",
            "example": "1240689979139556556"
          },
          "merchantVpa": {
            "type": "string",
            "description": "UPI id of the merchant on which the payments are collected",
            "example": "fastestupi@pineaxis",
            "pattern": "^[a-z0-9.-]*@[a-zA-Z]*$"
          },
          "metadata": {
            "type": "string",
            "description": "field provided for the merchant to add additional key-value pairs",
            "example": { "InvoiceNumber": "INV-21-12-009" },
            "format": "binary"
          },
          "minAmount": {
            "type": "integer",
            "description": "Minimum amount (in paise) - on setting this value the amount field on the PSP's payment page becomes editable and the customer can pay an amount equal to or greater than the minimum amount",
            "example": 1000,
            "minimum": 100
          },
          "payerApps": {
            "type": "array",
            "items": { "type": "string", "example": "Id eligendi." },
            "description": "payer apps to be validated",
            "example": ["gpay", "phonepe", "paytm", "amazonpay"],
            "maxItems": 10
          },
          "payerVPAs": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "Quae neque autem illum in delectus commodi."
            },
            "description": "VPAs of the payer to be validated",
            "example": ["aadhitya@okhdfc", "ram@okaxis"],
            "maxItems": 10
          },
          "paymentDetails": { "$ref": "#/components/schemas/PaymentDetails" },
          "qrCode": {
            "type": "string",
            "description": "QR code for the payment link",
            "example": ""
          },
          "reason": { "$ref": "#/components/schemas/Reason" },
          "refId": {
            "type": "string",
            "description": "NPCI transaction refId",
            "example": "1240689979139556558",
            "pattern": "^[a-zA-Z0-9]*$",
            "minLength": 1,
            "maxLength": 35
          },
          "referenceId": {
            "type": "string",
            "description": "Reference id provided by the merchant",
            "example": "1240689979139556556"
          },
          "requestId": {
            "type": "string",
            "example": "cjqml1f2e5ocq2mesej0"
          },
          "shortLink": {
            "type": "string",
            "description": "short link for the payment link",
            "example": "upipay.setu.co/Np3KnBCM8Om0"
          },
          "status": {
            "type": "string",
            "description": "status defining the validity of the payment",
            "example": "active",
            "enum": ["paid", "closed", "active"]
          },
          "transactionNote": {
            "type": "string",
            "description": "transaction note for the transaction",
            "example": "test transaction"
          }
        },
        "example": {
          "amount": 10000,
          "bankCodes": ["ICIC", "HDFC", "FDRL"],
          "createdAt": "2024-05-17T19:17:32+05:30",
          "expireAfter": 10,
          "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
          "intentLink": "upi://pay?pa=test-auto-pgruosncak@okokaxis\u0026pn=merchant-4\u0026am=100.00\u0026tr=SU1240659756905923780\u0026tn=samplesingleuseqr\u0026cu=INR\u0026mc=1234",
          "merchantId": "1240689979139556556",
          "merchantVpa": "fastestupi@pineaxis",
          "metadata": { "InvoiceNumber": "INV-21-12-009" },
          "minAmount": 1000,
          "payerApps": ["gpay", "phonepe", "paytm", "amazonpay"],
          "payerVPAs": ["aadhitya@okhdfc", "ram@okaxis"],
          "paymentDetails": {
            "customerAccountType": "SAVINGS",
            "customerVpa": "test-auto-tyvmm59i9b@okokaxis",
            "paymentId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
            "paymentStatus": "initiated",
            "rrn": "124068997913",
            "txnId": "SETmBZkQOV0M7wyyP1V4PIFhRSzW5eSjmYI"
          },
          "qrCode": "",
          "reason": {
            "code": "unable-to-fulfill-request",
            "desc": "unable-to-fulfill-request",
            "npciErrCategory": "TD",
            "npciErrCode": "YG",
            "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
            "npciRespCode": "YG",
            "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)",
            "setuDescription": "Merchant PSP error",
            "suggestedAction": "Merchant PSP error"
          },
          "refId": "1240689979139556558",
          "referenceId": "1240689979139556556",
          "requestId": "cjqml1f2e5ocq2mesej0",
          "shortLink": "upipay.setu.co/Np3KnBCM8Om0",
          "status": "active",
          "transactionNote": "test transaction"
        }
      },
      "FetchTPVResponse": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "integer",
            "description": "Amount (in paise) that needs to be collected from the user. If populated this value gets displayed on the payer PSP's payment page",
            "example": 10000,
            "minimum": 100
          },
          "closedAt": {
            "type": "string",
            "example": "Consequatur unde animi officiis at."
          },
          "createdAt": {
            "type": "string",
            "description": "RFC 3339 timestamp to indicate the creation date \u0026 time for the resource",
            "example": "2024-05-17T19:17:32+05:30",
            "format": "date-time"
          },
          "expireAfter": {
            "type": "integer",
            "description": "Expire after (in minutes) for the transaction",
            "example": 10,
            "format": "int64"
          },
          "id": {
            "type": "string",
            "description": "id associated with the tpv",
            "example": "1240689979139556556"
          },
          "intentLink": {
            "type": "string",
            "description": "upi link for the payment link",
            "example": "upi://pay?pa=test-auto-pgruosncak@okokaxis\u0026pn=merchant-4\u0026am=100.00\u0026tr=SU1240659756905923780\u0026tn=sample%20single%20use%20qr\u0026cu=INR\u0026mc=1234"
          },
          "merchantId": {
            "type": "string",
            "description": "Id associated with the merchant on our platform",
            "example": "1240689979139556556"
          },
          "merchantVpa": {
            "type": "string",
            "description": "UPI id of the merchant on which the payments are collected",
            "example": "fastestupi@pineaxis",
            "pattern": "^[a-z0-9.-]*@[a-zA-Z]*$"
          },
          "metadata": {
            "type": "string",
            "description": "field provided for the merchant to add additional key-value pairs",
            "example": { "InvoiceNumber": "INV-21-12-009" },
            "format": "binary"
          },
          "minAmount": {
            "type": "integer",
            "description": "Minimum amount (in paise) - on setting this value the amount field on the PSP's payment page becomes editable and the customer can pay an amount equal to or greater than the minimum amount",
            "example": 1000,
            "minimum": 100
          },
          "paymentDetails": { "$ref": "#/components/schemas/PaymentDetails" },
          "primaryAccount": {
            "$ref": "#/components/schemas/TPVAccountDetailResponse"
          },
          "qrCode": {
            "type": "string",
            "description": "QR code for the payment link",
            "example": ""
          },
          "reason": { "$ref": "#/components/schemas/Reason" },
          "refId": {
            "type": "string",
            "description": "NPCI transaction refId",
            "example": "1240689979139556558",
            "pattern": "^[a-zA-Z0-9]*$",
            "minLength": 1,
            "maxLength": 35
          },
          "referenceId": {
            "type": "string",
            "description": "Reference id provided by the merchant",
            "example": "1240689979139556556"
          },
          "requestId": {
            "type": "string",
            "example": "cjqml1f2e5ocq2mesej0"
          },
          "secondaryAccounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TPVAccountDetailResponse"
            },
            "description": "secondary accounts for the tpv transaction",
            "example": [
              {
                "IFSC": "SBIN0000001",
                "encryptedAccountName": "5e884898da28047151d0e56f8dc629277",
                "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                "hashedAccountName": "5e884898da28047151d0e56f8dc629277",
                "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                "maskedAccountName": "R*M*E*S*",
                "maskedAccountNumber": "**** **** **** 7890"
              },
              {
                "IFSC": "SBIN0000001",
                "encryptedAccountName": "5e884898da28047151d0e56f8dc629277",
                "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                "hashedAccountName": "5e884898da28047151d0e56f8dc629277",
                "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                "maskedAccountName": "R*M*E*S*",
                "maskedAccountNumber": "**** **** **** 7890"
              },
              {
                "IFSC": "SBIN0000001",
                "encryptedAccountName": "5e884898da28047151d0e56f8dc629277",
                "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                "hashedAccountName": "5e884898da28047151d0e56f8dc629277",
                "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                "maskedAccountName": "R*M*E*S*",
                "maskedAccountNumber": "**** **** **** 7890"
              },
              {
                "IFSC": "SBIN0000001",
                "encryptedAccountName": "5e884898da28047151d0e56f8dc629277",
                "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                "hashedAccountName": "5e884898da28047151d0e56f8dc629277",
                "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                "maskedAccountName": "R*M*E*S*",
                "maskedAccountNumber": "**** **** **** 7890"
              }
            ]
          },
          "shortLink": {
            "type": "string",
            "description": "short link for the payment link",
            "example": "upipay.setu.co/Np3KnBCM8Om0"
          },
          "status": {
            "type": "string",
            "description": "status defining the validity of the payment",
            "example": "active",
            "enum": ["paid", "closed", "active"]
          },
          "transactionNote": {
            "type": "string",
            "description": "transaction note for the transaction",
            "example": "test transaction"
          }
        },
        "example": {
          "amount": 10000,
          "closedAt": "Magni similique dolores minima distinctio quasi laborum.",
          "createdAt": "2024-05-17T19:17:32+05:30",
          "expireAfter": 10,
          "id": "1240689979139556556",
          "intentLink": "upi://pay?pa=test-auto-pgruosncak@okokaxis\u0026pn=merchant-4\u0026am=100.00\u0026tr=SU1240659756905923780\u0026tn=sample%20single%20use%20qr\u0026cu=INR\u0026mc=1234",
          "merchantId": "1240689979139556556",
          "merchantVpa": "fastestupi@pineaxis",
          "metadata": { "InvoiceNumber": "INV-21-12-009" },
          "minAmount": 1000,
          "paymentDetails": {
            "customerAccountType": "SAVINGS",
            "customerVpa": "test-auto-tyvmm59i9b@okokaxis",
            "paymentId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
            "paymentStatus": "initiated",
            "rrn": "124068997913",
            "txnId": "SETmBZkQOV0M7wyyP1V4PIFhRSzW5eSjmYI"
          },
          "primaryAccount": {
            "IFSC": "SBIN0000001",
            "encryptedAccountName": "5e884898da28047151d0e56f8dc629277",
            "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
            "hashedAccountName": "5e884898da28047151d0e56f8dc629277",
            "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
            "maskedAccountName": "R*M*E*S*",
            "maskedAccountNumber": "**** **** **** 7890"
          },
          "qrCode": "",
          "reason": {
            "code": "unable-to-fulfill-request",
            "desc": "unable-to-fulfill-request",
            "npciErrCategory": "TD",
            "npciErrCode": "YG",
            "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
            "npciRespCode": "YG",
            "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)",
            "setuDescription": "Merchant PSP error",
            "suggestedAction": "Merchant PSP error"
          },
          "refId": "1240689979139556558",
          "referenceId": "1240689979139556556",
          "requestId": "cjqml1f2e5ocq2mesej0",
          "secondaryAccounts": [
            {
              "IFSC": "SBIN0000001",
              "encryptedAccountName": "5e884898da28047151d0e56f8dc629277",
              "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
              "hashedAccountName": "5e884898da28047151d0e56f8dc629277",
              "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
              "maskedAccountName": "R*M*E*S*",
              "maskedAccountNumber": "**** **** **** 7890"
            },
            {
              "IFSC": "SBIN0000001",
              "encryptedAccountName": "5e884898da28047151d0e56f8dc629277",
              "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
              "hashedAccountName": "5e884898da28047151d0e56f8dc629277",
              "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
              "maskedAccountName": "R*M*E*S*",
              "maskedAccountNumber": "**** **** **** 7890"
            }
          ],
          "shortLink": "upipay.setu.co/Np3KnBCM8Om0",
          "status": "active",
          "transactionNote": "test transaction"
        }
      },
      "ListDqrHistoryResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/ExpireDqrByIDResponse" },
            "example": [
              {
                "amount": 10000,
                "closedAt": "2024-06-17T19:17:32+05:30",
                "createdAt": "2024-05-17T19:17:32+05:30",
                "expiryDate": "2024-06-17T19:17:32+05:30",
                "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                "intentLink": "upi://pay?pa=test-auto-pgruosncak@okokaxis\u0026pn=merchant-4\u0026am=100.00\u0026tr=SU1240659756905923780\u0026tn=sample%20single%20use%20qr\u0026cu=INR\u0026mc=1234",
                "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                "merchantVpa": "fastestupi@pineaxis",
                "metadata": { "InvoiceNumber": "INV-21-12-009" },
                "minAmount": 1000,
                "qrCode": "",
                "reason": {
                  "code": "unable-to-fulfill-request",
                  "desc": "unable-to-fulfill-request",
                  "npciErrCategory": "TD",
                  "npciErrCode": "YG",
                  "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
                  "npciRespCode": "YG",
                  "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)",
                  "setuDescription": "Merchant PSP error",
                  "suggestedAction": "Merchant PSP error"
                },
                "refId": "1240689979139556558",
                "referenceId": "1240689979139556557",
                "shortLink": "upipay.setu.co/Np3KnBCM8Om0",
                "status": "active",
                "transactionNote": "testpay"
              },
              {
                "amount": 10000,
                "closedAt": "2024-06-17T19:17:32+05:30",
                "createdAt": "2024-05-17T19:17:32+05:30",
                "expiryDate": "2024-06-17T19:17:32+05:30",
                "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                "intentLink": "upi://pay?pa=test-auto-pgruosncak@okokaxis\u0026pn=merchant-4\u0026am=100.00\u0026tr=SU1240659756905923780\u0026tn=sample%20single%20use%20qr\u0026cu=INR\u0026mc=1234",
                "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                "merchantVpa": "fastestupi@pineaxis",
                "metadata": { "InvoiceNumber": "INV-21-12-009" },
                "minAmount": 1000,
                "qrCode": "",
                "reason": {
                  "code": "unable-to-fulfill-request",
                  "desc": "unable-to-fulfill-request",
                  "npciErrCategory": "TD",
                  "npciErrCode": "YG",
                  "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
                  "npciRespCode": "YG",
                  "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)",
                  "setuDescription": "Merchant PSP error",
                  "suggestedAction": "Merchant PSP error"
                },
                "refId": "1240689979139556558",
                "referenceId": "1240689979139556557",
                "shortLink": "upipay.setu.co/Np3KnBCM8Om0",
                "status": "active",
                "transactionNote": "testpay"
              },
              {
                "amount": 10000,
                "closedAt": "2024-06-17T19:17:32+05:30",
                "createdAt": "2024-05-17T19:17:32+05:30",
                "expiryDate": "2024-06-17T19:17:32+05:30",
                "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                "intentLink": "upi://pay?pa=test-auto-pgruosncak@okokaxis\u0026pn=merchant-4\u0026am=100.00\u0026tr=SU1240659756905923780\u0026tn=sample%20single%20use%20qr\u0026cu=INR\u0026mc=1234",
                "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                "merchantVpa": "fastestupi@pineaxis",
                "metadata": { "InvoiceNumber": "INV-21-12-009" },
                "minAmount": 1000,
                "qrCode": "",
                "reason": {
                  "code": "unable-to-fulfill-request",
                  "desc": "unable-to-fulfill-request",
                  "npciErrCategory": "TD",
                  "npciErrCode": "YG",
                  "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
                  "npciRespCode": "YG",
                  "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)",
                  "setuDescription": "Merchant PSP error",
                  "suggestedAction": "Merchant PSP error"
                },
                "refId": "1240689979139556558",
                "referenceId": "1240689979139556557",
                "shortLink": "upipay.setu.co/Np3KnBCM8Om0",
                "status": "active",
                "transactionNote": "testpay"
              }
            ]
          }
        },
        "example": {
          "data": [
            {
              "amount": 10000,
              "closedAt": "2024-06-17T19:17:32+05:30",
              "createdAt": "2024-05-17T19:17:32+05:30",
              "expiryDate": "2024-06-17T19:17:32+05:30",
              "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
              "intentLink": "upi://pay?pa=test-auto-pgruosncak@okokaxis\u0026pn=merchant-4\u0026am=100.00\u0026tr=SU1240659756905923780\u0026tn=sample%20single%20use%20qr\u0026cu=INR\u0026mc=1234",
              "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
              "merchantVpa": "fastestupi@pineaxis",
              "metadata": { "InvoiceNumber": "INV-21-12-009" },
              "minAmount": 1000,
              "qrCode": "",
              "reason": {
                "code": "unable-to-fulfill-request",
                "desc": "unable-to-fulfill-request",
                "npciErrCategory": "TD",
                "npciErrCode": "YG",
                "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
                "npciRespCode": "YG",
                "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)",
                "setuDescription": "Merchant PSP error",
                "suggestedAction": "Merchant PSP error"
              },
              "refId": "1240689979139556558",
              "referenceId": "1240689979139556557",
              "shortLink": "upipay.setu.co/Np3KnBCM8Om0",
              "status": "active",
              "transactionNote": "testpay"
            },
            {
              "amount": 10000,
              "closedAt": "2024-06-17T19:17:32+05:30",
              "createdAt": "2024-05-17T19:17:32+05:30",
              "expiryDate": "2024-06-17T19:17:32+05:30",
              "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
              "intentLink": "upi://pay?pa=test-auto-pgruosncak@okokaxis\u0026pn=merchant-4\u0026am=100.00\u0026tr=SU1240659756905923780\u0026tn=sample%20single%20use%20qr\u0026cu=INR\u0026mc=1234",
              "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
              "merchantVpa": "fastestupi@pineaxis",
              "metadata": { "InvoiceNumber": "INV-21-12-009" },
              "minAmount": 1000,
              "qrCode": "",
              "reason": {
                "code": "unable-to-fulfill-request",
                "desc": "unable-to-fulfill-request",
                "npciErrCategory": "TD",
                "npciErrCode": "YG",
                "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
                "npciRespCode": "YG",
                "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)",
                "setuDescription": "Merchant PSP error",
                "suggestedAction": "Merchant PSP error"
              },
              "refId": "1240689979139556558",
              "referenceId": "1240689979139556557",
              "shortLink": "upipay.setu.co/Np3KnBCM8Om0",
              "status": "active",
              "transactionNote": "testpay"
            },
            {
              "amount": 10000,
              "closedAt": "2024-06-17T19:17:32+05:30",
              "createdAt": "2024-05-17T19:17:32+05:30",
              "expiryDate": "2024-06-17T19:17:32+05:30",
              "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
              "intentLink": "upi://pay?pa=test-auto-pgruosncak@okokaxis\u0026pn=merchant-4\u0026am=100.00\u0026tr=SU1240659756905923780\u0026tn=sample%20single%20use%20qr\u0026cu=INR\u0026mc=1234",
              "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
              "merchantVpa": "fastestupi@pineaxis",
              "metadata": { "InvoiceNumber": "INV-21-12-009" },
              "minAmount": 1000,
              "qrCode": "",
              "reason": {
                "code": "unable-to-fulfill-request",
                "desc": "unable-to-fulfill-request",
                "npciErrCategory": "TD",
                "npciErrCode": "YG",
                "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
                "npciRespCode": "YG",
                "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)",
                "setuDescription": "Merchant PSP error",
                "suggestedAction": "Merchant PSP error"
              },
              "refId": "1240689979139556558",
              "referenceId": "1240689979139556557",
              "shortLink": "upipay.setu.co/Np3KnBCM8Om0",
              "status": "active",
              "transactionNote": "testpay"
            }
          ]
        }
      },
      "ListMandateOperationsResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FetchMandateOperationResponse"
            },
            "example": [
              {
                "amountLimit": 1000,
                "createdAt": "2024-05-17T19:17:32+05:30",
                "endDate": "02012006",
                "expireAfter": 2,
                "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                "intentLink": "upi://mandate?pa=deku040920232@okokaxis\u0026validitystart=31121995\u0026validityend=30122025\u0026am=901.00\u0026amrule=max\u0026recur=one%20time\u0026recurvalue=0\u0026recurtype=on\u0026cu=INR\u0026mc=1234\u0026mode=01\u0026purpose=14\u0026rev=N\u0026block=N\u0026txnType=update\u0026umn=SETUS7mxYHK1A6yXhxJsoKM7yxKqC2r0\u0026tid=SETM3Iij4WQrtEUbOUFkTpQp2EpR5wqy5Ou",
                "mandateId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                "mode": "qr",
                "qrCode": "",
                "reason": {
                  "code": "unable-to-fulfill-request",
                  "desc": "unable-to-fulfill-request",
                  "npciErrCategory": "TD",
                  "npciErrCode": "YG",
                  "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
                  "npciRespCode": "YG",
                  "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)",
                  "setuDescription": "Merchant PSP error",
                  "suggestedAction": "Merchant PSP error"
                },
                "referenceId": "ABC1234789",
                "status": "pending",
                "txnId": "BTTZrc5gDFkuCr3n3I0ey4aNtzLOLR7K7aR",
                "type": "Nobis voluptatem ab repudiandae tempora et omnis.",
                "umn": "c27f5fc30d344e9594fce0afa34f8859@mypsp"
              },
              {
                "amountLimit": 1000,
                "createdAt": "2024-05-17T19:17:32+05:30",
                "endDate": "02012006",
                "expireAfter": 2,
                "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                "intentLink": "upi://mandate?pa=deku040920232@okokaxis\u0026validitystart=31121995\u0026validityend=30122025\u0026am=901.00\u0026amrule=max\u0026recur=one%20time\u0026recurvalue=0\u0026recurtype=on\u0026cu=INR\u0026mc=1234\u0026mode=01\u0026purpose=14\u0026rev=N\u0026block=N\u0026txnType=update\u0026umn=SETUS7mxYHK1A6yXhxJsoKM7yxKqC2r0\u0026tid=SETM3Iij4WQrtEUbOUFkTpQp2EpR5wqy5Ou",
                "mandateId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                "mode": "qr",
                "qrCode": "",
                "reason": {
                  "code": "unable-to-fulfill-request",
                  "desc": "unable-to-fulfill-request",
                  "npciErrCategory": "TD",
                  "npciErrCode": "YG",
                  "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
                  "npciRespCode": "YG",
                  "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)",
                  "setuDescription": "Merchant PSP error",
                  "suggestedAction": "Merchant PSP error"
                },
                "referenceId": "ABC1234789",
                "status": "pending",
                "txnId": "BTTZrc5gDFkuCr3n3I0ey4aNtzLOLR7K7aR",
                "type": "Nobis voluptatem ab repudiandae tempora et omnis.",
                "umn": "c27f5fc30d344e9594fce0afa34f8859@mypsp"
              },
              {
                "amountLimit": 1000,
                "createdAt": "2024-05-17T19:17:32+05:30",
                "endDate": "02012006",
                "expireAfter": 2,
                "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                "intentLink": "upi://mandate?pa=deku040920232@okokaxis\u0026validitystart=31121995\u0026validityend=30122025\u0026am=901.00\u0026amrule=max\u0026recur=one%20time\u0026recurvalue=0\u0026recurtype=on\u0026cu=INR\u0026mc=1234\u0026mode=01\u0026purpose=14\u0026rev=N\u0026block=N\u0026txnType=update\u0026umn=SETUS7mxYHK1A6yXhxJsoKM7yxKqC2r0\u0026tid=SETM3Iij4WQrtEUbOUFkTpQp2EpR5wqy5Ou",
                "mandateId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                "mode": "qr",
                "qrCode": "",
                "reason": {
                  "code": "unable-to-fulfill-request",
                  "desc": "unable-to-fulfill-request",
                  "npciErrCategory": "TD",
                  "npciErrCode": "YG",
                  "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
                  "npciRespCode": "YG",
                  "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)",
                  "setuDescription": "Merchant PSP error",
                  "suggestedAction": "Merchant PSP error"
                },
                "referenceId": "ABC1234789",
                "status": "pending",
                "txnId": "BTTZrc5gDFkuCr3n3I0ey4aNtzLOLR7K7aR",
                "type": "Nobis voluptatem ab repudiandae tempora et omnis.",
                "umn": "c27f5fc30d344e9594fce0afa34f8859@mypsp"
              },
              {
                "amountLimit": 1000,
                "createdAt": "2024-05-17T19:17:32+05:30",
                "endDate": "02012006",
                "expireAfter": 2,
                "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                "intentLink": "upi://mandate?pa=deku040920232@okokaxis\u0026validitystart=31121995\u0026validityend=30122025\u0026am=901.00\u0026amrule=max\u0026recur=one%20time\u0026recurvalue=0\u0026recurtype=on\u0026cu=INR\u0026mc=1234\u0026mode=01\u0026purpose=14\u0026rev=N\u0026block=N\u0026txnType=update\u0026umn=SETUS7mxYHK1A6yXhxJsoKM7yxKqC2r0\u0026tid=SETM3Iij4WQrtEUbOUFkTpQp2EpR5wqy5Ou",
                "mandateId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                "mode": "qr",
                "qrCode": "",
                "reason": {
                  "code": "unable-to-fulfill-request",
                  "desc": "unable-to-fulfill-request",
                  "npciErrCategory": "TD",
                  "npciErrCode": "YG",
                  "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
                  "npciRespCode": "YG",
                  "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)",
                  "setuDescription": "Merchant PSP error",
                  "suggestedAction": "Merchant PSP error"
                },
                "referenceId": "ABC1234789",
                "status": "pending",
                "txnId": "BTTZrc5gDFkuCr3n3I0ey4aNtzLOLR7K7aR",
                "type": "Nobis voluptatem ab repudiandae tempora et omnis.",
                "umn": "c27f5fc30d344e9594fce0afa34f8859@mypsp"
              }
            ]
          }
        },
        "example": {
          "data": [
            {
              "amountLimit": 1000,
              "createdAt": "2024-05-17T19:17:32+05:30",
              "endDate": "02012006",
              "expireAfter": 2,
              "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
              "intentLink": "upi://mandate?pa=deku040920232@okokaxis\u0026validitystart=31121995\u0026validityend=30122025\u0026am=901.00\u0026amrule=max\u0026recur=one%20time\u0026recurvalue=0\u0026recurtype=on\u0026cu=INR\u0026mc=1234\u0026mode=01\u0026purpose=14\u0026rev=N\u0026block=N\u0026txnType=update\u0026umn=SETUS7mxYHK1A6yXhxJsoKM7yxKqC2r0\u0026tid=SETM3Iij4WQrtEUbOUFkTpQp2EpR5wqy5Ou",
              "mandateId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
              "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
              "mode": "qr",
              "qrCode": "",
              "reason": {
                "code": "unable-to-fulfill-request",
                "desc": "unable-to-fulfill-request",
                "npciErrCategory": "TD",
                "npciErrCode": "YG",
                "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
                "npciRespCode": "YG",
                "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)",
                "setuDescription": "Merchant PSP error",
                "suggestedAction": "Merchant PSP error"
              },
              "referenceId": "ABC1234789",
              "status": "pending",
              "txnId": "BTTZrc5gDFkuCr3n3I0ey4aNtzLOLR7K7aR",
              "type": "Nobis voluptatem ab repudiandae tempora et omnis.",
              "umn": "c27f5fc30d344e9594fce0afa34f8859@mypsp"
            },
            {
              "amountLimit": 1000,
              "createdAt": "2024-05-17T19:17:32+05:30",
              "endDate": "02012006",
              "expireAfter": 2,
              "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
              "intentLink": "upi://mandate?pa=deku040920232@okokaxis\u0026validitystart=31121995\u0026validityend=30122025\u0026am=901.00\u0026amrule=max\u0026recur=one%20time\u0026recurvalue=0\u0026recurtype=on\u0026cu=INR\u0026mc=1234\u0026mode=01\u0026purpose=14\u0026rev=N\u0026block=N\u0026txnType=update\u0026umn=SETUS7mxYHK1A6yXhxJsoKM7yxKqC2r0\u0026tid=SETM3Iij4WQrtEUbOUFkTpQp2EpR5wqy5Ou",
              "mandateId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
              "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
              "mode": "qr",
              "qrCode": "",
              "reason": {
                "code": "unable-to-fulfill-request",
                "desc": "unable-to-fulfill-request",
                "npciErrCategory": "TD",
                "npciErrCode": "YG",
                "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
                "npciRespCode": "YG",
                "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)",
                "setuDescription": "Merchant PSP error",
                "suggestedAction": "Merchant PSP error"
              },
              "referenceId": "ABC1234789",
              "status": "pending",
              "txnId": "BTTZrc5gDFkuCr3n3I0ey4aNtzLOLR7K7aR",
              "type": "Nobis voluptatem ab repudiandae tempora et omnis.",
              "umn": "c27f5fc30d344e9594fce0afa34f8859@mypsp"
            },
            {
              "amountLimit": 1000,
              "createdAt": "2024-05-17T19:17:32+05:30",
              "endDate": "02012006",
              "expireAfter": 2,
              "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
              "intentLink": "upi://mandate?pa=deku040920232@okokaxis\u0026validitystart=31121995\u0026validityend=30122025\u0026am=901.00\u0026amrule=max\u0026recur=one%20time\u0026recurvalue=0\u0026recurtype=on\u0026cu=INR\u0026mc=1234\u0026mode=01\u0026purpose=14\u0026rev=N\u0026block=N\u0026txnType=update\u0026umn=SETUS7mxYHK1A6yXhxJsoKM7yxKqC2r0\u0026tid=SETM3Iij4WQrtEUbOUFkTpQp2EpR5wqy5Ou",
              "mandateId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
              "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
              "mode": "qr",
              "qrCode": "",
              "reason": {
                "code": "unable-to-fulfill-request",
                "desc": "unable-to-fulfill-request",
                "npciErrCategory": "TD",
                "npciErrCode": "YG",
                "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
                "npciRespCode": "YG",
                "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)",
                "setuDescription": "Merchant PSP error",
                "suggestedAction": "Merchant PSP error"
              },
              "referenceId": "ABC1234789",
              "status": "pending",
              "txnId": "BTTZrc5gDFkuCr3n3I0ey4aNtzLOLR7K7aR",
              "type": "Nobis voluptatem ab repudiandae tempora et omnis.",
              "umn": "c27f5fc30d344e9594fce0afa34f8859@mypsp"
            }
          ]
        }
      },
      "ListMandateResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/FetchMandateResponse" },
            "example": [
              {
                "allowMultipleDebit": true,
                "amount": 1000,
                "amountRule": "max",
                "autoExecute": true,
                "autoPreNotify": true,
                "autoRefundFirstExecutionAmount": false,
                "blockFunds": true,
                "createdAt": "2024-05-17T19:17:32+05:30",
                "creationMode": "qr",
                "currency": "INR",
                "customerRevocable": true,
                "customerVpa": "ram@axis",
                "endDate": "02012008",
                "expireAfter": 2,
                "firstExecutionAmount": 1000,
                "frequency": "monthly",
                "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                "initiationMode": "01",
                "intentLink": "upi://mandate?pa=deku040920232@okokaxis\u0026pn=merchant-1\u0026validitystart=31121995\u0026validityend=31121996\u0026am=100.00\u0026amrule=MAX\u0026recur=one%20time\u0026recurvalue=0\u0026recurtype=on\u0026tr=SETgv8wOOCElAtpzfbAEXqcKvN8QPfunAhI\u0026cu=INR\u0026mc=1234\u0026mode=04\u0026purpose=14\u0026rev=N\u0026share=Y\u0026qrexpire=04092023\u0026block=N\u0026orgid=000000\u0026version=2.0\u0026txnType=create\u0026tid=SETgv8wOOCElAtpzfbAEXqcKvN8QPfunAhI",
                "maxAmountLimit": 1000,
                "merchantId": "Sit explicabo.",
                "merchantVpa": "fastestupi@pineaxis",
                "primaryAccount": {
                  "IFSC": "SBIN0000001",
                  "encryptedAccountName": "5e884898da28047151d0e56f8dc629277",
                  "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                  "hashedAccountName": "5e884898da28047151d0e56f8dc629277",
                  "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                  "maskedAccountName": "R*M*E*S*",
                  "maskedAccountNumber": "**** **** **** 7890"
                },
                "productConfigId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                "purpose": "14",
                "qrCode": "",
                "reason": {
                  "code": "unable-to-fulfill-request",
                  "desc": "unable-to-fulfill-request",
                  "npciErrCategory": "TD",
                  "npciErrCode": "YG",
                  "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
                  "npciRespCode": "YG",
                  "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)",
                  "setuDescription": "Merchant PSP error",
                  "suggestedAction": "Merchant PSP error"
                },
                "recurrenceRule": "on",
                "recurrenceValue": 1,
                "referenceId": "ABC1234789",
                "secondaryAccounts": [
                  {
                    "IFSC": "SBIN0000001",
                    "encryptedAccountName": "5e884898da28047151d0e56f8dc629277",
                    "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                    "hashedAccountName": "5e884898da28047151d0e56f8dc629277",
                    "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                    "maskedAccountName": "R*M*E*S*",
                    "maskedAccountNumber": "**** **** **** 7890"
                  },
                  {
                    "IFSC": "SBIN0000001",
                    "encryptedAccountName": "5e884898da28047151d0e56f8dc629277",
                    "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                    "hashedAccountName": "5e884898da28047151d0e56f8dc629277",
                    "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                    "maskedAccountName": "R*M*E*S*",
                    "maskedAccountNumber": "**** **** **** 7890"
                  }
                ],
                "shareToPayee": false,
                "startDate": "02012006",
                "status": "pending",
                "transactionNote": "Transaction note",
                "txnId": "BTTZrc5gDFkuCr3n3I0ey4aNtzLOLR7K7aR",
                "umn": "c27f5fc30d344e9594fce0afa34f8859@mypsp"
              },
              {
                "allowMultipleDebit": true,
                "amount": 1000,
                "amountRule": "max",
                "autoExecute": true,
                "autoPreNotify": true,
                "autoRefundFirstExecutionAmount": false,
                "blockFunds": true,
                "createdAt": "2024-05-17T19:17:32+05:30",
                "creationMode": "qr",
                "currency": "INR",
                "customerRevocable": true,
                "customerVpa": "ram@axis",
                "endDate": "02012008",
                "expireAfter": 2,
                "firstExecutionAmount": 1000,
                "frequency": "monthly",
                "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                "initiationMode": "01",
                "intentLink": "upi://mandate?pa=deku040920232@okokaxis\u0026pn=merchant-1\u0026validitystart=31121995\u0026validityend=31121996\u0026am=100.00\u0026amrule=MAX\u0026recur=one%20time\u0026recurvalue=0\u0026recurtype=on\u0026tr=SETgv8wOOCElAtpzfbAEXqcKvN8QPfunAhI\u0026cu=INR\u0026mc=1234\u0026mode=04\u0026purpose=14\u0026rev=N\u0026share=Y\u0026qrexpire=04092023\u0026block=N\u0026orgid=000000\u0026version=2.0\u0026txnType=create\u0026tid=SETgv8wOOCElAtpzfbAEXqcKvN8QPfunAhI",
                "maxAmountLimit": 1000,
                "merchantId": "Sit explicabo.",
                "merchantVpa": "fastestupi@pineaxis",
                "primaryAccount": {
                  "IFSC": "SBIN0000001",
                  "encryptedAccountName": "5e884898da28047151d0e56f8dc629277",
                  "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                  "hashedAccountName": "5e884898da28047151d0e56f8dc629277",
                  "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                  "maskedAccountName": "R*M*E*S*",
                  "maskedAccountNumber": "**** **** **** 7890"
                },
                "productConfigId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                "purpose": "14",
                "qrCode": "",
                "reason": {
                  "code": "unable-to-fulfill-request",
                  "desc": "unable-to-fulfill-request",
                  "npciErrCategory": "TD",
                  "npciErrCode": "YG",
                  "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
                  "npciRespCode": "YG",
                  "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)",
                  "setuDescription": "Merchant PSP error",
                  "suggestedAction": "Merchant PSP error"
                },
                "recurrenceRule": "on",
                "recurrenceValue": 1,
                "referenceId": "ABC1234789",
                "secondaryAccounts": [
                  {
                    "IFSC": "SBIN0000001",
                    "encryptedAccountName": "5e884898da28047151d0e56f8dc629277",
                    "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                    "hashedAccountName": "5e884898da28047151d0e56f8dc629277",
                    "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                    "maskedAccountName": "R*M*E*S*",
                    "maskedAccountNumber": "**** **** **** 7890"
                  },
                  {
                    "IFSC": "SBIN0000001",
                    "encryptedAccountName": "5e884898da28047151d0e56f8dc629277",
                    "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                    "hashedAccountName": "5e884898da28047151d0e56f8dc629277",
                    "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                    "maskedAccountName": "R*M*E*S*",
                    "maskedAccountNumber": "**** **** **** 7890"
                  }
                ],
                "shareToPayee": false,
                "startDate": "02012006",
                "status": "pending",
                "transactionNote": "Transaction note",
                "txnId": "BTTZrc5gDFkuCr3n3I0ey4aNtzLOLR7K7aR",
                "umn": "c27f5fc30d344e9594fce0afa34f8859@mypsp"
              }
            ]
          }
        },
        "example": {
          "data": [
            {
              "allowMultipleDebit": true,
              "amount": 1000,
              "amountRule": "max",
              "autoExecute": true,
              "autoPreNotify": true,
              "autoRefundFirstExecutionAmount": false,
              "blockFunds": true,
              "createdAt": "2024-05-17T19:17:32+05:30",
              "creationMode": "qr",
              "currency": "INR",
              "customerRevocable": true,
              "customerVpa": "ram@axis",
              "endDate": "02012008",
              "expireAfter": 2,
              "firstExecutionAmount": 1000,
              "frequency": "monthly",
              "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
              "initiationMode": "01",
              "intentLink": "upi://mandate?pa=deku040920232@okokaxis\u0026pn=merchant-1\u0026validitystart=31121995\u0026validityend=31121996\u0026am=100.00\u0026amrule=MAX\u0026recur=one%20time\u0026recurvalue=0\u0026recurtype=on\u0026tr=SETgv8wOOCElAtpzfbAEXqcKvN8QPfunAhI\u0026cu=INR\u0026mc=1234\u0026mode=04\u0026purpose=14\u0026rev=N\u0026share=Y\u0026qrexpire=04092023\u0026block=N\u0026orgid=000000\u0026version=2.0\u0026txnType=create\u0026tid=SETgv8wOOCElAtpzfbAEXqcKvN8QPfunAhI",
              "maxAmountLimit": 1000,
              "merchantId": "Sit explicabo.",
              "merchantVpa": "fastestupi@pineaxis",
              "primaryAccount": {
                "IFSC": "SBIN0000001",
                "encryptedAccountName": "5e884898da28047151d0e56f8dc629277",
                "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                "hashedAccountName": "5e884898da28047151d0e56f8dc629277",
                "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                "maskedAccountName": "R*M*E*S*",
                "maskedAccountNumber": "**** **** **** 7890"
              },
              "productConfigId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
              "purpose": "14",
              "qrCode": "",
              "reason": {
                "code": "unable-to-fulfill-request",
                "desc": "unable-to-fulfill-request",
                "npciErrCategory": "TD",
                "npciErrCode": "YG",
                "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
                "npciRespCode": "YG",
                "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)",
                "setuDescription": "Merchant PSP error",
                "suggestedAction": "Merchant PSP error"
              },
              "recurrenceRule": "on",
              "recurrenceValue": 1,
              "referenceId": "ABC1234789",
              "secondaryAccounts": [
                {
                  "IFSC": "SBIN0000001",
                  "encryptedAccountName": "5e884898da28047151d0e56f8dc629277",
                  "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                  "hashedAccountName": "5e884898da28047151d0e56f8dc629277",
                  "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                  "maskedAccountName": "R*M*E*S*",
                  "maskedAccountNumber": "**** **** **** 7890"
                },
                {
                  "IFSC": "SBIN0000001",
                  "encryptedAccountName": "5e884898da28047151d0e56f8dc629277",
                  "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                  "hashedAccountName": "5e884898da28047151d0e56f8dc629277",
                  "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                  "maskedAccountName": "R*M*E*S*",
                  "maskedAccountNumber": "**** **** **** 7890"
                }
              ],
              "shareToPayee": false,
              "startDate": "02012006",
              "status": "pending",
              "transactionNote": "Transaction note",
              "txnId": "BTTZrc5gDFkuCr3n3I0ey4aNtzLOLR7K7aR",
              "umn": "c27f5fc30d344e9594fce0afa34f8859@mypsp"
            },
            {
              "allowMultipleDebit": true,
              "amount": 1000,
              "amountRule": "max",
              "autoExecute": true,
              "autoPreNotify": true,
              "autoRefundFirstExecutionAmount": false,
              "blockFunds": true,
              "createdAt": "2024-05-17T19:17:32+05:30",
              "creationMode": "qr",
              "currency": "INR",
              "customerRevocable": true,
              "customerVpa": "ram@axis",
              "endDate": "02012008",
              "expireAfter": 2,
              "firstExecutionAmount": 1000,
              "frequency": "monthly",
              "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
              "initiationMode": "01",
              "intentLink": "upi://mandate?pa=deku040920232@okokaxis\u0026pn=merchant-1\u0026validitystart=31121995\u0026validityend=31121996\u0026am=100.00\u0026amrule=MAX\u0026recur=one%20time\u0026recurvalue=0\u0026recurtype=on\u0026tr=SETgv8wOOCElAtpzfbAEXqcKvN8QPfunAhI\u0026cu=INR\u0026mc=1234\u0026mode=04\u0026purpose=14\u0026rev=N\u0026share=Y\u0026qrexpire=04092023\u0026block=N\u0026orgid=000000\u0026version=2.0\u0026txnType=create\u0026tid=SETgv8wOOCElAtpzfbAEXqcKvN8QPfunAhI",
              "maxAmountLimit": 1000,
              "merchantId": "Sit explicabo.",
              "merchantVpa": "fastestupi@pineaxis",
              "primaryAccount": {
                "IFSC": "SBIN0000001",
                "encryptedAccountName": "5e884898da28047151d0e56f8dc629277",
                "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                "hashedAccountName": "5e884898da28047151d0e56f8dc629277",
                "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                "maskedAccountName": "R*M*E*S*",
                "maskedAccountNumber": "**** **** **** 7890"
              },
              "productConfigId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
              "purpose": "14",
              "qrCode": "",
              "reason": {
                "code": "unable-to-fulfill-request",
                "desc": "unable-to-fulfill-request",
                "npciErrCategory": "TD",
                "npciErrCode": "YG",
                "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
                "npciRespCode": "YG",
                "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)",
                "setuDescription": "Merchant PSP error",
                "suggestedAction": "Merchant PSP error"
              },
              "recurrenceRule": "on",
              "recurrenceValue": 1,
              "referenceId": "ABC1234789",
              "secondaryAccounts": [
                {
                  "IFSC": "SBIN0000001",
                  "encryptedAccountName": "5e884898da28047151d0e56f8dc629277",
                  "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                  "hashedAccountName": "5e884898da28047151d0e56f8dc629277",
                  "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                  "maskedAccountName": "R*M*E*S*",
                  "maskedAccountNumber": "**** **** **** 7890"
                },
                {
                  "IFSC": "SBIN0000001",
                  "encryptedAccountName": "5e884898da28047151d0e56f8dc629277",
                  "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                  "hashedAccountName": "5e884898da28047151d0e56f8dc629277",
                  "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                  "maskedAccountName": "R*M*E*S*",
                  "maskedAccountNumber": "**** **** **** 7890"
                }
              ],
              "shareToPayee": false,
              "startDate": "02012006",
              "status": "pending",
              "transactionNote": "Transaction note",
              "txnId": "BTTZrc5gDFkuCr3n3I0ey4aNtzLOLR7K7aR",
              "umn": "c27f5fc30d344e9594fce0afa34f8859@mypsp"
            },
            {
              "allowMultipleDebit": true,
              "amount": 1000,
              "amountRule": "max",
              "autoExecute": true,
              "autoPreNotify": true,
              "autoRefundFirstExecutionAmount": false,
              "blockFunds": true,
              "createdAt": "2024-05-17T19:17:32+05:30",
              "creationMode": "qr",
              "currency": "INR",
              "customerRevocable": true,
              "customerVpa": "ram@axis",
              "endDate": "02012008",
              "expireAfter": 2,
              "firstExecutionAmount": 1000,
              "frequency": "monthly",
              "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
              "initiationMode": "01",
              "intentLink": "upi://mandate?pa=deku040920232@okokaxis\u0026pn=merchant-1\u0026validitystart=31121995\u0026validityend=31121996\u0026am=100.00\u0026amrule=MAX\u0026recur=one%20time\u0026recurvalue=0\u0026recurtype=on\u0026tr=SETgv8wOOCElAtpzfbAEXqcKvN8QPfunAhI\u0026cu=INR\u0026mc=1234\u0026mode=04\u0026purpose=14\u0026rev=N\u0026share=Y\u0026qrexpire=04092023\u0026block=N\u0026orgid=000000\u0026version=2.0\u0026txnType=create\u0026tid=SETgv8wOOCElAtpzfbAEXqcKvN8QPfunAhI",
              "maxAmountLimit": 1000,
              "merchantId": "Sit explicabo.",
              "merchantVpa": "fastestupi@pineaxis",
              "primaryAccount": {
                "IFSC": "SBIN0000001",
                "encryptedAccountName": "5e884898da28047151d0e56f8dc629277",
                "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                "hashedAccountName": "5e884898da28047151d0e56f8dc629277",
                "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                "maskedAccountName": "R*M*E*S*",
                "maskedAccountNumber": "**** **** **** 7890"
              },
              "productConfigId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
              "purpose": "14",
              "qrCode": "",
              "reason": {
                "code": "unable-to-fulfill-request",
                "desc": "unable-to-fulfill-request",
                "npciErrCategory": "TD",
                "npciErrCode": "YG",
                "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
                "npciRespCode": "YG",
                "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)",
                "setuDescription": "Merchant PSP error",
                "suggestedAction": "Merchant PSP error"
              },
              "recurrenceRule": "on",
              "recurrenceValue": 1,
              "referenceId": "ABC1234789",
              "secondaryAccounts": [
                {
                  "IFSC": "SBIN0000001",
                  "encryptedAccountName": "5e884898da28047151d0e56f8dc629277",
                  "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                  "hashedAccountName": "5e884898da28047151d0e56f8dc629277",
                  "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                  "maskedAccountName": "R*M*E*S*",
                  "maskedAccountNumber": "**** **** **** 7890"
                },
                {
                  "IFSC": "SBIN0000001",
                  "encryptedAccountName": "5e884898da28047151d0e56f8dc629277",
                  "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                  "hashedAccountName": "5e884898da28047151d0e56f8dc629277",
                  "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                  "maskedAccountName": "R*M*E*S*",
                  "maskedAccountNumber": "**** **** **** 7890"
                }
              ],
              "shareToPayee": false,
              "startDate": "02012006",
              "status": "pending",
              "transactionNote": "Transaction note",
              "txnId": "BTTZrc5gDFkuCr3n3I0ey4aNtzLOLR7K7aR",
              "umn": "c27f5fc30d344e9594fce0afa34f8859@mypsp"
            }
          ]
        }
      },
      "ListSqrHistoryResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/FetchSqrByIDResponse" },
            "example": [
              {
                "amount": 10000,
                "closedAt": "2024-06-17T19:17:32+05:30",
                "createdAt": "2024-05-17T19:17:32+05:30",
                "currency": "Et voluptatem quas.",
                "expiryDate": "2024-06-17T19:17:32+05:30",
                "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                "intentLink": "upi://pay?pa=test-auto-pgruosncak@okokaxis\u0026pn=merchant-4\u0026am=100.00\u0026tr=SU1240659756905923780\u0026tn=samplesingle0useqr\u0026cu=INR\u0026mc=1234",
                "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                "merchantVpa": "fastestupi@pineaxis",
                "metadata": { "InvoiceNumber": "INV-21-12-009" },
                "minAmount": 1000,
                "productConfigId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                "qrCode": "",
                "reason": {
                  "code": "unable-to-fulfill-request",
                  "desc": "unable-to-fulfill-request",
                  "npciErrCategory": "TD",
                  "npciErrCode": "YG",
                  "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
                  "npciRespCode": "YG",
                  "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)",
                  "setuDescription": "Merchant PSP error",
                  "suggestedAction": "Merchant PSP error"
                },
                "refId": "1240689979139556558",
                "referenceId": "1240689979139556557",
                "shortLink": "upipay.setu.co/Np3KnBCM8Om0",
                "status": "active",
                "transactionNote": "Payment for loan repayment"
              },
              {
                "amount": 10000,
                "closedAt": "2024-06-17T19:17:32+05:30",
                "createdAt": "2024-05-17T19:17:32+05:30",
                "currency": "Et voluptatem quas.",
                "expiryDate": "2024-06-17T19:17:32+05:30",
                "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                "intentLink": "upi://pay?pa=test-auto-pgruosncak@okokaxis\u0026pn=merchant-4\u0026am=100.00\u0026tr=SU1240659756905923780\u0026tn=samplesingle0useqr\u0026cu=INR\u0026mc=1234",
                "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                "merchantVpa": "fastestupi@pineaxis",
                "metadata": { "InvoiceNumber": "INV-21-12-009" },
                "minAmount": 1000,
                "productConfigId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                "qrCode": "",
                "reason": {
                  "code": "unable-to-fulfill-request",
                  "desc": "unable-to-fulfill-request",
                  "npciErrCategory": "TD",
                  "npciErrCode": "YG",
                  "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
                  "npciRespCode": "YG",
                  "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)",
                  "setuDescription": "Merchant PSP error",
                  "suggestedAction": "Merchant PSP error"
                },
                "refId": "1240689979139556558",
                "referenceId": "1240689979139556557",
                "shortLink": "upipay.setu.co/Np3KnBCM8Om0",
                "status": "active",
                "transactionNote": "Payment for loan repayment"
              },
              {
                "amount": 10000,
                "closedAt": "2024-06-17T19:17:32+05:30",
                "createdAt": "2024-05-17T19:17:32+05:30",
                "currency": "Et voluptatem quas.",
                "expiryDate": "2024-06-17T19:17:32+05:30",
                "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                "intentLink": "upi://pay?pa=test-auto-pgruosncak@okokaxis\u0026pn=merchant-4\u0026am=100.00\u0026tr=SU1240659756905923780\u0026tn=samplesingle0useqr\u0026cu=INR\u0026mc=1234",
                "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                "merchantVpa": "fastestupi@pineaxis",
                "metadata": { "InvoiceNumber": "INV-21-12-009" },
                "minAmount": 1000,
                "productConfigId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                "qrCode": "",
                "reason": {
                  "code": "unable-to-fulfill-request",
                  "desc": "unable-to-fulfill-request",
                  "npciErrCategory": "TD",
                  "npciErrCode": "YG",
                  "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
                  "npciRespCode": "YG",
                  "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)",
                  "setuDescription": "Merchant PSP error",
                  "suggestedAction": "Merchant PSP error"
                },
                "refId": "1240689979139556558",
                "referenceId": "1240689979139556557",
                "shortLink": "upipay.setu.co/Np3KnBCM8Om0",
                "status": "active",
                "transactionNote": "Payment for loan repayment"
              },
              {
                "amount": 10000,
                "closedAt": "2024-06-17T19:17:32+05:30",
                "createdAt": "2024-05-17T19:17:32+05:30",
                "currency": "Et voluptatem quas.",
                "expiryDate": "2024-06-17T19:17:32+05:30",
                "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                "intentLink": "upi://pay?pa=test-auto-pgruosncak@okokaxis\u0026pn=merchant-4\u0026am=100.00\u0026tr=SU1240659756905923780\u0026tn=samplesingle0useqr\u0026cu=INR\u0026mc=1234",
                "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                "merchantVpa": "fastestupi@pineaxis",
                "metadata": { "InvoiceNumber": "INV-21-12-009" },
                "minAmount": 1000,
                "productConfigId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                "qrCode": "",
                "reason": {
                  "code": "unable-to-fulfill-request",
                  "desc": "unable-to-fulfill-request",
                  "npciErrCategory": "TD",
                  "npciErrCode": "YG",
                  "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
                  "npciRespCode": "YG",
                  "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)",
                  "setuDescription": "Merchant PSP error",
                  "suggestedAction": "Merchant PSP error"
                },
                "refId": "1240689979139556558",
                "referenceId": "1240689979139556557",
                "shortLink": "upipay.setu.co/Np3KnBCM8Om0",
                "status": "active",
                "transactionNote": "Payment for loan repayment"
              }
            ]
          },
          "requestId": { "type": "string", "example": "cjqml1f2e5ocq2mesej0" }
        },
        "example": {
          "data": [
            {
              "amount": 10000,
              "closedAt": "2024-06-17T19:17:32+05:30",
              "createdAt": "2024-05-17T19:17:32+05:30",
              "currency": "Et voluptatem quas.",
              "expiryDate": "2024-06-17T19:17:32+05:30",
              "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
              "intentLink": "upi://pay?pa=test-auto-pgruosncak@okokaxis\u0026pn=merchant-4\u0026am=100.00\u0026tr=SU1240659756905923780\u0026tn=samplesingle0useqr\u0026cu=INR\u0026mc=1234",
              "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
              "merchantVpa": "fastestupi@pineaxis",
              "metadata": { "InvoiceNumber": "INV-21-12-009" },
              "minAmount": 1000,
              "productConfigId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
              "qrCode": "",
              "reason": {
                "code": "unable-to-fulfill-request",
                "desc": "unable-to-fulfill-request",
                "npciErrCategory": "TD",
                "npciErrCode": "YG",
                "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
                "npciRespCode": "YG",
                "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)",
                "setuDescription": "Merchant PSP error",
                "suggestedAction": "Merchant PSP error"
              },
              "refId": "1240689979139556558",
              "referenceId": "1240689979139556557",
              "shortLink": "upipay.setu.co/Np3KnBCM8Om0",
              "status": "active",
              "transactionNote": "Payment for loan repayment"
            },
            {
              "amount": 10000,
              "closedAt": "2024-06-17T19:17:32+05:30",
              "createdAt": "2024-05-17T19:17:32+05:30",
              "currency": "Et voluptatem quas.",
              "expiryDate": "2024-06-17T19:17:32+05:30",
              "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
              "intentLink": "upi://pay?pa=test-auto-pgruosncak@okokaxis\u0026pn=merchant-4\u0026am=100.00\u0026tr=SU1240659756905923780\u0026tn=samplesingle0useqr\u0026cu=INR\u0026mc=1234",
              "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
              "merchantVpa": "fastestupi@pineaxis",
              "metadata": { "InvoiceNumber": "INV-21-12-009" },
              "minAmount": 1000,
              "productConfigId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
              "qrCode": "",
              "reason": {
                "code": "unable-to-fulfill-request",
                "desc": "unable-to-fulfill-request",
                "npciErrCategory": "TD",
                "npciErrCode": "YG",
                "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
                "npciRespCode": "YG",
                "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)",
                "setuDescription": "Merchant PSP error",
                "suggestedAction": "Merchant PSP error"
              },
              "refId": "1240689979139556558",
              "referenceId": "1240689979139556557",
              "shortLink": "upipay.setu.co/Np3KnBCM8Om0",
              "status": "active",
              "transactionNote": "Payment for loan repayment"
            },
            {
              "amount": 10000,
              "closedAt": "2024-06-17T19:17:32+05:30",
              "createdAt": "2024-05-17T19:17:32+05:30",
              "currency": "Et voluptatem quas.",
              "expiryDate": "2024-06-17T19:17:32+05:30",
              "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
              "intentLink": "upi://pay?pa=test-auto-pgruosncak@okokaxis\u0026pn=merchant-4\u0026am=100.00\u0026tr=SU1240659756905923780\u0026tn=samplesingle0useqr\u0026cu=INR\u0026mc=1234",
              "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
              "merchantVpa": "fastestupi@pineaxis",
              "metadata": { "InvoiceNumber": "INV-21-12-009" },
              "minAmount": 1000,
              "productConfigId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
              "qrCode": "",
              "reason": {
                "code": "unable-to-fulfill-request",
                "desc": "unable-to-fulfill-request",
                "npciErrCategory": "TD",
                "npciErrCode": "YG",
                "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
                "npciRespCode": "YG",
                "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)",
                "setuDescription": "Merchant PSP error",
                "suggestedAction": "Merchant PSP error"
              },
              "refId": "1240689979139556558",
              "referenceId": "1240689979139556557",
              "shortLink": "upipay.setu.co/Np3KnBCM8Om0",
              "status": "active",
              "transactionNote": "Payment for loan repayment"
            }
          ],
          "requestId": "cjqml1f2e5ocq2mesej0"
        }
      },
      "ListTpvHistoryItem": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "integer",
            "description": "Amount (in paise) that needs to be collected from the user. If populated this value gets displayed on the payer PSP's payment page",
            "example": 10000,
            "minimum": 100
          },
          "closedAt": {
            "type": "string",
            "example": "Provident cupiditate aut id quam suscipit quia."
          },
          "createdAt": {
            "type": "string",
            "description": "RFC 3339 timestamp to indicate the creation date \u0026 time for the resource",
            "example": "2024-05-17T19:17:32+05:30",
            "format": "date-time"
          },
          "expireAfter": {
            "type": "integer",
            "description": "Expire after (in minutes) for the transaction",
            "example": 10,
            "format": "int64"
          },
          "id": {
            "type": "string",
            "description": "id associated with the tpv",
            "example": "1240689979139556556"
          },
          "intentLink": {
            "type": "string",
            "description": "upi link for the payment link",
            "example": "upi://pay?pa=test-auto-pgruosncak@okokaxis\u0026pn=merchant-4\u0026am=100.00\u0026tr=SU1240659756905923780\u0026tn=sample%20single%20use%20qr\u0026cu=INR\u0026mc=1234"
          },
          "merchantId": {
            "type": "string",
            "description": "Id associated with the merchant on our platform",
            "example": "1240689979139556556"
          },
          "merchantVpa": {
            "type": "string",
            "description": "UPI id of the merchant on which the payments are collected",
            "example": "fastestupi@pineaxis",
            "pattern": "^[a-z0-9.-]*@[a-zA-Z]*$"
          },
          "metadata": {
            "type": "string",
            "description": "field provided for the merchant to add additional key-value pairs",
            "example": { "InvoiceNumber": "INV-21-12-009" },
            "format": "binary"
          },
          "minAmount": {
            "type": "integer",
            "description": "Minimum amount (in paise) - on setting this value the amount field on the PSP's payment page becomes editable and the customer can pay an amount equal to or greater than the minimum amount",
            "example": 1000,
            "minimum": 100
          },
          "primaryAccount": {
            "$ref": "#/components/schemas/TPVAccountDetailResponse"
          },
          "qrCode": {
            "type": "string",
            "description": "QR code for the payment link",
            "example": ""
          },
          "reason": { "$ref": "#/components/schemas/Reason" },
          "refId": {
            "type": "string",
            "description": "NPCI transaction refId",
            "example": "1240689979139556558",
            "pattern": "^[a-zA-Z0-9]*$",
            "minLength": 1,
            "maxLength": 35
          },
          "referenceId": {
            "type": "string",
            "description": "Reference id provided by the merchant",
            "example": "1240689979139556556"
          },
          "secondaryAccounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TPVAccountDetailResponse"
            },
            "description": "secondary accounts for the tpv transaction",
            "example": [
              {
                "IFSC": "SBIN0000001",
                "encryptedAccountName": "5e884898da28047151d0e56f8dc629277",
                "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                "hashedAccountName": "5e884898da28047151d0e56f8dc629277",
                "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                "maskedAccountName": "R*M*E*S*",
                "maskedAccountNumber": "**** **** **** 7890"
              },
              {
                "IFSC": "SBIN0000001",
                "encryptedAccountName": "5e884898da28047151d0e56f8dc629277",
                "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                "hashedAccountName": "5e884898da28047151d0e56f8dc629277",
                "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                "maskedAccountName": "R*M*E*S*",
                "maskedAccountNumber": "**** **** **** 7890"
              },
              {
                "IFSC": "SBIN0000001",
                "encryptedAccountName": "5e884898da28047151d0e56f8dc629277",
                "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                "hashedAccountName": "5e884898da28047151d0e56f8dc629277",
                "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                "maskedAccountName": "R*M*E*S*",
                "maskedAccountNumber": "**** **** **** 7890"
              }
            ]
          },
          "shortLink": {
            "type": "string",
            "description": "short link for the payment link",
            "example": "upipay.setu.co/Np3KnBCM8Om0"
          },
          "status": {
            "type": "string",
            "description": "status defining the validity of the payment",
            "example": "active",
            "enum": ["paid", "closed", "active"]
          },
          "transactionNote": {
            "type": "string",
            "description": "transaction note for the transaction",
            "example": "test transaction"
          }
        },
        "example": {
          "amount": 10000,
          "closedAt": "Dolorum molestiae doloribus ab.",
          "createdAt": "2024-05-17T19:17:32+05:30",
          "expireAfter": 10,
          "id": "1240689979139556556",
          "intentLink": "upi://pay?pa=test-auto-pgruosncak@okokaxis\u0026pn=merchant-4\u0026am=100.00\u0026tr=SU1240659756905923780\u0026tn=sample%20single%20use%20qr\u0026cu=INR\u0026mc=1234",
          "merchantId": "1240689979139556556",
          "merchantVpa": "fastestupi@pineaxis",
          "metadata": { "InvoiceNumber": "INV-21-12-009" },
          "minAmount": 1000,
          "primaryAccount": {
            "IFSC": "SBIN0000001",
            "encryptedAccountName": "5e884898da28047151d0e56f8dc629277",
            "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
            "hashedAccountName": "5e884898da28047151d0e56f8dc629277",
            "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
            "maskedAccountName": "R*M*E*S*",
            "maskedAccountNumber": "**** **** **** 7890"
          },
          "qrCode": "",
          "reason": {
            "code": "unable-to-fulfill-request",
            "desc": "unable-to-fulfill-request",
            "npciErrCategory": "TD",
            "npciErrCode": "YG",
            "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
            "npciRespCode": "YG",
            "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)",
            "setuDescription": "Merchant PSP error",
            "suggestedAction": "Merchant PSP error"
          },
          "refId": "1240689979139556558",
          "referenceId": "1240689979139556556",
          "secondaryAccounts": [
            {
              "IFSC": "SBIN0000001",
              "encryptedAccountName": "5e884898da28047151d0e56f8dc629277",
              "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
              "hashedAccountName": "5e884898da28047151d0e56f8dc629277",
              "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
              "maskedAccountName": "R*M*E*S*",
              "maskedAccountNumber": "**** **** **** 7890"
            },
            {
              "IFSC": "SBIN0000001",
              "encryptedAccountName": "5e884898da28047151d0e56f8dc629277",
              "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
              "hashedAccountName": "5e884898da28047151d0e56f8dc629277",
              "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
              "maskedAccountName": "R*M*E*S*",
              "maskedAccountNumber": "**** **** **** 7890"
            },
            {
              "IFSC": "SBIN0000001",
              "encryptedAccountName": "5e884898da28047151d0e56f8dc629277",
              "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
              "hashedAccountName": "5e884898da28047151d0e56f8dc629277",
              "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
              "maskedAccountName": "R*M*E*S*",
              "maskedAccountNumber": "**** **** **** 7890"
            }
          ],
          "shortLink": "upipay.setu.co/Np3KnBCM8Om0",
          "status": "active",
          "transactionNote": "test transaction"
        }
      },
      "ListTpvHistoryResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/ListTpvHistoryItem" },
            "example": [
              {
                "amount": 10000,
                "closedAt": "At commodi labore aut ut.",
                "createdAt": "2024-05-17T19:17:32+05:30",
                "expireAfter": 10,
                "id": "1240689979139556556",
                "intentLink": "upi://pay?pa=test-auto-pgruosncak@okokaxis\u0026pn=merchant-4\u0026am=100.00\u0026tr=SU1240659756905923780\u0026tn=sample%20single%20use%20qr\u0026cu=INR\u0026mc=1234",
                "merchantId": "1240689979139556556",
                "merchantVpa": "fastestupi@pineaxis",
                "metadata": { "InvoiceNumber": "INV-21-12-009" },
                "minAmount": 1000,
                "primaryAccount": {
                  "IFSC": "SBIN0000001",
                  "encryptedAccountName": "5e884898da28047151d0e56f8dc629277",
                  "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                  "hashedAccountName": "5e884898da28047151d0e56f8dc629277",
                  "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                  "maskedAccountName": "R*M*E*S*",
                  "maskedAccountNumber": "**** **** **** 7890"
                },
                "qrCode": "",
                "reason": {
                  "code": "unable-to-fulfill-request",
                  "desc": "unable-to-fulfill-request",
                  "npciErrCategory": "TD",
                  "npciErrCode": "YG",
                  "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
                  "npciRespCode": "YG",
                  "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)",
                  "setuDescription": "Merchant PSP error",
                  "suggestedAction": "Merchant PSP error"
                },
                "refId": "1240689979139556558",
                "referenceId": "1240689979139556556",
                "secondaryAccounts": [
                  {
                    "IFSC": "SBIN0000001",
                    "encryptedAccountName": "5e884898da28047151d0e56f8dc629277",
                    "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                    "hashedAccountName": "5e884898da28047151d0e56f8dc629277",
                    "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                    "maskedAccountName": "R*M*E*S*",
                    "maskedAccountNumber": "**** **** **** 7890"
                  },
                  {
                    "IFSC": "SBIN0000001",
                    "encryptedAccountName": "5e884898da28047151d0e56f8dc629277",
                    "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                    "hashedAccountName": "5e884898da28047151d0e56f8dc629277",
                    "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                    "maskedAccountName": "R*M*E*S*",
                    "maskedAccountNumber": "**** **** **** 7890"
                  }
                ],
                "shortLink": "upipay.setu.co/Np3KnBCM8Om0",
                "status": "active",
                "transactionNote": "test transaction"
              },
              {
                "amount": 10000,
                "closedAt": "At commodi labore aut ut.",
                "createdAt": "2024-05-17T19:17:32+05:30",
                "expireAfter": 10,
                "id": "1240689979139556556",
                "intentLink": "upi://pay?pa=test-auto-pgruosncak@okokaxis\u0026pn=merchant-4\u0026am=100.00\u0026tr=SU1240659756905923780\u0026tn=sample%20single%20use%20qr\u0026cu=INR\u0026mc=1234",
                "merchantId": "1240689979139556556",
                "merchantVpa": "fastestupi@pineaxis",
                "metadata": { "InvoiceNumber": "INV-21-12-009" },
                "minAmount": 1000,
                "primaryAccount": {
                  "IFSC": "SBIN0000001",
                  "encryptedAccountName": "5e884898da28047151d0e56f8dc629277",
                  "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                  "hashedAccountName": "5e884898da28047151d0e56f8dc629277",
                  "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                  "maskedAccountName": "R*M*E*S*",
                  "maskedAccountNumber": "**** **** **** 7890"
                },
                "qrCode": "",
                "reason": {
                  "code": "unable-to-fulfill-request",
                  "desc": "unable-to-fulfill-request",
                  "npciErrCategory": "TD",
                  "npciErrCode": "YG",
                  "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
                  "npciRespCode": "YG",
                  "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)",
                  "setuDescription": "Merchant PSP error",
                  "suggestedAction": "Merchant PSP error"
                },
                "refId": "1240689979139556558",
                "referenceId": "1240689979139556556",
                "secondaryAccounts": [
                  {
                    "IFSC": "SBIN0000001",
                    "encryptedAccountName": "5e884898da28047151d0e56f8dc629277",
                    "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                    "hashedAccountName": "5e884898da28047151d0e56f8dc629277",
                    "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                    "maskedAccountName": "R*M*E*S*",
                    "maskedAccountNumber": "**** **** **** 7890"
                  },
                  {
                    "IFSC": "SBIN0000001",
                    "encryptedAccountName": "5e884898da28047151d0e56f8dc629277",
                    "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                    "hashedAccountName": "5e884898da28047151d0e56f8dc629277",
                    "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                    "maskedAccountName": "R*M*E*S*",
                    "maskedAccountNumber": "**** **** **** 7890"
                  }
                ],
                "shortLink": "upipay.setu.co/Np3KnBCM8Om0",
                "status": "active",
                "transactionNote": "test transaction"
              }
            ]
          },
          "requestId": { "type": "string", "example": "cjqml1f2e5ocq2mesej0" }
        },
        "example": {
          "data": [
            {
              "amount": 10000,
              "closedAt": "At commodi labore aut ut.",
              "createdAt": "2024-05-17T19:17:32+05:30",
              "expireAfter": 10,
              "id": "1240689979139556556",
              "intentLink": "upi://pay?pa=test-auto-pgruosncak@okokaxis\u0026pn=merchant-4\u0026am=100.00\u0026tr=SU1240659756905923780\u0026tn=sample%20single%20use%20qr\u0026cu=INR\u0026mc=1234",
              "merchantId": "1240689979139556556",
              "merchantVpa": "fastestupi@pineaxis",
              "metadata": { "InvoiceNumber": "INV-21-12-009" },
              "minAmount": 1000,
              "primaryAccount": {
                "IFSC": "SBIN0000001",
                "encryptedAccountName": "5e884898da28047151d0e56f8dc629277",
                "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                "hashedAccountName": "5e884898da28047151d0e56f8dc629277",
                "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                "maskedAccountName": "R*M*E*S*",
                "maskedAccountNumber": "**** **** **** 7890"
              },
              "qrCode": "",
              "reason": {
                "code": "unable-to-fulfill-request",
                "desc": "unable-to-fulfill-request",
                "npciErrCategory": "TD",
                "npciErrCode": "YG",
                "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
                "npciRespCode": "YG",
                "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)",
                "setuDescription": "Merchant PSP error",
                "suggestedAction": "Merchant PSP error"
              },
              "refId": "1240689979139556558",
              "referenceId": "1240689979139556556",
              "secondaryAccounts": [
                {
                  "IFSC": "SBIN0000001",
                  "encryptedAccountName": "5e884898da28047151d0e56f8dc629277",
                  "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                  "hashedAccountName": "5e884898da28047151d0e56f8dc629277",
                  "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                  "maskedAccountName": "R*M*E*S*",
                  "maskedAccountNumber": "**** **** **** 7890"
                },
                {
                  "IFSC": "SBIN0000001",
                  "encryptedAccountName": "5e884898da28047151d0e56f8dc629277",
                  "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                  "hashedAccountName": "5e884898da28047151d0e56f8dc629277",
                  "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                  "maskedAccountName": "R*M*E*S*",
                  "maskedAccountNumber": "**** **** **** 7890"
                }
              ],
              "shortLink": "upipay.setu.co/Np3KnBCM8Om0",
              "status": "active",
              "transactionNote": "test transaction"
            },
            {
              "amount": 10000,
              "closedAt": "At commodi labore aut ut.",
              "createdAt": "2024-05-17T19:17:32+05:30",
              "expireAfter": 10,
              "id": "1240689979139556556",
              "intentLink": "upi://pay?pa=test-auto-pgruosncak@okokaxis\u0026pn=merchant-4\u0026am=100.00\u0026tr=SU1240659756905923780\u0026tn=sample%20single%20use%20qr\u0026cu=INR\u0026mc=1234",
              "merchantId": "1240689979139556556",
              "merchantVpa": "fastestupi@pineaxis",
              "metadata": { "InvoiceNumber": "INV-21-12-009" },
              "minAmount": 1000,
              "primaryAccount": {
                "IFSC": "SBIN0000001",
                "encryptedAccountName": "5e884898da28047151d0e56f8dc629277",
                "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                "hashedAccountName": "5e884898da28047151d0e56f8dc629277",
                "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                "maskedAccountName": "R*M*E*S*",
                "maskedAccountNumber": "**** **** **** 7890"
              },
              "qrCode": "",
              "reason": {
                "code": "unable-to-fulfill-request",
                "desc": "unable-to-fulfill-request",
                "npciErrCategory": "TD",
                "npciErrCode": "YG",
                "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
                "npciRespCode": "YG",
                "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)",
                "setuDescription": "Merchant PSP error",
                "suggestedAction": "Merchant PSP error"
              },
              "refId": "1240689979139556558",
              "referenceId": "1240689979139556556",
              "secondaryAccounts": [
                {
                  "IFSC": "SBIN0000001",
                  "encryptedAccountName": "5e884898da28047151d0e56f8dc629277",
                  "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                  "hashedAccountName": "5e884898da28047151d0e56f8dc629277",
                  "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                  "maskedAccountName": "R*M*E*S*",
                  "maskedAccountNumber": "**** **** **** 7890"
                },
                {
                  "IFSC": "SBIN0000001",
                  "encryptedAccountName": "5e884898da28047151d0e56f8dc629277",
                  "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                  "hashedAccountName": "5e884898da28047151d0e56f8dc629277",
                  "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                  "maskedAccountName": "R*M*E*S*",
                  "maskedAccountNumber": "**** **** **** 7890"
                }
              ],
              "shortLink": "upipay.setu.co/Np3KnBCM8Om0",
              "status": "active",
              "transactionNote": "test transaction"
            },
            {
              "amount": 10000,
              "closedAt": "At commodi labore aut ut.",
              "createdAt": "2024-05-17T19:17:32+05:30",
              "expireAfter": 10,
              "id": "1240689979139556556",
              "intentLink": "upi://pay?pa=test-auto-pgruosncak@okokaxis\u0026pn=merchant-4\u0026am=100.00\u0026tr=SU1240659756905923780\u0026tn=sample%20single%20use%20qr\u0026cu=INR\u0026mc=1234",
              "merchantId": "1240689979139556556",
              "merchantVpa": "fastestupi@pineaxis",
              "metadata": { "InvoiceNumber": "INV-21-12-009" },
              "minAmount": 1000,
              "primaryAccount": {
                "IFSC": "SBIN0000001",
                "encryptedAccountName": "5e884898da28047151d0e56f8dc629277",
                "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                "hashedAccountName": "5e884898da28047151d0e56f8dc629277",
                "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                "maskedAccountName": "R*M*E*S*",
                "maskedAccountNumber": "**** **** **** 7890"
              },
              "qrCode": "",
              "reason": {
                "code": "unable-to-fulfill-request",
                "desc": "unable-to-fulfill-request",
                "npciErrCategory": "TD",
                "npciErrCode": "YG",
                "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
                "npciRespCode": "YG",
                "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)",
                "setuDescription": "Merchant PSP error",
                "suggestedAction": "Merchant PSP error"
              },
              "refId": "1240689979139556558",
              "referenceId": "1240689979139556556",
              "secondaryAccounts": [
                {
                  "IFSC": "SBIN0000001",
                  "encryptedAccountName": "5e884898da28047151d0e56f8dc629277",
                  "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                  "hashedAccountName": "5e884898da28047151d0e56f8dc629277",
                  "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                  "maskedAccountName": "R*M*E*S*",
                  "maskedAccountNumber": "**** **** **** 7890"
                },
                {
                  "IFSC": "SBIN0000001",
                  "encryptedAccountName": "5e884898da28047151d0e56f8dc629277",
                  "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                  "hashedAccountName": "5e884898da28047151d0e56f8dc629277",
                  "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
                  "maskedAccountName": "R*M*E*S*",
                  "maskedAccountNumber": "**** **** **** 7890"
                }
              ],
              "shortLink": "upipay.setu.co/Np3KnBCM8Om0",
              "status": "active",
              "transactionNote": "test transaction"
            }
          ],
          "requestId": "cjqml1f2e5ocq2mesej0"
        }
      },
      "ListVpaResponse": {
        "type": "object",
        "properties": {
          "meta": { "$ref": "#/components/schemas/PaginationResponse" },
          "vpas": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/VpaResponse" },
            "example": [
              {
                "createdAt": "2024-05-17T19:17:32+05:30",
                "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                "referenceId": "1240689979139556557",
                "status": "active",
                "verificationStatus": "verified",
                "vpa": "fastestupi@pineaxis"
              },
              {
                "createdAt": "2024-05-17T19:17:32+05:30",
                "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                "referenceId": "1240689979139556557",
                "status": "active",
                "verificationStatus": "verified",
                "vpa": "fastestupi@pineaxis"
              },
              {
                "createdAt": "2024-05-17T19:17:32+05:30",
                "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
                "referenceId": "1240689979139556557",
                "status": "active",
                "verificationStatus": "verified",
                "vpa": "fastestupi@pineaxis"
              }
            ]
          }
        },
        "example": {
          "meta": {
            "cursor": {
              "current": "MDFBUlozTkRFS1RTVjRSUkZGUTY5RzVGQVY=",
              "next": "MDFBUlozTkRFS1RTVjRSUkZGUTY5RzVGQVY=",
              "previous": "MDFBUlozTkRFS1RTVjRSUkZGUTY5RzVGQVY="
            },
            "filter": ["name:foo"],
            "limit": 10,
            "totalRecords": 2126004511
          },
          "vpas": [
            {
              "createdAt": "2024-05-17T19:17:32+05:30",
              "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
              "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
              "referenceId": "1240689979139556557",
              "status": "active",
              "verificationStatus": "verified",
              "vpa": "fastestupi@pineaxis"
            },
            {
              "createdAt": "2024-05-17T19:17:32+05:30",
              "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
              "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
              "referenceId": "1240689979139556557",
              "status": "active",
              "verificationStatus": "verified",
              "vpa": "fastestupi@pineaxis"
            },
            {
              "createdAt": "2024-05-17T19:17:32+05:30",
              "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
              "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
              "referenceId": "1240689979139556557",
              "status": "active",
              "verificationStatus": "verified",
              "vpa": "fastestupi@pineaxis"
            },
            {
              "createdAt": "2024-05-17T19:17:32+05:30",
              "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
              "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
              "referenceId": "1240689979139556557",
              "status": "active",
              "verificationStatus": "verified",
              "vpa": "fastestupi@pineaxis"
            }
          ]
        }
      },
      "MandateExecutionResponse": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "integer",
            "description": "Amount of the mandate",
            "example": 1000,
            "minimum": 100,
            "maximum": 20000000
          },
          "createdAt": {
            "type": "string",
            "description": "RFC 3339 timestamp to indicate the creation date \u0026 time for the resource",
            "example": "2024-05-17T19:17:32+05:30",
            "format": "date-time"
          },
          "id": {
            "type": "string",
            "description": "Id of the resource, which is the same the id returned in the Create \u003cresource\u003e API response",
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "mandateId": {
            "type": "string",
            "description": "Id of the mandate that needs to be executed",
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "merchantId": {
            "type": "string",
            "description": "Id of the merchant who created the mandate",
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "referenceId": {
            "type": "string",
            "description": "Merchant reference id of the mandate",
            "example": "ABC1234789",
            "minLength": 5,
            "maxLength": 50
          },
          "remark": {
            "type": "string",
            "description": "Remark for the mandate transaction",
            "example": "Transaction for car loan emi"
          },
          "sequenceNumber": {
            "type": "integer",
            "description": "Sequence number of the mandate",
            "example": 1,
            "format": "int64"
          },
          "status": {
            "type": "string",
            "description": "Status of the mandate execution request",
            "example": "live",
            "enum": ["pending", "initiated", "success", "failed"]
          },
          "txnId": {
            "type": "string",
            "description": "NPCI transaction id",
            "example": "BTTZrc5gDFkuCr3n3I0ey4aNtzLOLR7K7aR",
            "pattern": "^[a-zA-Z0-9]*$",
            "minLength": 35,
            "maxLength": 35
          },
          "umn": {
            "type": "string",
            "description": "Unique mandate number",
            "example": "c27f5fc30d344e9594fce0afa34f8859@mypsp"
          }
        },
        "example": {
          "amount": 1000,
          "createdAt": "2024-05-17T19:17:32+05:30",
          "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
          "mandateId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
          "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
          "referenceId": "ABC1234789",
          "remark": "Transaction for car loan emi",
          "sequenceNumber": 1,
          "status": "live",
          "txnId": "BTTZrc5gDFkuCr3n3I0ey4aNtzLOLR7K7aR",
          "umn": "c27f5fc30d344e9594fce0afa34f8859@mypsp"
        }
      },
      "MandatePreDebitNotificationResponse": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "integer",
            "description": "Amount of the mandate",
            "example": 1000,
            "minimum": 100,
            "maximum": 20000000
          },
          "createdAt": {
            "type": "string",
            "description": "RFC 3339 timestamp to indicate the creation date \u0026 time for the resource",
            "example": "2024-05-17T19:17:32+05:30",
            "format": "date-time"
          },
          "executionDate": {
            "type": "string",
            "description": "Execution date of the mandate",
            "example": "02012006"
          },
          "id": {
            "type": "string",
            "description": "Id of the resource, which is the same the id returned in the Create \u003cresource\u003e API response",
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "mandateId": {
            "type": "string",
            "description": "Id of the mandate that needs to be notified",
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "merchantId": {
            "type": "string",
            "description": "Id of the merchant who created the mandate",
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "referenceId": {
            "type": "string",
            "description": "Merchant reference id of the mandate",
            "example": "ABC1234789",
            "minLength": 5,
            "maxLength": 50
          },
          "sequenceNumber": {
            "type": "integer",
            "description": "Sequence number of the mandate",
            "example": 1,
            "format": "int64"
          },
          "status": {
            "type": "string",
            "description": "Status of the pre debit notification request",
            "example": "success",
            "enum": ["pending", "initiated", "success", "failed"]
          },
          "txnId": {
            "type": "string",
            "description": "NPCI transaction id",
            "example": "BTTZrc5gDFkuCr3n3I0ey4aNtzLOLR7K7aR",
            "pattern": "^[a-zA-Z0-9]*$",
            "minLength": 35,
            "maxLength": 35
          },
          "umn": {
            "type": "string",
            "description": "Unique mandate number",
            "example": "c27f5fc30d344e9594fce0afa34f8859@mypsp"
          }
        },
        "example": {
          "amount": 1000,
          "createdAt": "2024-05-17T19:17:32+05:30",
          "executionDate": "02012006",
          "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
          "mandateId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
          "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
          "referenceId": "ABC1234789",
          "sequenceNumber": 1,
          "status": "success",
          "txnId": "BTTZrc5gDFkuCr3n3I0ey4aNtzLOLR7K7aR",
          "umn": "c27f5fc30d344e9594fce0afa34f8859@mypsp"
        }
      },
      "MandateTPVAccountDetail": {
        "type": "object",
        "properties": {
          "IFSC": {
            "type": "string",
            "description": "IFSC code for the account",
            "example": "SBIN0000001"
          },
          "accountName": {
            "type": "string",
            "description": "account holder name for the account",
            "example": "deku"
          },
          "accountNumber": {
            "type": "string",
            "description": "account number for the account",
            "example": "1234567890"
          }
        },
        "example": {
          "IFSC": "SBIN0000001",
          "accountName": "deku",
          "accountNumber": "1234567890"
        },
        "required": ["accountNumber"]
      },
      "MerchantResponse": {
        "type": "object",
        "properties": {
          "acceptDeemedTxns": {
            "type": "boolean",
            "description": "Indicates whether deemed txns are to be accepted or not for the Merchant",
            "example": true
          },
          "addressProviderId": {
            "type": "string",
            "description": "Id of the Address Provider associated with the Merchant",
            "example": "1237800298651584417"
          },
          "businessName": {
            "type": "string",
            "description": "Brand name or Consumer facing name",
            "example": "Setu",
            "pattern": "^[a-zA-Z0-9 ]+$",
            "minLength": 1,
            "maxLength": 99
          },
          "businessType": {
            "type": "string",
            "description": "Incorporation type",
            "example": "PROPRIETARY",
            "enum": [
              "PROPRIETARY",
              "PARTNERSHIP",
              "PRIVATE",
              "PUBLIC",
              "OTHERS"
            ]
          },
          "createdAt": {
            "type": "string",
            "description": "RFC 3339 timestamp to indicate the creation date \u0026 time for the resource",
            "example": "2024-05-17T19:17:32+05:30",
            "format": "date-time"
          },
          "documentStatus": {
            "type": "string",
            "description": "Current Status of the Merchant Controlled by Admin / Onboarding Team",
            "example": "APPROVED",
            "enum": ["PENDING", "SUBMITTED", "APPROVED", "REJECTED"]
          },
          "franchiseName": {
            "type": "string",
            "description": "Franchise name",
            "example": "Setu UPI",
            "pattern": "^[a-zA-Z0-9 ]+$"
          },
          "genre": {
            "type": "string",
            "description": "Online / Offline",
            "example": "ONLINE",
            "enum": ["ONLINE", "OFFLINE"]
          },
          "id": {
            "type": "string",
            "description": "Id of the resource, which is the same the id returned in the Create \u003cresource\u003e API response",
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "legalName": {
            "type": "string",
            "description": "Legal name as per incorporation documents",
            "example": "BrokenTusk Technologies Pvt Ltd",
            "pattern": "^[a-zA-Z0-9 ]+$",
            "minLength": 1,
            "maxLength": 99
          },
          "mcc": {
            "type": "string",
            "description": "Category of business operation",
            "example": "5432"
          },
          "merchantName": {
            "type": "string",
            "example": "Et illum laudantium."
          },
          "merchantType": {
            "type": "string",
            "description": "merchant type",
            "default": "large",
            "example": "large",
            "enum": ["small", "large"]
          },
          "onboardingType": {
            "type": "string",
            "description": "onboarding type",
            "default": "aggregator",
            "example": "aggregator",
            "enum": ["bank", "aggregator"]
          },
          "paymentAggregatorId": {
            "type": "string",
            "example": "Nemo dicta repudiandae distinctio pariatur aut deleniti."
          },
          "paymentModes": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "nre",
              "enum": [
                "saving",
                "lite",
                "erupi",
                "rupay_cc",
                "ppi",
                "current",
                "nro",
                "nre"
              ]
            },
            "description": "payment modes allowed for merchants",
            "example": [
              "saving",
              "lite",
              "erupi",
              "rupay_cc",
              "ppi",
              "current",
              "nro",
              "nre"
            ]
          },
          "productAccountId": { "type": "string", "example": "Et nisi." },
          "products": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "collect_autopay",
              "enum": [
                "pay_single",
                "pay_multi",
                "tpv",
                "tpv_plus",
                "intent_autopay",
                "qr_autopay",
                "collect_autopay",
                "recur_tpv",
                "otm_intent_single_debit",
                "otm_intent_multi_debit",
                "otm_collect_single_debit",
                "otm_collect_multi_debit",
                "single_block_multi_debit"
              ]
            },
            "description": "products allowed for merchants",
            "example": [
              "pay_single",
              "pay_multi",
              "tpv",
              "tpv_plus",
              "intent_autopay"
            ]
          },
          "settlement": {
            "$ref": "#/components/schemas/SettlementConfiguration"
          },
          "settlementsEnabled": {
            "type": "boolean",
            "description": "indicates whether settlements are enabled for merchant or not",
            "example": false
          },
          "standardAccountId": {
            "type": "string",
            "example": "Libero iusto rem est incidunt eaque atque."
          },
          "transactionStatus": {
            "type": "string",
            "description": "Current Transaction Status of the Merchant",
            "example": "active",
            "enum": ["active", "inactive"]
          },
          "vpaHandles": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "Nesciunt dolor dignissimos."
            },
            "description": "handles merchant supports",
            "example": ["pineaxis"]
          },
          "vpaPrefix": {
            "type": "string",
            "description": "VPA prefix according to which the VPA needs to be registered",
            "example": "acmecorp.*"
          }
        },
        "example": {
          "acceptDeemedTxns": true,
          "addressProviderId": "1237800298651584417",
          "businessName": "Setu",
          "businessType": "PROPRIETARY",
          "createdAt": "2024-05-17T19:17:32+05:30",
          "documentStatus": "APPROVED",
          "franchiseName": "Setu UPI",
          "genre": "ONLINE",
          "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
          "legalName": "BrokenTusk Technologies Pvt Ltd",
          "mcc": "5432",
          "merchantName": "Sit numquam quia accusantium et ex.",
          "merchantType": "large",
          "onboardingType": "aggregator",
          "paymentAggregatorId": "Illo nihil ipsa molestiae et.",
          "paymentModes": [
            "saving",
            "lite",
            "erupi",
            "rupay_cc",
            "ppi",
            "current",
            "nro",
            "nre"
          ],
          "productAccountId": "Rerum est repellendus aut placeat.",
          "products": [
            "pay_single",
            "pay_multi",
            "tpv",
            "tpv_plus",
            "intent_autopay"
          ],
          "settlement": {
            "cycles": [
              {
                "endTime": "1977-01-17T07:19:44Z",
                "settlementTime": "1995-03-19T23:15:19Z",
                "startTime": "2008-11-27T00:50:41Z"
              },
              {
                "endTime": "1977-01-17T07:19:44Z",
                "settlementTime": "1995-03-19T23:15:19Z",
                "startTime": "2008-11-27T00:50:41Z"
              },
              {
                "endTime": "1977-01-17T07:19:44Z",
                "settlementTime": "1995-03-19T23:15:19Z",
                "startTime": "2008-11-27T00:50:41Z"
              }
            ],
            "frequency": "TPlusOne",
            "splitsEnabled": false,
            "type": "Net"
          },
          "settlementsEnabled": true,
          "standardAccountId": "Est autem repellat.",
          "transactionStatus": "active",
          "vpaHandles": ["pineaxis"],
          "vpaPrefix": "acmecorp.*"
        }
      },
      "MockMandateRequestBody": {
        "type": "object",
        "properties": {
          "failureType": {
            "type": "string",
            "description": "Type of failure (optional/hidden)",
            "example": "type-1"
          },
          "id": {
            "type": "string",
            "description": "Mandate ID",
            "example": "01J54G9QCFW4FE6JXKJ9QK3FTD"
          },
          "operation": {
            "type": "string",
            "description": "Operation type",
            "example": "create",
            "enum": ["create", "notify", "execute"]
          },
          "status": {
            "type": "string",
            "description": "Status of the operation",
            "example": "success",
            "enum": ["success", "failed"]
          }
        },
        "required": ["id", "operation", "status"],
        "example": {
          "id": "01J54G9QCFW4FE6JXKJ9QK3FTD",
          "operation": "create",
          "status": "success"
        }
      },
      "MockMandateResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "enum": ["success", "failure"]
          }
        },
        "example": { "status": "success" }
      },
      "ModifyRequestBody": {
        "type": "object",
        "properties": {
          "amountLimit": {
            "type": "integer",
            "description": "Maximum amount for which a mandate transaction can be executed",
            "example": 1000,
            "minimum": 100,
            "maximum": 20000000
          },
          "endDate": {
            "type": "string",
            "description": "End date of the mandate",
            "example": "02012006"
          },
          "expireAfter": {
            "type": "integer",
            "description": "Number of minutes after which the mandate update request will expire",
            "default": 2,
            "example": 2,
            "minimum": 2,
            "maximum": 64800
          },
          "referenceId": {
            "type": "string",
            "description": "Merchant reference id of the mandate",
            "example": "ABC1234789",
            "minLength": 5,
            "maxLength": 50
          }
        },
        "example": {
          "amountLimit": 1000,
          "endDate": "02012006",
          "expireAfter": 2,
          "referenceId": "ABC1234789"
        }
      },
      "NotifyRequestBody": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "integer",
            "description": "Amount of the mandate",
            "example": 1000,
            "minimum": 100,
            "maximum": 20000000
          },
          "executionDate": {
            "type": "string",
            "description": "Execution date of the mandate",
            "example": "02012006"
          },
          "referenceId": {
            "type": "string",
            "description": "Merchant reference id of the mandate",
            "example": "ABC1234789",
            "minLength": 5,
            "maxLength": 50
          },
          "sequenceNumber": {
            "type": "integer",
            "description": "Sequence number of the mandate",
            "example": 1,
            "format": "int64"
          },
          "umn": {
            "type": "string",
            "description": "Unique mandate number",
            "example": "setumandate1234789@ybl"
          }
        },
        "example": {
          "amount": 1000,
          "executionDate": "02012006",
          "referenceId": "ABC1234789",
          "sequenceNumber": 1,
          "umn": "setumandate1234789@ybl"
        },
        "required": ["umn", "amount", "sequenceNumber", "executionDate"]
      },
      "PaginationResponse": {
        "type": "object",
        "properties": {
          "cursor": { "$ref": "#/components/schemas/Cursor" },
          "filter": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "Doloremque asperiores alias ducimus ipsum ratione."
            },
            "description": "Filters to be applied on the query",
            "example": ["name:foo"]
          },
          "limit": {
            "type": "integer",
            "description": "Number of records to be shown in a page",
            "default": 20,
            "example": 10,
            "minimum": 10,
            "maximum": 50
          },
          "totalRecords": {
            "type": "integer",
            "description": "Number of records in the current page",
            "example": 1879887795,
            "format": "int32"
          }
        },
        "example": {
          "cursor": {
            "current": "MDFBUlozTkRFS1RTVjRSUkZGUTY5RzVGQVY=",
            "next": "MDFBUlozTkRFS1RTVjRSUkZGUTY5RzVGQVY=",
            "previous": "MDFBUlozTkRFS1RTVjRSUkZGUTY5RzVGQVY="
          },
          "filter": ["name:foo"],
          "limit": 10,
          "totalRecords": 173874078
        }
      },
      "PayerAccountDetails": {
        "type": "object",
        "properties": {
          "accountNumber": {
            "type": "string",
            "example": "Consectetur rerum magnam a id explicabo."
          },
          "accountType": {
            "type": "string",
            "example": "Accusantium natus dolores."
          },
          "ifsc": {
            "type": "string",
            "example": "Et labore ratione ut voluptas."
          }
        },
        "example": {
          "accountNumber": "Perspiciatis nihil velit perspiciatis voluptatem soluta omnis.",
          "accountType": "Praesentium est est eos voluptate eos.",
          "ifsc": "Voluptatem recusandae delectus adipisci id."
        }
      },
      "PaymentDetails": {
        "type": "object",
        "properties": {
          "customerAccountType": {
            "type": "string",
            "description": "account type of the customer",
            "example": "SAVINGS",
            "enum": ["SAVINGS", "CURRENT", "CREDIT"]
          },
          "customerVpa": {
            "type": "string",
            "description": "remitter's VPA",
            "example": "test-auto-tyvmm59i9b@okokaxis"
          },
          "paymentId": {
            "type": "string",
            "description": "Setu payment Id",
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "paymentStatus": {
            "type": "string",
            "description": "status defining the validity of the payment",
            "example": "initiated",
            "enum": ["initiated", "pending", "success", "failed"]
          },
          "rrn": {
            "type": "string",
            "description": "NPCI transaction custRef",
            "example": "124068997913"
          },
          "txnId": {
            "type": "string",
            "description": "NPCI transaction id",
            "example": "SETmBZkQOV0M7wyyP1V4PIFhRSzW5eSjmYI"
          }
        },
        "example": {
          "customerAccountType": "SAVINGS",
          "customerVpa": "test-auto-tyvmm59i9b@okokaxis",
          "paymentId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
          "paymentStatus": "initiated",
          "rrn": "124068997913",
          "txnId": "SETmBZkQOV0M7wyyP1V4PIFhRSzW5eSjmYI"
        }
      },
      "Reason": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "error code returned by Setu for product instance / mandate request / payment / customer vpa verification failure / closure",
            "example": "unable-to-fulfill-request"
          },
          "desc": {
            "type": "string",
            "description": "describes product instance / mandate request / payment / customer vpa verification failure / closure reason",
            "example": "unable-to-fulfill-request"
          },
          "npciErrCategory": {
            "type": "string",
            "description": "npciErrCode category for product instance / mandate request / payment / customer vpa verification failure / closure",
            "example": "TD"
          },
          "npciErrCode": {
            "type": "string",
            "description": "err code received from NPCI for product instance / mandate request / payment / customer vpa verification failure / closure",
            "example": "YG"
          },
          "npciErrDesc": {
            "type": "string",
            "description": "npciErrCode description for product instance / mandate request / payment / customer vpa verification failure / closure",
            "example": "MERCHANT ERROR (PAYEE PSP)"
          },
          "npciRespCode": {
            "type": "string",
            "description": "resp code received from NPCI for product instance / mandate request / payment / customer vpa verification failure / closure",
            "example": "YG"
          },
          "npciRespDesc": {
            "type": "string",
            "description": "npciRespCode description for product instance / mandate request / payment / customer vpa verification failure / closure",
            "example": "MERCHANT ERROR (PAYEE PSP)"
          },
          "setuDescription": {
            "type": "string",
            "description": "setuDescription for product instance / mandate request / payment / customer vpa verification failure / closure",
            "example": "Merchant PSP error"
          },
          "suggestedAction": {
            "type": "string",
            "description": "suggestedAction for product instance / mandate request / payment / customer vpa verification failure / closure",
            "example": "Merchant PSP error"
          }
        },
        "example": {
          "code": "unable-to-fulfill-request",
          "desc": "unable-to-fulfill-request",
          "npciErrCategory": "TD",
          "npciErrCode": "YG",
          "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
          "npciRespCode": "YG",
          "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)",
          "setuDescription": "Merchant PSP error",
          "suggestedAction": "Merchant PSP error"
        }
      },
      "RefundReason": {
        "type": "object",
        "properties": {
          "adjCode": {
            "type": "string",
            "description": "Code sent by npci after adjustments",
            "example": "501"
          },
          "adjFlag": {
            "type": "string",
            "description": "Flag sent by npci after adjustments",
            "example": "RRC"
          },
          "errCode": {
            "type": "string",
            "description": "Error code returned by Setu for refund failures",
            "example": "refund-disabled"
          },
          "npciErrCode": {
            "type": "string",
            "description": "Error code received from NPCI in case refund request fails",
            "example": "R21"
          },
          "npciErrDesc": {
            "type": "string",
            "description": "indicates refund error reason",
            "example": "ONLINE REFUND IS DISABLED IN UPI"
          }
        },
        "example": {
          "adjCode": "501",
          "adjFlag": "RRC",
          "errCode": "refund-disabled",
          "npciErrCode": "R21",
          "npciErrDesc": "ONLINE REFUND IS DISABLED IN UPI"
        }
      },
      "ResolveShortlinkResponse": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "integer",
            "description": "Amount (in paise) that needs to be collected from the user. If populated this value gets displayed on the payer PSP's payment page",
            "example": 10000,
            "minimum": 100
          },
          "closedAt": {
            "type": "string",
            "description": "RFC 3339 timestamp to indicate the closure date \u0026 time",
            "example": "2024-06-17T19:17:32+05:30",
            "format": "date-time"
          },
          "createdAt": {
            "type": "string",
            "description": "RFC 3339 timestamp to indicate the creation date \u0026 time for the resource",
            "example": "2024-05-17T19:17:32+05:30",
            "format": "date-time"
          },
          "currency": {
            "type": "string",
            "example": "Repellendus cum rerum."
          },
          "expiryDate": {
            "type": "string",
            "description": "RFC 3339 timestamp to indicate the expiry date \u0026 time",
            "example": "2024-06-17T19:17:32+05:30",
            "format": "date-time"
          },
          "id": {
            "type": "string",
            "description": "Id of the resource, which is the same the id returned in the Create \u003cresource\u003e API response",
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "intentLink": {
            "type": "string",
            "description": "A UPI pay intent link built according to the spec enforced by NPCI",
            "example": "upi://pay?pa=test-auto-pgruosncak@okokaxis\u0026pn=merchant-4\u0026am=100.00\u0026tr=SU1240659756905923780\u0026tn=sample%20single%20use%20qr\u0026cu=INR\u0026mc=1234"
          },
          "merchantId": {
            "type": "string",
            "description": "Id associated with the merchant on our platform",
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "merchantName": {
            "type": "string",
            "description": "Name of the merchant on our platform",
            "example": "Doofenshmirtz Evil Incorporated"
          },
          "merchantVpa": {
            "type": "string",
            "description": "UPI id of the merchant on which the payments are collected",
            "example": "fastestupi@pineaxis",
            "pattern": "^[a-z0-9.-]*@[a-zA-Z]*$"
          },
          "metadata": {
            "type": "string",
            "description": "field provided for the merchant to add additional key-value pairs",
            "example": { "InvoiceNumber": "INV-21-12-009" },
            "format": "binary"
          },
          "minAmount": {
            "type": "integer",
            "description": "Minimum amount (in paise) - on setting this value the amount field on the PSP's payment page becomes editable and the customer can pay an amount equal to or greater than the minimum amount",
            "example": 1000,
            "minimum": 100
          },
          "paymentDetails": { "$ref": "#/components/schemas/PaymentDetails" },
          "paymentType": {
            "type": "string",
            "example": "Reprehenderit esse non."
          },
          "qrCode": {
            "type": "string",
            "description": "QR code for the generated intent link in the form of base64 encoded string",
            "example": ""
          },
          "reason": { "$ref": "#/components/schemas/Reason" },
          "refId": {
            "type": "string",
            "description": "NPCI transaction refId",
            "example": "1240689979139556558",
            "pattern": "^[a-zA-Z0-9]*$",
            "minLength": 1,
            "maxLength": 35
          },
          "referenceId": {
            "type": "string",
            "description": "reference id in the merchant's system",
            "example": "1240689979139556557",
            "pattern": "^[a-zA-Z0-9]*$",
            "minLength": 1,
            "maxLength": 50
          },
          "shortLink": {
            "type": "string",
            "description": "A shortened URL for the given intent link",
            "example": "upipay.setu.co/Np3KnBCM8Om0"
          },
          "status": {
            "type": "string",
            "description": "status defining the validity of the product instance",
            "example": "active",
            "enum": ["inactive", "active", "paid", "closed"]
          },
          "transactionNote": {
            "type": "string",
            "description": "Transaction note displayed to the customer at the payer PSP's payment page",
            "example": "testpay"
          }
        },
        "example": {
          "amount": 10000,
          "closedAt": "2024-06-17T19:17:32+05:30",
          "createdAt": "2024-05-17T19:17:32+05:30",
          "currency": "Quasi qui assumenda laudantium laborum nobis.",
          "expiryDate": "2024-06-17T19:17:32+05:30",
          "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
          "intentLink": "upi://pay?pa=test-auto-pgruosncak@okokaxis\u0026pn=merchant-4\u0026am=100.00\u0026tr=SU1240659756905923780\u0026tn=sample%20single%20use%20qr\u0026cu=INR\u0026mc=1234",
          "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
          "merchantName": "Doofenshmirtz Evil Incorporated",
          "merchantVpa": "fastestupi@pineaxis",
          "metadata": { "InvoiceNumber": "INV-21-12-009" },
          "minAmount": 1000,
          "paymentDetails": {
            "customerAccountType": "SAVINGS",
            "customerVpa": "test-auto-tyvmm59i9b@okokaxis",
            "paymentId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
            "paymentStatus": "initiated",
            "rrn": "124068997913",
            "txnId": "SETmBZkQOV0M7wyyP1V4PIFhRSzW5eSjmYI"
          },
          "paymentType": "Voluptas rem similique odit.",
          "qrCode": "",
          "reason": {
            "code": "unable-to-fulfill-request",
            "desc": "unable-to-fulfill-request",
            "npciErrCategory": "TD",
            "npciErrCode": "YG",
            "npciErrDesc": "MERCHANT ERROR (PAYEE PSP)",
            "npciRespCode": "YG",
            "npciRespDesc": "MERCHANT ERROR (PAYEE PSP)",
            "setuDescription": "Merchant PSP error",
            "suggestedAction": "Merchant PSP error"
          },
          "refId": "1240689979139556558",
          "referenceId": "1240689979139556557",
          "shortLink": "upipay.setu.co/Np3KnBCM8Om0",
          "status": "active",
          "transactionNote": "testpay"
        }
      },
      "RevokeMandateResponse": {
        "type": "object",
        "properties": {
          "expireAfter": {
            "type": "integer",
            "description": "Number of minutes after which the mandate revoke request will expire",
            "default": 2,
            "example": 2,
            "minimum": 2,
            "maximum": 64800
          },
          "id": {
            "type": "string",
            "description": "Id of the mandate request resource",
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "intentLink": {
            "type": "string",
            "example": "upi://mandate?pa=deku040920232@okokaxis\u0026validitystart=1995-12-31\u0026amrule=max\u0026recur=one%20time\u0026recurvalue=0\u0026recurtype=on\u0026cu=INR\u0026mc=1234\u0026mode=04\u0026purpose=14\u0026rev=N\u0026block=N\u0026txnType=revoke\u0026umn=SETUS7mxYHK1A6yXhxJsoKM7yxKqC2r0\u0026tid=SETE9q1rQXW3wXHzDdaqJTDGHHTBkJ0Segc"
          },
          "mandateId": {
            "type": "string",
            "description": "Id of the mandate resource",
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "merchantId": {
            "type": "string",
            "description": "Id of the merchant who created the mandate",
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "mode": {
            "type": "string",
            "example": "intent",
            "enum": ["collect", "intent"]
          },
          "referenceId": {
            "type": "string",
            "description": "Merchant reference id of the mandate",
            "example": "ABC1234789",
            "minLength": 5,
            "maxLength": 50
          },
          "status": {
            "type": "string",
            "example": "pending",
            "enum": ["pending", "initiated", "success", "failed"]
          },
          "txnId": {
            "type": "string",
            "description": "NPCI transaction id",
            "example": "BTTZrc5gDFkuCr3n3I0ey4aNtzLOLR7K7aR",
            "pattern": "^[a-zA-Z0-9]*$",
            "minLength": 35,
            "maxLength": 35
          },
          "umn": {
            "type": "string",
            "description": "Unique mandate number",
            "example": "c27f5fc30d344e9594fce0afa34f8859@mypsp"
          }
        },
        "example": {
          "expireAfter": 2,
          "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
          "intentLink": "upi://mandate?pa=deku040920232@okokaxis\u0026validitystart=1995-12-31\u0026amrule=max\u0026recur=one%20time\u0026recurvalue=0\u0026recurtype=on\u0026cu=INR\u0026mc=1234\u0026mode=04\u0026purpose=14\u0026rev=N\u0026block=N\u0026txnType=revoke\u0026umn=SETUS7mxYHK1A6yXhxJsoKM7yxKqC2r0\u0026tid=SETE9q1rQXW3wXHzDdaqJTDGHHTBkJ0Segc",
          "mandateId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
          "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
          "mode": "intent",
          "referenceId": "ABC1234789",
          "status": "pending",
          "txnId": "BTTZrc5gDFkuCr3n3I0ey4aNtzLOLR7K7aR",
          "umn": "c27f5fc30d344e9594fce0afa34f8859@mypsp"
        }
      },
      "RevokeRequestBody": {
        "type": "object",
        "properties": {
          "expireAfter": {
            "type": "integer",
            "description": "Number of minutes after which the mandate revoke request will expire",
            "default": 2,
            "example": 2,
            "minimum": 2,
            "maximum": 64800
          },
          "referenceId": {
            "type": "string",
            "description": "Merchant reference id of the mandate",
            "example": "ABC1234789",
            "minLength": 5,
            "maxLength": 50
          }
        },
        "example": { "expireAfter": 2, "referenceId": "ABC1234789" }
      },
      "SettlementBankAccountResponse": {
        "type": "object",
        "properties": {
          "accountHolderName": {
            "type": "string",
            "description": "account holder name for the settlement bank account",
            "example": "deku"
          },
          "accountNumber": {
            "type": "string",
            "description": "account number for the settlement bank account",
            "example": "1234567890"
          },
          "accountType": {
            "type": "string",
            "description": "account type for the settlement bank account",
            "example": "CURRENT"
          },
          "active": {
            "type": "boolean",
            "description": "defines the validity of the settlement bank account",
            "example": true
          },
          "beneCode": {
            "type": "string",
            "description": "bene code associated with the settlement bank account",
            "example": "1234567890"
          },
          "createdAt": {
            "type": "string",
            "description": "RFC 3339 timestamp to indicate the creation date \u0026 time for the resource",
            "example": "2024-05-17T19:17:32+05:30",
            "format": "date-time"
          },
          "id": {
            "type": "string",
            "description": "Id of the resource, which is the same the id returned in the Create \u003cresource\u003e API response",
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "ifsc": {
            "type": "string",
            "description": "ifsc for the settlement bank account",
            "example": "HDFC0000001"
          },
          "merchantId": {
            "type": "string",
            "description": "Id associated with the merchant on our platform",
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "primary": {
            "type": "boolean",
            "description": "indicates if given settlement bank account is primary settlement bank account for merchant",
            "example": true
          }
        },
        "example": {
          "accountHolderName": "deku",
          "accountNumber": "1234567890",
          "accountType": "CURRENT",
          "active": true,
          "beneCode": "1234567890",
          "createdAt": "2024-05-17T19:17:32+05:30",
          "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
          "ifsc": "HDFC0000001",
          "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
          "primary": true
        }
      },
      "SettlementConfiguration": {
        "type": "object",
        "properties": {
          "cycles": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/SettlementCycle" },
            "description": "settlement_cycles",
            "example": [
              {
                "endTime": "1977-01-17T07:19:44Z",
                "settlementTime": "1995-03-19T23:15:19Z",
                "startTime": "2008-11-27T00:50:41Z"
              },
              {
                "endTime": "1977-01-17T07:19:44Z",
                "settlementTime": "1995-03-19T23:15:19Z",
                "startTime": "2008-11-27T00:50:41Z"
              },
              {
                "endTime": "1977-01-17T07:19:44Z",
                "settlementTime": "1995-03-19T23:15:19Z",
                "startTime": "2008-11-27T00:50:41Z"
              },
              {
                "endTime": "1977-01-17T07:19:44Z",
                "settlementTime": "1995-03-19T23:15:19Z",
                "startTime": "2008-11-27T00:50:41Z"
              }
            ]
          },
          "frequency": {
            "type": "string",
            "example": "TPlusOne",
            "enum": ["Instant", "TZero", "TPlusOne", "TPlusTwo", "TPlusFour"]
          },
          "splitsEnabled": { "type": "boolean", "example": true },
          "type": {
            "type": "string",
            "example": "Net",
            "enum": ["Net", "Gross"]
          }
        },
        "example": {
          "cycles": [
            {
              "endTime": "1977-01-17T07:19:44Z",
              "settlementTime": "1995-03-19T23:15:19Z",
              "startTime": "2008-11-27T00:50:41Z"
            },
            {
              "endTime": "1977-01-17T07:19:44Z",
              "settlementTime": "1995-03-19T23:15:19Z",
              "startTime": "2008-11-27T00:50:41Z"
            },
            {
              "endTime": "1977-01-17T07:19:44Z",
              "settlementTime": "1995-03-19T23:15:19Z",
              "startTime": "2008-11-27T00:50:41Z"
            }
          ],
          "frequency": "TPlusOne",
          "splitsEnabled": false,
          "type": "Net"
        },
        "required": ["frequency", "type", "cycles"]
      },
      "SettlementCycle": {
        "type": "object",
        "properties": {
          "endTime": {
            "type": "string",
            "example": "1975-06-12T00:08:33Z",
            "format": "date-time"
          },
          "settlementTime": {
            "type": "string",
            "example": "1974-03-29T10:07:49Z",
            "format": "date-time"
          },
          "startTime": {
            "type": "string",
            "example": "2003-11-17T01:03:31Z",
            "format": "date-time"
          }
        },
        "example": {
          "endTime": "2010-04-02T18:11:12Z",
          "settlementTime": "1973-11-14T09:09:29Z",
          "startTime": "1975-06-18T10:45:10Z"
        }
      },
      "TPVAccountDetailResponse": {
        "type": "object",
        "properties": {
          "IFSC": {
            "type": "string",
            "description": "IFSC code for the account",
            "example": "SBIN0000001"
          },
          "encryptedAccountName": {
            "type": "string",
            "description": "Base64-encoded encrypted account name",
            "example": "5e884898da28047151d0e56f8dc629277"
          },
          "encryptedAccountNumber": {
            "type": "string",
            "description": "Base64-encoded encrypted account number",
            "example": "5e884898da28047151d0e56f8dc629277"
          },
          "hashedAccountName": {
            "type": "string",
            "description": "Base64-encoded hashed account name",
            "example": "5e884898da28047151d0e56f8dc629277"
          },
          "hashedAccountNumber": {
            "type": "string",
            "description": "Base64-encoded hashed account number",
            "example": "5e884898da28047151d0e56f8dc629277"
          },
          "maskedAccountName": {
            "type": "string",
            "description": "Masked account name",
            "example": "R*M*E*S*"
          },
          "maskedAccountNumber": {
            "type": "string",
            "description": "Masked account number",
            "example": "**** **** **** 7890"
          }
        },
        "description": "API response for TPV creation",
        "example": {
          "IFSC": "SBIN0000001",
          "encryptedAccountName": "5e884898da28047151d0e56f8dc629277",
          "encryptedAccountNumber": "5e884898da28047151d0e56f8dc629277",
          "hashedAccountName": "5e884898da28047151d0e56f8dc629277",
          "hashedAccountNumber": "5e884898da28047151d0e56f8dc629277",
          "maskedAccountName": "R*M*E*S*",
          "maskedAccountNumber": "**** **** **** 7890"
        }
      },
      "UpdateMandateResponse": {
        "type": "object",
        "properties": {
          "amountLimit": {
            "type": "integer",
            "description": "Maximum amount for which a mandate transaction can be executed",
            "example": 1000,
            "minimum": 10000,
            "maximum": 2000000000
          },
          "endDate": {
            "type": "string",
            "description": "End date of the mandate",
            "example": "02012006"
          },
          "expireAfter": {
            "type": "integer",
            "description": "Number of minutes after which the mandate update request will expire",
            "default": 2,
            "example": 2,
            "minimum": 2,
            "maximum": 64800
          },
          "id": {
            "type": "string",
            "description": "Id of the mandate request resource",
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "intentLink": {
            "type": "string",
            "example": "upi://mandate?pa=deku040920232@okokaxis\u0026validitystart=31121995\u0026validityend=30122025\u0026am=901.00\u0026amrule=max\u0026recur=one%20time\u0026recurvalue=0\u0026recurtype=on\u0026cu=INR\u0026mc=1234\u0026mode=01\u0026purpose=14\u0026rev=N\u0026block=N\u0026txnType=update\u0026umn=SETUS7mxYHK1A6yXhxJsoKM7yxKqC2r0\u0026tid=SETM3Iij4WQrtEUbOUFkTpQp2EpR5wqy5Ou"
          },
          "mandateId": {
            "type": "string",
            "description": "Id of the mandate resource",
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "merchantId": {
            "type": "string",
            "description": "Id of the merchant who created the mandate",
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "mode": {
            "type": "string",
            "example": "qr",
            "enum": ["collect", "qr", "intent"]
          },
          "qrCode": {
            "type": "string",
            "description": "QR code for the generated intent link in the form of base64 encoded string",
            "example": ""
          },
          "referenceId": {
            "type": "string",
            "description": "Merchant reference id of the mandate",
            "example": "ABC1234789",
            "minLength": 5,
            "maxLength": 50
          },
          "status": {
            "type": "string",
            "example": "pending",
            "enum": ["pending", "initiated", "success", "failed"]
          },
          "txnId": {
            "type": "string",
            "description": "NPCI transaction id",
            "example": "BTTZrc5gDFkuCr3n3I0ey4aNtzLOLR7K7aR",
            "pattern": "^[a-zA-Z0-9]*$",
            "minLength": 35,
            "maxLength": 35
          },
          "umn": {
            "type": "string",
            "description": "Unique mandate number",
            "example": "c27f5fc30d344e9594fce0afa34f8859@mypsp"
          }
        },
        "example": {
          "amountLimit": 1000,
          "endDate": "02012006",
          "expireAfter": 2,
          "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
          "intentLink": "upi://mandate?pa=deku040920232@okokaxis\u0026validitystart=31121995\u0026validityend=30122025\u0026am=901.00\u0026amrule=max\u0026recur=one%20time\u0026recurvalue=0\u0026recurtype=on\u0026cu=INR\u0026mc=1234\u0026mode=01\u0026purpose=14\u0026rev=N\u0026block=N\u0026txnType=update\u0026umn=SETUS7mxYHK1A6yXhxJsoKM7yxKqC2r0\u0026tid=SETM3Iij4WQrtEUbOUFkTpQp2EpR5wqy5Ou",
          "mandateId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
          "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
          "mode": "qr",
          "qrCode": "",
          "referenceId": "ABC1234789",
          "status": "pending",
          "txnId": "BTTZrc5gDFkuCr3n3I0ey4aNtzLOLR7K7aR",
          "umn": "c27f5fc30d344e9594fce0afa34f8859@mypsp"
        }
      },
      "UpdateMockRefundStatusRequestBody": {
        "type": "object",
        "properties": {
          "mockStatus": {
            "type": "string",
            "description": "status expected to mock",
            "example": "success",
            "enum": ["success", "failed"]
          }
        },
        "example": { "mockStatus": "success" },
        "required": ["mockStatus"]
      },
      "UpdateSettlementBankAccountStatusRequestBody": {
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean",
            "description": "defines the validity of the settlement bank account",
            "example": true
          }
        },
        "example": { "active": true },
        "required": ["active"]
      },
      "UpdateStatusRequestBody": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "updated status of the VPA",
            "example": "active",
            "enum": ["active", "inactive"]
          }
        },
        "example": { "status": "active" },
        "required": ["status"]
      },
      "UpdateTxnStatusRequestBody": {
        "type": "object",
        "properties": {
          "transactionStatus": {
            "type": "string",
            "description": "Current Transaction Status of the Merchant",
            "example": "active",
            "enum": ["active", "inactive"]
          }
        },
        "example": { "transactionStatus": "active" },
        "required": ["transactionStatus"]
      },
      "VerifyCustomerVpaResponse": {
        "type": "object",
        "properties": {
          "createdAt": {
            "type": "string",
            "description": "ISO 8601 timestamp to indicate the creation date \u0026 time for the verification request",
            "example": "2024-05-17T19:17:32+05:30",
            "format": "date-time"
          },
          "customerVpa": {
            "type": "string",
            "description": "UPI id of the customer that needs to be verified",
            "example": "ram@okhdfc",
            "pattern": "^[a-zA-Z0-9.-]*@[a-zA-Z0-9.-]*$"
          },
          "id": {
            "type": "string",
            "description": "ID of the request",
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "merchantId": {
            "type": "string",
            "description": "Id associated with the merchant on our platform",
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "referenceId": {
            "type": "string",
            "description": "Id to be used by merchant to identify the verifcation request on our platform",
            "example": "1240689979139556557",
            "pattern": "^[a-zA-Z0-9]*$",
            "minLength": 1,
            "maxLength": 50
          },
          "status": {
            "type": "string",
            "description": "status defining the validity of the customer vpa",
            "example": "pending",
            "enum": ["pending", "valid", "invalid", "failed"]
          }
        },
        "example": {
          "createdAt": "2024-05-17T19:17:32+05:30",
          "customerVpa": "ram@okhdfc",
          "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
          "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
          "referenceId": "1240689979139556557",
          "status": "pending"
        }
      },
      "VerifyRequestBody": {
        "type": "object",
        "properties": {
          "customerVpa": {
            "type": "string",
            "description": "UPI id of the customer that needs to be verified",
            "example": "aadhitya@okhdfc",
            "pattern": "^[a-zA-Z0-9.-]*@[a-zA-Z0-9.-]*$"
          },
          "referenceId": {
            "type": "string",
            "description": "Id to be used by merchant to identify the verifcation request on our platform",
            "example": "1240689979139556557",
            "pattern": "^[a-zA-Z0-9]*$",
            "minLength": 1,
            "maxLength": 50
          }
        },
        "example": {
          "customerVpa": "aadhitya@okhdfc",
          "referenceId": "1240689979139556557"
        },
        "required": ["customerVpa"]
      },
      "VpaMerchantDetails": {
        "type": "object",
        "properties": {
          "brandName": {
            "type": "string",
            "description": "Brand name or Consumer facing name",
            "example": "Setu",
            "pattern": "^[a-zA-Z0-9 ]+$",
            "minLength": 1,
            "maxLength": 99
          },
          "businessType": {
            "type": "string",
            "description": "Incorporation type",
            "example": "PROPRIETARY",
            "enum": [
              "PROPRIETARY",
              "PARTNERSHIP",
              "PRIVATE",
              "PUBLIC",
              "OTHERS"
            ]
          },
          "franchiseName": {
            "type": "string",
            "description": "Franchise name",
            "example": "Setu UPI",
            "pattern": "^[a-zA-Z0-9 ]+$"
          },
          "genre": {
            "type": "string",
            "description": "Online / Offline",
            "example": "ONLINE",
            "enum": ["ONLINE", "OFFLINE"]
          },
          "legalName": {
            "type": "string",
            "description": "Legal name as per incorporation documents",
            "example": "BrokenTusk Technologies Pvt Ltd",
            "pattern": "^[a-zA-Z0-9 ]+$",
            "minLength": 1,
            "maxLength": 99
          },
          "mcc": {
            "type": "string",
            "description": "Category of business operation",
            "example": "5432"
          },
          "merchantType": {
            "type": "string",
            "description": "merchant type",
            "default": "large",
            "example": "large",
            "enum": ["small", "large"]
          },
          "onboardingType": {
            "type": "string",
            "description": "onboarding type",
            "default": "aggregator",
            "example": "aggregator",
            "enum": ["bank", "aggregator"]
          }
        },
        "example": {
          "brandName": "Setu",
          "businessType": "PROPRIETARY",
          "franchiseName": "Setu UPI",
          "genre": "ONLINE",
          "legalName": "BrokenTusk Technologies Pvt Ltd",
          "mcc": "5432",
          "merchantType": "large",
          "onboardingType": "aggregator"
        }
      },
      "VpaResponse": {
        "type": "object",
        "properties": {
          "createdAt": {
            "type": "string",
            "description": "RFC 3339 timestamp to indicate the creation date \u0026 time for the resource",
            "example": "2024-05-17T19:17:32+05:30",
            "format": "date-time"
          },
          "id": {
            "type": "string",
            "description": "Id of the resource, which is the same the id returned in the Create \u003cresource\u003e API response",
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "merchantId": {
            "type": "string",
            "description": "Id associated with the merchant on our platform",
            "example": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "referenceId": {
            "type": "string",
            "description": "reference id in the merchant's system",
            "example": "1240689979139556557",
            "pattern": "^[a-zA-Z0-9]*$",
            "minLength": 1,
            "maxLength": 50
          },
          "status": {
            "type": "string",
            "description": "indicates the validity of vpa",
            "example": "active",
            "enum": ["active", "inactive"]
          },
          "verificationStatus": {
            "type": "string",
            "description": "indicates if the vpa is verified or not. Could be one of (verified, pending, failed)",
            "example": "verified",
            "enum": ["verified", "pending", "failed"]
          },
          "vpa": {
            "type": "string",
            "description": "UPI id of the merchant to be used to collect payments",
            "example": "fastestupi@pineaxis",
            "pattern": "^[a-z0-9.-]*@[a-z]*$"
          }
        },
        "example": {
          "createdAt": "2024-05-17T19:17:32+05:30",
          "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
          "merchantId": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
          "referenceId": "1240689979139556557",
          "status": "active",
          "verificationStatus": "verified",
          "vpa": "fastestupi@pineaxis"
        }
      }
    },
    "securitySchemes": {
      "jwt_header_Authorization": {
        "type": "http",
        "description": "Secures endpoint by requiring a valid JWT token.",
        "scheme": "bearer"
      }
    }
  },
  "tags": [
    {
      "name": "Collect",
      "description": "The collect service handles collect request related operations"
    },
    {
      "name": "Customer VPA",
      "description": "The customer-vpa service handles customer / payer vpa verification related operations"
    },
    {
      "name": "DQR",
      "description": "DQR service enables a merchant to create a one time paymentlink/ qr, which the customer can use to make a payment"
    },
    {
      "name": "Mandates",
      "description": "The mandates service exposes methods to maintain the life cycle of a mandate"
    },
    { "name": "Offline QR", "description": "Offline QR APIs" },
    { "name": "Short link", "description": "Shortlink APIs" },
    { "name": "SQR", "description": "Static QR APIs" },
    { "name": "TPV" },
    { "name": "TPV Plus" },
    {
      "name": "VPA",
      "description": "The vpa service handles vpa related operations"
    },
    {
      "name": "Merchant",
      "description": "The merchant service handles merchant related operations"
    },
    {
      "name": "Payments",
      "description": "The payments service handles payment related operations"
    },
    {
      "name": "Refund",
      "description": "The refund service handles refund related operations"
    },
    {
      "name": "Settlement Accounts",
      "description": "The settlement bank account service handles settlement bank account related operations"
    }
  ]
}
