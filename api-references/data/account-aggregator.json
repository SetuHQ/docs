{
  "openapi": "3.0.2",
  "info": {
    "description": "API spec for Setu AA gateway",
    "termsOfService": "",
    "contact": {
      "email": "aa@setu.co"
    },
    "title": "AA Gateway",
    "version": "v2"
  },
  "servers": [
    {
      "url": "https://fiu-sandbox.setu.co/",
      "description": "Sandbox"
    },
    {
      "url": "https://fiu.setu.co",
      "description": "Production"
    }
  ],
  "tags": [
    {
      "name": "AA participants APIs",
      "description": "APIs to fetch Account Aggregator ecosystem participants data i.e FIPs, FIUs or AAs"
    },
    {
      "name": "Consent V2 APIs",
      "description": "APIs for Consent management"
    },
    {
      "name": "FI data fetch V2 APIs",
      "description": "APIs for FI data flow"
    }
  ],
  "paths": {
    "/v2/fips": {
      "get": {
        "parameters": [
          {
            "in": "query",
            "name": "status",
            "required": false,
            "description": "Status of the FIP by which the FIPs are to be filtered",
            "schema": {
              "type": "string",
              "enum": [
                "ACTIVE",
                "INACTIVE",
                "TEMPORARILY_INACTIVE"
              ]
            }
          }
        ],
        "responses": {
          "400": {
            "$ref": "#/components/responses/BAD_REQUEST"
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FIPResponse"
                }
              }
            }
          }
        },
        "summary": "Get FIP list",
        "description": "This API is used to get the list of FIPs.",
        "tags": [
          "AA participants APIs"
        ]
      }
    },
    "/v2/fips/{fip_id}": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FIPResponse"
                }
              }
            }
          }
        },
        "summary": "Get FIP by ID",
        "description": "This API is used to get a FIP by its ID.",
        "tags": [
          "AA participants APIs"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "fip_id",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1
            }
          }
        ]
      }
    },
    "/v2/consents": {
      "post": {
        "parameters": [
          {
            "in": "header",
            "name": "x-client_id",
            "required": true,
            "description": "Client ID for authentication",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "x-client-secret",
            "required": true,
            "description": "Client secret for authentication",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "x-product-instance-id",
            "required": true,
            "description": "Product instance ID of FIU",
            "schema": {
              "type": "string",
              "minLength": 1
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConsentResponseV2"
                }
              }
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateConsentRequestV2"
              }
            }
          }
        },
        "summary": "Create consent",
        "description": "This API is intended for AA Client to request generation of digitally signed consent artefacts. The customer has to use the AA application to select accounts and approve consent generation. Once the customer approves the consent request on the AA application, AA generates the digitally signed consent artefacts. Note - The AA Client never sees the account of the customer or directly participates in consent generation.\n\nNote: \u201cRequest Body Example Value\u201d and \u201cResponses Example Value\u201d given below is for illustrative purposes only.",
        "tags": [
          "Consent V2 APIs"
        ]
      }
    },
    "/v2/consents/{request_id}": {
      "get": {
        "parameters": [
          {
            "in": "query",
            "name": "expanded",
            "required": false,
            "description": "Get expanded response",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "in": "header",
            "name": "Authorization",
            "required": true,
            "description": "Authorization Bearer token",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "x-product-instance-id",
            "required": true,
            "description": "Product instance ID of FIU",
            "schema": {
              "type": "string",
              "minLength": 1
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConsentResponseV2"
                }
              }
            }
          }
        },
        "summary": "Get a consent",
        "description": "This API gets consent information using request ID.",
        "tags": [
          "Consent V2 APIs"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "request_id",
          "required": true,
          "schema": {
            "type": "string",
            "minLength": 1
          }
        }
      ]
    },
    "/v2/consents/{request_id}/revoke": {
      "post": {
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "required": true,
            "description": "Authorization Bearer token",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "x-product-instance-id",
            "required": true,
            "description": "Product instance ID of FIU",
            "schema": {
              "type": "string",
              "minLength": 1
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RevokeConsentResponse"
                }
              }
            }
          }
        },
        "summary": "Revoke a consent",
        "description": "This API revokes a consent based on request ID.",
        "tags": [
          "Consent V2 APIs"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "request_id",
          "required": true,
          "schema": {
            "type": "string",
            "minLength": 1
          }
        }
      ]
    },
    "/v2/consents/collection": {
      "post": {
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "required": true,
            "description": "Authorization Bearer token",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "x-product-instance-id",
            "required": true,
            "description": "Product instance ID of FIU",
            "schema": {
              "type": "string",
              "minLength": 1
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MultiConsentResponse"
                }
              }
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MultiConsentRequest"
              }
            }
          }
        },
        "summary": "Create multi consent",
        "tags": [
          "Consent V2 APIs"
        ]
      }
    },
    "/v2/consents/collection/{id}": {
      "get": {
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "required": true,
            "description": "Authorization Bearer token",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "x-product-instance-id",
            "required": true,
            "description": "Product instance ID of FIU",
            "schema": {
              "type": "string",
              "minLength": 1
            }
          }
        ],
        "responses": {
          "400": {
            "$ref": "#/components/responses/BAD_REQUEST"
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MultiConsentResponse"
                }
              }
            }
          }
        },
        "summary": "Get multi consent",
        "tags": [
          "Consent V2 APIs"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string",
            "minLength": 1
          }
        }
      ]
    },
    "/v2/consents/{consent_id}/fetch/status": {
      "get": {
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "required": true,
            "description": "Authorization Bearer token",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "x-product-instance-id",
            "required": true,
            "description": "Product instance ID of FIU",
            "schema": {
              "type": "string",
              "minLength": 1
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "OK"
          }
        },
        "summary": "Get last fetch status",
        "description": "This API gets the last data fetch status for a consent",
        "tags": [
          "Consent V2 APIs"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "consent_id",
          "required": true,
          "schema": {
            "type": "string",
            "minLength": 1
          }
        }
      ]
    },
    "/v2/sessions": {
      "post": {
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "required": true,
            "description": "Authorization Bearer token",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "x-product-instance-id",
            "required": true,
            "description": "Product instance ID of FIU",
            "schema": {
              "type": "string",
              "minLength": 1
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FIDataFetchResponseV2"
                }
              }
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateFIDataFetchRequestV2"
              }
            }
          }
        },
        "summary": "Create FI data fetch",
        "description": "This API is used to initiate a data fetch for FI data.",
        "tags": [
          "FI data fetch V2 APIs"
        ]
      }
    },
    "/v2/sessions/{session_id}": {
      "get": {
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "required": true,
            "description": "Authorization Bearer token",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "x-product-instance-id",
            "required": true,
            "description": "Product instance ID of FIU",
            "schema": {
              "type": "string",
              "minLength": 1
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FIDataFetchResponseV2"
                }
              }
            }
          }
        },
        "summary": "Get FI data",
        "description": "This API gets consent information using request ID.",
        "tags": [
          "FI data fetch V2 APIs"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "session_id",
          "required": true,
          "schema": {
            "type": "string",
            "minLength": 1
          }
        }
      ]
    },
    "/v2/sessions/refresh/{session_id}": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "session_id",
            "required": true,
            "description": "The unique identifier of the session to be refreshed",
            "schema": {
              "type": "string",
              "minLength": 1
            }
          },
          {
            "in": "query",
            "name": "restart",
            "required": false,
            "description": "Optional flag to indicate whether to restart the session. Defaults to `false` if not provided.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataRefreshSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataRefreshErrorResponse"
                }
              }
            }
          }
        },
        "summary": "Refresh Data Pull",
        "description": "This API refreshes an existing FI data session using the session ID. Optionally, the session can be restarted if the `restart` query parameter is provided.",
        "tags": [
          "FI data fetch V2 APIs"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "session_id",
            "required": true,
            "description": "The unique identifier of the session to be refreshed",
            "schema": {
              "type": "string",
              "minLength": 1
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RefreshSessionRequest"
              },
              "example": {
                "dataRange": {
                  "from": "2023-07-01T00:00:00Z",
                  "to": "2024-11-02T00:00:00Z"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataRefreshSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataRefreshErrorResponse"
                }
              }
            }
          }
        },
        "summary": "Data fetch for custom range",
        "description": "This API refreshes an existing FI data session using the session ID and allows specifying a custom data range for the session.",
        "tags": [
          "FI data fetch V2 APIs"
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "DataRefreshSuccessResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Confirmation message for data refresh initiation.",
            "example": "Data refresh for the consent initiated successfully"
          },
          "status": {
            "type": "string",
            "enum": [
              "pending",
              "completed",
              "failed"
            ],
            "description": "Current status of the data refresh request."
          },
          "traceId": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier for the request trace."
          }
        },
        "required": [
          "message",
          "status",
          "traceId"
        ]
      },
      "DataRefreshErrorResponse": {
        "type": "object",
        "properties": {
          "traceId": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier for the request trace."
          },
          "errorCode": {
            "type": "string",
            "description": "Error code describing the issue."
          },
          "errorMsg": {
            "type": "string",
            "description": "Detailed error message explaining the reason for failure."
          }
        },
        "required": [
          "traceId",
          "errorCode",
          "errorMsg"
        ]
      },
      "RefreshSessionRequest": {
        "type": "object",
        "properties": {
          "dataRange": {
            "type": "object",
            "properties": {
              "from": {
                "type": "string",
                "format": "date-time",
                "description": "The start of the data range for the refresh request."
              },
              "to": {
                "type": "string",
                "format": "date-time",
                "description": "The end of the data range for the refresh request."
              }
            },
            "required": [
              "from",
              "to"
            ],
            "description": "Defines the data range for the session refresh."
          }
        },
        "required": [
          "dataRange"
        ],
        "example": {
          "dataRange": {
            "from": "2023-07-01T00:00:00Z",
            "to": "2024-11-02T00:00:00Z"
          }
        }
      },
      "FIDataFetchResponseV2": {
        "type": "object",
        "properties": {
          "fips": {
            "type": "array",
            "nullable": true,
            "description": "Array of accounts for a particular fip",
            "items": {
              "$ref": "#/components/schemas/FIFetchDecrpytedResponseFIItem1"
            }
          },
          "status": {
            "type": "string",
            "enum": [
              "ACTIVE",
              "PENDING",
              "COMPLETED",
              "EXPIRED",
              "FAILED",
              "PARTIAL"
            ],
            "description": "Status for this data fetch session"
          },
          "consentId": {
            "type": "string",
            "format": "uuid",
            "description": "Consent identifier for this data fetch request."
          },
          "dataRange": {
            "description": "Time range for which the data is being requested",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConsentsRequestConsentDetailFIDataRange"
              }
            ]
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Request identifier to fetch the status and data."
          },
          "format": {
            "type": "string",
            "enum": [
              "xml",
              "json"
            ],
            "description": "Format of decrypted data"
          }
        },
        "required": [
          "consentId",
          "dataRange",
          "fips",
          "format",
          "id",
          "status"
        ]
      },
      "ConsentsRequestConsentDetailFIDataRange": {
        "type": "object",
        "properties": {
          "to": {
            "type": "string",
            "format": "date-time",
            "description": "Selects the ending date-time from where the financial information is to be end. It is a mandatory field only if consentTypes includes ENUM TRANSACTIONS in consent parameters."
          },
          "from": {
            "type": "string",
            "format": "date-time",
            "description": "Selects the starting date-time from where the financial information is to be start. It is a mandatory field only if consentTypes includes ENUM TRANSACTIONS in consent parameters."
          }
        },
        "required": [
          "from",
          "to"
        ]
      },
      "FIFetchDecrpytedResponseFIItem1": {
        "type": "object",
        "properties": {
          "fipID": {
            "type": "string"
          },
          "accounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FIFetchDecrpytedResponseFIItemDataItem1"
            }
          }
        },
        "required": [
          "accounts",
          "fipID"
        ]
      },
      "FIFetchDecrpytedResponseFIItemDataItem1": {
        "type": "object",
        "properties": {
          "maskedAccNumber": {
            "type": "string"
          },
          "data": {
            "description": "Contains the decrypted financial information",
            "allOf": [
              {
                "$ref": "#/components/schemas/FIFetchDecrpytedResponseFIItemDataItemData"
              }
            ]
          },
          "linkRefNumber": {
            "type": "string"
          },
          "FIstatus": {
            "type": "string"
          }
        },
        "required": [
          "FIstatus",
          "data",
          "linkRefNumber",
          "maskedAccNumber"
        ]
      },
      "FIFetchDecrpytedResponseFIItemDataItemData": {
        "type": "object",
        "properties": {},
        "oneOf": [
          {
            "$ref": "#/components/schemas/DepositJSON"
          },
          {
            "$ref": "#/components/schemas/TermDepositJSON"
          },
          {
            "$ref": "#/components/schemas/RecurringDepositJSON"
          },
          {
            "$ref": "#/components/schemas/InsurancePoliciesJSON"
          },
          {
            "$ref": "#/components/schemas/InsurancePoliciesJSON"
          },
          {
            "$ref": "#/components/schemas/EquitiesJSON"
          },
          {
            "$ref": "#/components/schemas/MutualFundsJSON"
          },
          {
            "$ref": "#/components/schemas/MutualFundsJSON"
          },
          {
            "$ref": "#/components/schemas/GST"
          },
          {
            "$ref": "#/components/schemas/ETFJSON"
          },
          {
            "$ref": "#/components/schemas/XML"
          }
        ],
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "deposit": "#/components/schemas/DepositJSON",
            "term_deposit": "#/components/schemas/TermDepositJSON",
            "recurring_deposit": "#/components/schemas/RecurringDepositJSON",
            "insurance_policies": "#/components/schemas/InsurancePoliciesJSON",
            "insurance": "#/components/schemas/InsurancePoliciesJSON",
            "equities": "#/components/schemas/EquitiesJSON",
            "mutual_funds": "#/components/schemas/MutualFundsJSON",
            "mutualfunds": "#/components/schemas/MutualFundsJSON",
            "gstr1_3b": "#/components/schemas/GST",
            "etf": "#/components/schemas/ETFJSON",
            "xml": "#/components/schemas/XML"
          }
        }
      },
      "XML": {
        "type": "object",
        "properties": {
          "xml": {
            "type": "string"
          }
        }
      },
      "ETFJSON": {
        "type": "object",
        "properties": {
          "account": {
            "$ref": "#/components/schemas/ETFJSONAccount"
          }
        }
      },
      "ETFJSONAccount": {
        "type": "object",
        "properties": {
          "linkedAccRef": {
            "type": "string"
          },
          "maskedAccNumber": {
            "type": "string"
          },
          "maskedDematID": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "profile": {
            "$ref": "#/components/schemas/ETFJSONAccountProfile"
          },
          "summary": {
            "$ref": "#/components/schemas/ETFJSONAccountSummary"
          },
          "transactions": {
            "$ref": "#/components/schemas/ETFJSONAccountTransactions"
          }
        }
      },
      "ETFJSONAccountTransactions": {
        "type": "object",
        "properties": {
          "startDate": {
            "type": "string"
          },
          "endDate": {
            "type": "string"
          },
          "transaction": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ETFJSONAccountTransactionsTransaction"
            }
          }
        }
      },
      "ETFJSONAccountTransactionsTransaction": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "string"
          },
          "brokerCode": {
            "type": "string"
          },
          "isin": {
            "type": "string"
          },
          "isinDescription": {
            "type": "string"
          },
          "narration": {
            "type": "string"
          },
          "nav": {
            "type": "string"
          },
          "transactionDateTime": {
            "type": "string"
          },
          "txnId": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "units": {
            "type": "string"
          }
        }
      },
      "ETFJSONAccountSummary": {
        "type": "object",
        "properties": {
          "investment": {
            "$ref": "#/components/schemas/ETFJSONAccountSummaryHoldings"
          },
          "currentValue": {
            "type": "string"
          },
          "investmentValue": {
            "type": "string"
          }
        }
      },
      "ETFJSONAccountSummaryHoldings": {
        "type": "object",
        "properties": {
          "holdings": {
            "$ref": "#/components/schemas/ETFJSONAccountSummaryHoldingsHolding"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "ETFJSONAccountSummaryHoldingsHolding": {
        "type": "object",
        "properties": {
          "holding": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ETFJSONAccountSummaryHoldingsHolding"
            }
          }
        }
      },
      "ETFJSONAccountProfile": {
        "type": "object",
        "properties": {
          "holders": {
            "$ref": "#/components/schemas/ETFJSONAccountProfileHolders"
          }
        }
      },
      "ETFJSONAccountProfileHolders": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "holder": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ETFJSONAccountProfileHoldersHolder"
            }
          }
        }
      },
      "ETFJSONAccountProfileHoldersHolder": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string"
          },
          "kycCompliance": {
            "type": "string"
          },
          "dob": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "landline": {
            "type": "string"
          },
          "mobile": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "nominee": {
            "type": "string"
          },
          "pan": {
            "type": "string"
          },
          "dematId": {
            "type": "string"
          },
          "boId": {
            "type": "string"
          },
          "dpId": {
            "type": "string"
          },
          "brokerName": {
            "type": "string"
          }
        }
      },
      "GST": {
        "type": "object",
        "properties": {
          "account": {
            "$ref": "#/components/schemas/Account"
          }
        }
      },
      "Account": {
        "type": "object",
        "properties": {
          "linkedAccRef": {
            "type": "string"
          },
          "maskedGstinNumber": {
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "profile": {
            "$ref": "#/components/schemas/Profile"
          },
          "transactions": {
            "$ref": "#/components/schemas/Transactions"
          }
        }
      },
      "Transactions": {
        "type": "object",
        "properties": {
          "endt": {
            "type": "string"
          },
          "strdt": {
            "type": "string"
          },
          "gstr1Details": {
            "$ref": "#/components/schemas/Gstr1DetailsSchema1"
          },
          "gstr3bDetails": {
            "$ref": "#/components/schemas/Gstr3bDetails"
          }
        }
      },
      "Gstr3bDetails": {
        "type": "object",
        "properties": {
          "gstr3b": {
            "$ref": "#/components/schemas/Gstr3b"
          }
        }
      },
      "Gstr3b": {
        "type": "object",
        "properties": {
          "retPrd": {
            "type": "string"
          },
          "dof": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "filingFrequency": {
            "type": "string"
          },
          "supDetails": {
            "$ref": "#/components/schemas/SupDetail"
          },
          "supInter": {
            "$ref": "#/components/schemas/SupInterSchemaWrapper"
          },
          "ecoDtls": {
            "$ref": "#/components/schemas/EcoSup"
          },
          "itcElg": {
            "$ref": "#/components/schemas/ItcEligible"
          },
          "inwardSup": {
            "$ref": "#/components/schemas/ISupDetails"
          },
          "intrLtfee": {
            "$ref": "#/components/schemas/IntrLtfee"
          },
          "txPmt": {
            "$ref": "#/components/schemas/TxPyList"
          },
          "pdcashDtls": {
            "$ref": "#/components/schemas/PdCashLists"
          }
        }
      },
      "PdCashLists": {
        "type": "object",
        "properties": {
          "pdcashList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PdcashDetails"
            }
          },
          "pditc": {
            "$ref": "#/components/schemas/Pditc"
          }
        }
      },
      "Pditc": {
        "type": "object",
        "properties": {
          "transDesc": {
            "type": "string"
          },
          "iPdi": {
            "type": "string"
          },
          "iPdc": {
            "type": "string"
          },
          "iPds": {
            "type": "string"
          },
          "cPdi": {
            "type": "string"
          },
          "cPdc": {
            "type": "string"
          },
          "sPdi": {
            "type": "string"
          },
          "sPds": {
            "type": "string"
          },
          "csPdcs": {
            "type": "string"
          }
        }
      },
      "PdcashDetails": {
        "type": "object",
        "properties": {
          "pdcash": {
            "$ref": "#/components/schemas/Pdcash"
          }
        }
      },
      "Pdcash": {
        "type": "object",
        "properties": {
          "transDesc": {
            "type": "string"
          },
          "ipd": {
            "type": "string"
          },
          "cpd": {
            "type": "string"
          },
          "spd": {
            "type": "string"
          },
          "cspd": {
            "type": "string"
          },
          "iIntrpd": {
            "type": "string"
          },
          "cIntrpd": {
            "type": "string"
          },
          "sIntrpd": {
            "type": "string"
          },
          "csIntrpd": {
            "type": "string"
          },
          "cLfeepd": {
            "type": "string"
          },
          "sLfeepd": {
            "type": "string"
          }
        }
      },
      "TxPyList": {
        "type": "object",
        "properties": {
          "txPyList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TxPy"
            }
          }
        }
      },
      "TxPy": {
        "type": "object",
        "properties": {
          "txPy": {
            "$ref": "#/components/schemas/TxPy"
          }
        }
      },
      "IntrLtfee": {
        "type": "object",
        "properties": {
          "intrDetails": {
            "$ref": "#/components/schemas/IntrDetails"
          },
          "ltfeeDetails": {
            "$ref": "#/components/schemas/IntrDetails"
          }
        }
      },
      "IntrDetails": {
        "type": "object",
        "properties": {
          "iamt": {
            "type": "string"
          },
          "camt": {
            "type": "string"
          },
          "samt": {
            "type": "string"
          },
          "csamt": {
            "type": "string"
          }
        }
      },
      "ISupDetails": {
        "type": "object",
        "properties": {
          "isupDetailsList": {
            "$ref": "#/components/schemas/IsupDetailsList"
          }
        }
      },
      "IsupDetailsList": {
        "type": "object",
        "properties": {
          "isupDetails": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IsupDetails"
            }
          }
        }
      },
      "IsupDetails": {
        "type": "object",
        "properties": {
          "ty": {
            "type": "string"
          },
          "inter": {
            "type": "string"
          },
          "intra": {
            "type": "string"
          }
        }
      },
      "ItcEligible": {
        "type": "object",
        "properties": {
          "itcAvlList": {
            "$ref": "#/components/schemas/ItcAvlList"
          },
          "itcRevList": {
            "$ref": "#/components/schemas/ItcRevList"
          },
          "itcNet": {
            "$ref": "#/components/schemas/ItcRev"
          },
          "itcInelgList": {
            "$ref": "#/components/schemas/ItcInelgList"
          }
        }
      },
      "ItcInelgList": {
        "type": "object",
        "properties": {
          "itcInelg": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ItcRev"
            }
          }
        }
      },
      "ItcRev": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "iamt": {
            "type": "string"
          },
          "camt": {
            "type": "string"
          },
          "samt": {
            "type": "string"
          },
          "csamt": {
            "type": "string"
          }
        }
      },
      "ItcRevList": {
        "type": "object",
        "properties": {
          "itcRev": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ItcRev"
            }
          }
        }
      },
      "ItcAvlList": {
        "type": "object",
        "properties": {
          "itcAvl": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ItcAvl"
            }
          }
        }
      },
      "ItcAvl": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "iamt": {
            "type": "string"
          },
          "camt": {
            "type": "string"
          },
          "samt": {
            "type": "string"
          },
          "csamt": {
            "type": "string"
          }
        }
      },
      "EcoSup": {
        "type": "object",
        "properties": {
          "ecoSup": {
            "$ref": "#/components/schemas/EcoSup"
          },
          "ecoRegSup": {
            "$ref": "#/components/schemas/EcoSup"
          }
        }
      },
      "SupInterSchemaWrapper": {
        "type": "object",
        "properties": {
          "unregDetailsList": {
            "$ref": "#/components/schemas/SupInter"
          },
          "compDetailsList": {
            "$ref": "#/components/schemas/SupInter"
          },
          "uinDetailsList": {
            "$ref": "#/components/schemas/SupInter"
          }
        }
      },
      "SupInter": {
        "type": "object",
        "properties": {
          "unregDetails": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SupInterDetails"
            }
          },
          "compDetails": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SupInterDetails"
            }
          },
          "uinDetails": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SupInterDetails"
            }
          }
        }
      },
      "SupInterDetails": {
        "type": "object",
        "properties": {
          "txval": {
            "type": "string"
          },
          "iamt": {
            "type": "string"
          },
          "pos": {
            "type": "string"
          }
        }
      },
      "SupDetail": {
        "type": "object",
        "properties": {
          "osupDet": {
            "$ref": "#/components/schemas/SupDetails"
          },
          "osupZero": {
            "$ref": "#/components/schemas/SupDetails"
          },
          "osupNilExmp": {
            "$ref": "#/components/schemas/SupDetails"
          },
          "isupRev": {
            "$ref": "#/components/schemas/SupDetails"
          },
          "osupNongst": {
            "$ref": "#/components/schemas/SupDetails"
          }
        }
      },
      "SupDetails": {
        "type": "object",
        "properties": {
          "txval": {
            "type": "string"
          },
          "iamt": {
            "type": "string"
          },
          "camt": {
            "type": "string"
          },
          "samt": {
            "type": "string"
          },
          "csamt": {
            "type": "string"
          }
        }
      },
      "Gstr1DetailsSchema1": {
        "type": "object",
        "properties": {
          "gstr1": {
            "$ref": "#/components/schemas/Gstr1Details"
          }
        }
      },
      "Gstr1Details": {
        "type": "object",
        "properties": {
          "dof": {
            "type": "string"
          },
          "filingFrequency": {
            "type": "string"
          },
          "retPrd": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "b2bDtls": {
            "$ref": "#/components/schemas/B2B"
          }
        }
      },
      "B2B": {
        "type": "object",
        "properties": {
          "b2b": {
            "$ref": "#/components/schemas/B2B"
          }
        }
      },
      "Profile": {
        "type": "object",
        "properties": {
          "businessDetails": {
            "$ref": "#/components/schemas/BusinessDetails"
          },
          "placeofBusiness": {
            "$ref": "#/components/schemas/PlaceofBusiness"
          }
        }
      },
      "PlaceofBusiness": {
        "type": "object",
        "properties": {
          "address": {
            "$ref": "#/components/schemas/Address"
          },
          "natureOfBusinessList": {
            "$ref": "#/components/schemas/NatureOfBusinessList"
          }
        }
      },
      "NatureOfBusinessList": {
        "type": "object",
        "properties": {
          "ntr": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "Address": {
        "type": "object",
        "properties": {
          "bnm": {
            "type": "string"
          },
          "bno": {
            "type": "string"
          },
          "dst": {
            "type": "string"
          },
          "flno": {
            "type": "string"
          },
          "loc": {
            "type": "string"
          },
          "pncd": {
            "type": "string"
          },
          "st": {
            "type": "string"
          },
          "stcd": {
            "type": "string"
          }
        }
      },
      "BusinessDetails": {
        "type": "object",
        "properties": {
          "apprvdt": {
            "type": "string"
          },
          "lgnm": {
            "type": "string"
          },
          "dty": {
            "type": "string"
          },
          "iscmp": {
            "type": "string"
          },
          "sts": {
            "type": "string"
          },
          "trdnm": {
            "type": "string"
          },
          "categoryList": {
            "$ref": "#/components/schemas/CategoryList"
          }
        }
      },
      "CategoryList": {
        "type": "object",
        "properties": {
          "cat": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "MutualFundsJSON": {
        "type": "object",
        "properties": {
          "account": {
            "$ref": "#/components/schemas/MutualFundJSON"
          }
        }
      },
      "MutualFundJSON": {
        "type": "object",
        "properties": {
          "linkedAccRef": {
            "type": "string"
          },
          "maskedAccNumber": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "maskedDematID": {
            "type": "string"
          },
          "maskedFolioNo": {
            "type": "string"
          },
          "profile": {
            "$ref": "#/components/schemas/MutualFundJSONSchemaProfile"
          },
          "summary": {
            "$ref": "#/components/schemas/MutualFundJSONSchemaSummary"
          },
          "transactions": {
            "$ref": "#/components/schemas/MutualFundJSONSchemaTransactions"
          }
        }
      },
      "MutualFundJSONSchemaTransactions": {
        "type": "object",
        "properties": {
          "startDate": {
            "type": "string"
          },
          "endDate": {
            "type": "string"
          },
          "transaction": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/MutualFundJSONSchemaTransactionsTransaction"
            }
          }
        }
      },
      "MutualFundJSONSchemaTransactionsTransaction": {
        "type": "object",
        "properties": {
          "amc": {
            "type": "string"
          },
          "registrar": {
            "type": "string"
          },
          "schemeCode": {
            "type": "string"
          },
          "schemePlan": {
            "type": "string"
          },
          "isin": {
            "type": "string"
          },
          "amfiCode": {
            "type": "string"
          },
          "ucc": {
            "type": "string"
          },
          "amount": {
            "type": "string"
          },
          "nav": {
            "type": "string"
          },
          "navDate": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "lock-inFlag": {
            "type": "string"
          },
          "lock-inDays": {
            "type": "string"
          },
          "mode": {
            "type": "string"
          },
          "narration": {
            "type": "string"
          },
          "txnId": {
            "type": "string"
          },
          "isinDescription": {
            "type": "string"
          },
          "units": {
            "type": "string"
          },
          "transactionDate": {
            "type": "string"
          }
        }
      },
      "MutualFundJSONSchemaSummary": {
        "type": "object",
        "properties": {
          "investment": {
            "$ref": "#/components/schemas/MutualFundJSONSchemaSummaryHoldings"
          },
          "costValue": {
            "type": "string"
          },
          "currentValue": {
            "type": "string"
          }
        }
      },
      "MutualFundJSONSchemaSummaryHoldings": {
        "type": "object",
        "properties": {
          "holdings": {
            "$ref": "#/components/schemas/MutualFundJSONSchemaSummaryHoldingsHolding"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "MutualFundJSONSchemaSummaryHoldingsHolding": {
        "type": "object",
        "properties": {
          "holding": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MutualFundJSONSchemaSummaryHoldingsHolding"
            }
          }
        }
      },
      "MutualFundJSONSchemaProfile": {
        "type": "object",
        "properties": {
          "holders": {
            "$ref": "#/components/schemas/MutualFundJSONSchemaProfileHolders"
          }
        }
      },
      "MutualFundJSONSchemaProfileHolders": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "holder": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MutualFundJSONSchemaProfileHoldersHolder"
            }
          }
        }
      },
      "MutualFundJSONSchemaProfileHoldersHolder": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string"
          },
          "kycCompliance": {
            "type": "string"
          },
          "dob": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "landline": {
            "type": "string"
          },
          "mobile": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "nominee": {
            "type": "string"
          },
          "pan": {
            "type": "string"
          },
          "dematId": {
            "type": "string"
          },
          "folioNo": {
            "type": "string"
          }
        }
      },
      "EquitiesJSON": {
        "type": "object",
        "properties": {
          "account": {
            "$ref": "#/components/schemas/EquitiesJSONAccount"
          }
        }
      },
      "EquitiesJSONAccount": {
        "type": "object",
        "properties": {
          "linkedAccRef": {
            "type": "string"
          },
          "maskedAccNumber": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "profile": {
            "$ref": "#/components/schemas/EquitiesJSONAccountProfile"
          },
          "summary": {
            "$ref": "#/components/schemas/EquitiesJSONAccountSummary"
          },
          "transactions": {
            "$ref": "#/components/schemas/EquitiesJSONAccountTransactions"
          }
        }
      },
      "EquitiesJSONAccountTransactions": {
        "type": "object",
        "properties": {
          "startDate": {
            "type": "string"
          },
          "endDate": {
            "type": "string"
          },
          "transaction": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/EquitiesJSONAccountTransactionsTransaction"
            }
          }
        }
      },
      "EquitiesJSONAccountTransactionsTransaction": {
        "type": "object",
        "properties": {
          "companyName": {
            "type": "string"
          },
          "equityCategory": {
            "type": "string"
          },
          "exchange": {
            "type": "string"
          },
          "instrumentType": {
            "type": "string"
          },
          "isin": {
            "type": "string"
          },
          "narration": {
            "type": "string"
          },
          "optionType": {
            "type": "string"
          },
          "orderId": {
            "type": "string"
          },
          "otherCharges": {
            "type": "string"
          },
          "rate": {
            "type": "string"
          },
          "shareHolderEquityType": {
            "type": "string"
          },
          "strikePrice": {
            "type": "string"
          },
          "symbol": {
            "type": "string"
          },
          "totalCharge": {
            "type": "string"
          },
          "tradeValue": {
            "type": "string"
          },
          "transactionDateTime": {
            "type": "string"
          },
          "txnId": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "units": {
            "type": "string"
          }
        }
      },
      "EquitiesJSONAccountSummary": {
        "type": "object",
        "properties": {
          "investment": {
            "$ref": "#/components/schemas/EquitiesJSONAccountSummaryHoldings"
          },
          "currentValue": {
            "type": "string"
          },
          "investmentValue": {
            "type": "string"
          }
        }
      },
      "EquitiesJSONAccountSummaryHoldings": {
        "type": "object",
        "properties": {
          "holdings": {
            "$ref": "#/components/schemas/EquitiesJSONAccountSummaryHoldingsHolding"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "EquitiesJSONAccountSummaryHoldingsHolding": {
        "type": "object",
        "properties": {
          "holding": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EquitiesJSONAccountSummaryHoldingsHolding"
            }
          }
        }
      },
      "EquitiesJSONAccountProfile": {
        "type": "object",
        "properties": {
          "holders": {
            "$ref": "#/components/schemas/EquitiesJSONAccountProfileHolders"
          }
        }
      },
      "EquitiesJSONAccountProfileHolders": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "holder": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EquitiesJSONAccountProfileHoldersHolder"
            }
          }
        }
      },
      "EquitiesJSONAccountProfileHoldersHolder": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string"
          },
          "ckycCompliance": {
            "type": "string"
          },
          "dob": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "landline": {
            "type": "string"
          },
          "mobile": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "nominee": {
            "type": "string"
          },
          "pan": {
            "type": "string"
          },
          "rank": {
            "type": "string"
          },
          "dematId": {
            "type": "string"
          },
          "boId": {
            "type": "string"
          },
          "dpId": {
            "type": "string"
          },
          "brokerName": {
            "type": "string"
          }
        }
      },
      "InsurancePoliciesJSON": {
        "type": "object",
        "properties": {
          "account": {
            "$ref": "#/components/schemas/InsurancePoliciesJSONAccount"
          }
        }
      },
      "InsurancePoliciesJSONAccount": {
        "type": "object",
        "properties": {
          "linkedAccRef": {
            "type": "string"
          },
          "maskedAccNumber": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "profile": {
            "$ref": "#/components/schemas/InsurancePoliciesJSONAccountProfile"
          },
          "summary": {
            "$ref": "#/components/schemas/InsurancePoliciesJSONAccountSummary"
          },
          "transactions": {
            "$ref": "#/components/schemas/InsurancePoliciesJSONAccountTransactions"
          }
        }
      },
      "InsurancePoliciesJSONAccountTransactions": {
        "type": "object",
        "properties": {
          "startDate": {
            "type": "string"
          },
          "endDate": {
            "type": "string"
          },
          "transaction": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/InsurancePoliciesJSONAccountTransactionsTransaction"
            }
          }
        }
      },
      "InsurancePoliciesJSONAccountTransactionsTransaction": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "string"
          },
          "narration": {
            "type": "string"
          },
          "txnId": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "txnDate": {
            "type": "string"
          }
        }
      },
      "InsurancePoliciesJSONAccountSummary": {
        "type": "object",
        "properties": {
          "contractClauses": {
            "$ref": "#/components/schemas/InsurancePoliciesJSONAccountSummaryContractClauses"
          },
          "covers": {
            "$ref": "#/components/schemas/InsurancePoliciesJSONAccountSummaryCover"
          },
          "moneyBacks": {
            "$ref": "#/components/schemas/InsurancePoliciesJSONAccountMoneyBack"
          },
          "coverAmount": {
            "type": "string"
          },
          "coverType": {
            "type": "string"
          },
          "eiaNumber": {
            "type": "string"
          },
          "maturityBenefit": {
            "type": "string"
          },
          "maturityDate": {
            "type": "string"
          },
          "policyName": {
            "type": "string"
          },
          "policyNumber": {
            "type": "string"
          },
          "policyStartDate": {
            "type": "string"
          },
          "policyType": {
            "type": "string"
          },
          "premiumAmount": {
            "type": "string"
          },
          "premiumFrequency": {
            "type": "string"
          },
          "premiumPaymentMonths": {
            "type": "string"
          },
          "premiumPaymentYears": {
            "type": "string"
          },
          "sumAssured": {
            "type": "string"
          },
          "tenureMonths": {
            "type": "string"
          },
          "tenureYears": {
            "type": "string"
          }
        }
      },
      "InsurancePoliciesJSONAccountMoneyBack": {
        "type": "object",
        "properties": {
          "MoneyBack": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InsurancePoliciesJSONAccountMoneyBack"
            }
          }
        }
      },
      "InsurancePoliciesJSONAccountSummaryCover": {
        "type": "object",
        "properties": {
          "cover": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InsurancePoliciesJSONAccountSummaryCover"
            }
          }
        }
      },
      "InsurancePoliciesJSONAccountSummaryContractClauses": {
        "type": "object",
        "properties": {
          "contractClause": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InsurancePoliciesJSONAccountSummaryContractClause"
            }
          }
        }
      },
      "InsurancePoliciesJSONAccountSummaryContractClause": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "string"
          },
          "conditions": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "exlcusions": {
            "type": "string"
          },
          "subLimit": {
            "type": "string"
          },
          "title": {
            "type": "string"
          }
        }
      },
      "InsurancePoliciesJSONAccountProfile": {
        "type": "object",
        "properties": {
          "holders": {
            "$ref": "#/components/schemas/InsurancePoliciesJSONAccountProfileHolders"
          },
          "riders": {
            "$ref": "#/components/schemas/InsurancePoliciesJSONAccountRiders"
          }
        }
      },
      "InsurancePoliciesJSONAccountRiders": {
        "type": "object",
        "properties": {
          "rider": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InsurancePoliciesJSONAccountProfileRidersRider"
            }
          }
        }
      },
      "InsurancePoliciesJSONAccountProfileRidersRider": {
        "type": "object",
        "properties": {
          "policyEndDate": {
            "type": "string"
          },
          "policyStartDate": {
            "type": "string"
          },
          "premiumAmount": {
            "type": "string"
          },
          "riderType": {
            "type": "string"
          },
          "sumAssured": {
            "type": "string"
          },
          "tenureMonths": {
            "type": "string"
          },
          "tenureYears": {
            "type": "string"
          }
        }
      },
      "InsurancePoliciesJSONAccountProfileHolders": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "holder": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InsurancePoliciesJSONAccountProfileHoldersHolder"
            }
          }
        }
      },
      "InsurancePoliciesJSONAccountProfileHoldersHolder": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string"
          },
          "ckycCompliance": {
            "type": "string"
          },
          "dob": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "landline": {
            "type": "string"
          },
          "mobile": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "nominee": {
            "type": "string"
          },
          "pan": {
            "type": "string"
          },
          "rank": {
            "type": "string"
          }
        }
      },
      "RecurringDepositJSON": {
        "type": "object",
        "properties": {
          "account": {
            "$ref": "#/components/schemas/RecurringDepositJSONAccount"
          }
        }
      },
      "RecurringDepositJSONAccount": {
        "type": "object",
        "properties": {
          "linkedAccRef": {
            "type": "string"
          },
          "maskedAccNumber": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "profile": {
            "$ref": "#/components/schemas/RecurringDepositJSONAccountProfile"
          },
          "summary": {
            "$ref": "#/components/schemas/RecurringDepositJSONAccountSummary"
          },
          "transactions": {
            "$ref": "#/components/schemas/RecurringDepositJSONAccountTransactions"
          }
        }
      },
      "RecurringDepositJSONAccountTransactions": {
        "type": "object",
        "properties": {
          "startDate": {
            "type": "string"
          },
          "endDate": {
            "type": "string"
          },
          "transaction": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/RecurringDepositJSONAccountTransactionsTransaction"
            }
          }
        }
      },
      "RecurringDepositJSONAccountTransactionsTransaction": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "string"
          },
          "currentBalance": {
            "type": "string"
          },
          "mode": {
            "type": "string"
          },
          "narration": {
            "type": "string"
          },
          "reference": {
            "type": "string"
          },
          "transactionTimestamp": {
            "type": "string"
          },
          "txnId": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "valueDate": {
            "type": "string"
          }
        }
      },
      "RecurringDepositJSONAccountSummary": {
        "type": "object",
        "properties": {
          "accountType": {
            "type": "string"
          },
          "branch": {
            "type": "string"
          },
          "compoundingFrequency": {
            "type": "string"
          },
          "currentValue": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "ifsc": {
            "type": "string"
          },
          "interestComputation": {
            "type": "string"
          },
          "interestOnMaturity": {
            "type": "string"
          },
          "interestPayout": {
            "type": "string"
          },
          "interestPeriodicPayoutAmount": {
            "type": "string"
          },
          "interestRate": {
            "type": "string"
          },
          "maturityAmount": {
            "type": "string"
          },
          "maturityDate": {
            "type": "string"
          },
          "openingDate": {
            "type": "string"
          },
          "principalAmount": {
            "type": "string"
          },
          "recurringAmount": {
            "type": "string"
          },
          "recurringDepositDay": {
            "type": "string"
          },
          "tenureDays": {
            "type": "string"
          },
          "tenureMonths": {
            "type": "string"
          },
          "tenureYears": {
            "type": "string"
          }
        }
      },
      "RecurringDepositJSONAccountProfile": {
        "type": "object",
        "properties": {
          "holders": {
            "$ref": "#/components/schemas/RecurringDepositJSONAccountProfileHolders"
          }
        }
      },
      "RecurringDepositJSONAccountProfileHolders": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "holder": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RecurringDepositJSONAccountProfileHoldersHolder"
            }
          }
        }
      },
      "RecurringDepositJSONAccountProfileHoldersHolder": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string"
          },
          "ckycCompliance": {
            "type": "string"
          },
          "dob": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "landline": {
            "type": "string"
          },
          "mobile": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "nominee": {
            "type": "string"
          },
          "pan": {
            "type": "string"
          }
        }
      },
      "TermDepositJSON": {
        "type": "object",
        "properties": {
          "account": {
            "$ref": "#/components/schemas/TermDepositJSONAccount"
          }
        }
      },
      "TermDepositJSONAccount": {
        "type": "object",
        "properties": {
          "linkedAccRef": {
            "type": "string"
          },
          "maskedAccNumber": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "profile": {
            "$ref": "#/components/schemas/TermDepositJSONAccountProfile"
          },
          "summary": {
            "$ref": "#/components/schemas/TermDepositJSONAccountSummary"
          },
          "transactions": {
            "$ref": "#/components/schemas/TermDepositJSONAccountTransactions"
          }
        }
      },
      "TermDepositJSONAccountTransactions": {
        "type": "object",
        "properties": {
          "startDate": {
            "type": "string"
          },
          "endDate": {
            "type": "string"
          },
          "transaction": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/TermDepositJSONAccountTransactionsTransaction"
            }
          }
        }
      },
      "TermDepositJSONAccountTransactionsTransaction": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "string"
          },
          "currentBalance": {
            "type": "string"
          },
          "mode": {
            "type": "string"
          },
          "narration": {
            "type": "string"
          },
          "reference": {
            "type": "string"
          },
          "transactionTimestamp": {
            "type": "string"
          },
          "txnId": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "valueDate": {
            "type": "string"
          }
        }
      },
      "TermDepositJSONAccountSummary": {
        "type": "object",
        "properties": {
          "accountType": {
            "type": "string"
          },
          "branch": {
            "type": "string"
          },
          "compoundingFrequency": {
            "type": "string"
          },
          "currentValue": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "ifsc": {
            "type": "string"
          },
          "interestComputation": {
            "type": "string"
          },
          "interestOnMaturity": {
            "type": "string"
          },
          "interestPayout": {
            "type": "string"
          },
          "interestPeriodicPayoutAmount": {
            "type": "string"
          },
          "interestRate": {
            "type": "string"
          },
          "maturityAmount": {
            "type": "string"
          },
          "maturityDate": {
            "type": "string"
          },
          "openingDate": {
            "type": "string"
          },
          "principalAmount": {
            "type": "string"
          },
          "recurringAmount": {
            "type": "string"
          },
          "recurringDepositDay": {
            "type": "string"
          },
          "tenureDays": {
            "type": "string"
          },
          "tenureMonths": {
            "type": "string"
          },
          "tenureYears": {
            "type": "string"
          }
        }
      },
      "TermDepositJSONAccountProfile": {
        "type": "object",
        "properties": {
          "holders": {
            "$ref": "#/components/schemas/TermDepositJSONAccountProfileHolders"
          }
        }
      },
      "TermDepositJSONAccountProfileHolders": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "holder": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TermDepositJSONAccountProfileHoldersHolder"
            }
          }
        }
      },
      "TermDepositJSONAccountProfileHoldersHolder": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string"
          },
          "ckycCompliance": {
            "type": "string"
          },
          "dob": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "landline": {
            "type": "string"
          },
          "mobile": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "nominee": {
            "type": "string"
          },
          "pan": {
            "type": "string"
          }
        }
      },
      "DepositJSON": {
        "type": "object",
        "properties": {
          "account": {
            "$ref": "#/components/schemas/DepositJSONAccount"
          }
        }
      },
      "DepositJSONAccount": {
        "type": "object",
        "properties": {
          "linkedAccRef": {
            "type": "string"
          },
          "maskedAccNumber": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "profile": {
            "$ref": "#/components/schemas/DepositJSONAccountProfile"
          },
          "summary": {
            "$ref": "#/components/schemas/DepositJSONAccountSummary"
          },
          "transactions": {
            "$ref": "#/components/schemas/DepositJSONAccountTransactions"
          }
        }
      },
      "DepositJSONAccountTransactions": {
        "type": "object",
        "properties": {
          "startDate": {
            "type": "string"
          },
          "endDate": {
            "type": "string"
          },
          "transaction": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/DepositJSONAccountTransactionsTransaction"
            }
          }
        }
      },
      "DepositJSONAccountTransactionsTransaction": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "string"
          },
          "currentBalance": {
            "type": "string"
          },
          "mode": {
            "type": "string"
          },
          "narration": {
            "type": "string"
          },
          "reference": {
            "type": "string"
          },
          "transactionTimestamp": {
            "type": "string"
          },
          "txnId": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "valueDate": {
            "type": "string"
          }
        }
      },
      "DepositJSONAccountSummary": {
        "type": "object",
        "properties": {
          "balanceDateTime": {
            "type": "string"
          },
          "branch": {
            "type": "string"
          },
          "currency": {
            "type": "string"
          },
          "currentBalance": {
            "type": "string"
          },
          "currentODLimit": {
            "type": "string"
          },
          "drawingLimit": {
            "type": "string"
          },
          "exchgeRate": {
            "type": "string"
          },
          "facility": {
            "type": "string"
          },
          "ifscCode": {
            "type": "string"
          },
          "micrCode": {
            "type": "string"
          },
          "openingDate": {
            "type": "string"
          },
          "pending": {
            "$ref": "#/components/schemas/DepositJSONAccountSummaryPending"
          },
          "status": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "DepositJSONAccountSummaryPending": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "string"
          },
          "transactionType": {
            "type": "string"
          }
        }
      },
      "DepositJSONAccountProfile": {
        "type": "object",
        "properties": {
          "holders": {
            "$ref": "#/components/schemas/DepositJSONAccountProfileHolders"
          }
        }
      },
      "DepositJSONAccountProfileHolders": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "holder": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DepositJSONAccountProfileHoldersHolder"
            }
          }
        }
      },
      "DepositJSONAccountProfileHoldersHolder": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string"
          },
          "ckycCompliance": {
            "type": "string"
          },
          "dob": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "landline": {
            "type": "string"
          },
          "mobile": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "nominee": {
            "type": "string"
          },
          "pan": {
            "type": "string"
          }
        }
      },
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "errorMsg": {
            "type": "string",
            "description": "Error message with additional details. Ensure no sensitive information is included in the error message."
          },
          "ver": {
            "type": "string",
            "description": "API version."
          },
          "errorCode": {
            "type": "string",
            "description": "Error code indicating the problem with the request"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "Response timestamp"
          },
          "txnid": {
            "type": "string",
            "description": "Trnsaction id of the request. Must be same value as sent in the request"
          }
        },
        "required": [
          "errorCode",
          "errorMsg",
          "timestamp",
          "txnid",
          "ver"
        ],
        "additionalProperties": true
      },
      "CreateFIDataFetchRequestV2": {
        "type": "object",
        "properties": {
          "dataRange": {
            "description": "Time range for which the data is being requested (should be inclusive of the consent's FIDataRange)",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConsentsRequestConsentDetailFIDataRange"
              }
            ]
          },
          "consentId": {
            "type": "string",
            "format": "uuid",
            "description": "The request identifier to fetch the status and data."
          },
          "format": {
            "type": "string",
            "enum": [
              "xml",
              "json"
            ],
            "description": "Format of decrypted data"
          }
        },
        "required": [
          "consentId",
          "dataRange",
          "format"
        ]
      },
      "MultiConsentResponse": {
        "type": "object",
        "properties": {
          "consentCollectionId": {
            "type": "string"
          },
          "url": {
            "type": "string",
            "description": "Webview url"
          },
          "txnid": {
            "type": "string"
          }
        },
        "required": [
          "consentCollectionId",
          "txnid",
          "url"
        ]
      },
      "MultiConsentRequest": {
        "type": "object",
        "properties": {
          "mandatoryConsents": {
            "type": "array",
            "x-minimum": 1,
            "x-maximum": 2,
            "items": {
              "type": "string"
            }
          },
          "optionalConsents": {
            "type": "array",
            "x-maximum": 1,
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "mandatoryConsents"
        ]
      },
      "RevokeConsentResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "PENDING",
              "ACTIVE",
              "PAUSED",
              "REVOKED",
              "EXPIRED",
              "REJECTED"
            ],
            "description": "Surrogate status for this consent"
          }
        },
        "required": [
          "status"
        ]
      },
      "ConsentResponseV2": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The request identifier to fetch the status and data."
          },
          "url": {
            "type": "string",
            "description": "The URL link to the consent manager app for user to complete the flow."
          },
          "status": {
            "type": "string",
            "enum": [
              "PENDING",
              "FAILED",
              "ACTIVE",
              "PAUSED",
              "REVOKED",
              "EXPIRED",
              "REJECTED"
            ],
            "description": "Surrogate status for this consent"
          },
          "detail": {
            "description": "The identifier of the Customer.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConsentResponseConsentDetailV2"
              }
            ]
          },
          "redirectUrl": {
            "type": "string",
            "description": "URL to redirect to after completion of consent journey"
          },
          "context": {
            "type": "array",
            "items": {
              "description": "Specify extra data in key-value pair that might be required for custom arguments or filteration",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ConsentsRequestContext"
                }
              ]
            }
          },
          "PAN": {
            "type": "string",
            "pattern": "^$|[A-Z]{5}[0-9]{4}[A-Z]{1}"
          },
          "usage": {
            "nullable": true,
            "description": "Usage object for this consent. Defines how many times and when this consent has been used for data fetch",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConsentResponseConsentUsage1"
              }
            ]
          },
          "accountsLinked": {
            "type": "array",
            "description": "List of accounts which the consent would fetch FI from. For a consent between FIU & AA, this list could have accounts from multiple FIP. For a consent between FIP & AA, only accounts from particular FIP must be present in this section.",
            "items": {
              "$ref": "#/components/schemas/ConsentResponseConsentDetailAccountsItem"
            }
          }
        },
        "required": [
          "accountsLinked",
          "id",
          "status",
          "url"
        ]
      },
      "ConsentResponseConsentDetailAccountsItem": {
        "type": "object",
        "properties": {
          "fipId": {
            "type": "string",
            "description": "FIP ID"
          },
          "accType": {
            "type": "string",
            "description": "Type of Account"
          },
          "fiType": {
            "type": "string",
            "description": "Type of Financial Information"
          },
          "maskedAccNumber": {
            "type": "string",
            "description": "Masked account number"
          },
          "linkRefNumber": {
            "type": "string",
            "description": "FIP's linkRefNumber as shared by the FIP after linking"
          }
        }
      },
      "ConsentResponseConsentUsage1": {
        "type": "object",
        "properties": {
          "lastUsed": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Timestamp of last data fetch for this consent"
          },
          "count": {
            "type": "number",
            "description": "Count of the number of times data has been fetched for this consent"
          }
        },
        "required": [
          "count",
          "lastUsed"
        ]
      },
      "ConsentsRequestContext": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "enum": [
              "accounttype",
              "fipId",
              "consentReviewAt",
              "purposeDescription",
              "purposeCode",
              "alternateNumber",
              "accountSelectionMode",
              "transactionType",
              "excludeFipIds"
            ],
            "description": "The key of data"
          },
          "value": {
            "type": "string",
            "description": "Value to key data"
          }
        },
        "required": [
          "key",
          "value"
        ]
      },
      "ConsentResponseConsentDetailV2": {
        "type": "object",
        "properties": {
          "fetchType": {
            "type": "string",
            "enum": [
              "ONETIME",
              "PERIODIC"
            ],
            "description": "FI Fetch type. Could be ONETIME or PERIODIC"
          },
          "consentExpiry": {
            "type": "string",
            "format": "date-time",
            "description": "Expiry date-time for the consent"
          },
          "consentStart": {
            "type": "string",
            "format": "date-time",
            "description": "Start date-time of the consent. This field would allow for Post-Dated consent."
          },
          "frequency": {
            "description": "Defines frequency of FI data fetch within the defined time unit. E.g.HOURLY,DAILY,MONTHLY,YEARLY.The maximum frequency value that can be defined is 1 request per HOUR. Similaraly it will be 24 requests per DAY and so on. Frequency can not be set below 1 request per hour.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConsentsRequestConsentDetailFrequency"
              }
            ]
          },
          "dataFilter": {
            "type": "array",
            "description": "rules that will be utilized by FIP to filter the data",
            "items": {
              "$ref": "#/components/schemas/ConsentsRequestConsentDetailDataFilterItem"
            }
          },
          "purpose": {
            "description": "Purpose of the consent defined in the AA Technical Specification",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConsentResponseConsentDetailPurpose"
              }
            ]
          },
          "consentTypes": {
            "type": "array",
            "x-minimum": 1,
            "items": {
              "type": "string",
              "enum": [
                "PROFILE",
                "SUMMARY",
                "TRANSACTIONS"
              ]
            }
          },
          "dataRange": {
            "description": "Data Range (Datetime) for the Financial Information Requested",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConsentsRequestConsentDetailFIDataRange1"
              }
            ]
          },
          "fiTypes": {
            "type": "array",
            "x-minimum": 1,
            "items": {
              "type": "string",
              "enum": [
                "DEPOSIT",
                "TERM_DEPOSIT",
                "RECURRING_DEPOSIT",
                "SIP",
                "CP",
                "GOVT_SECURITIES",
                "EQUITIES",
                "BONDS",
                "DEBENTURES",
                "MUTUAL_FUNDS",
                "ETF",
                "IDR",
                "CIS",
                "AIF",
                "INSURANCE_POLICIES",
                "NPS",
                "INVIT",
                "REIT",
                "GSTR1_3B",
                "OTHER"
              ],
              "description": "List of financial information types."
            }
          },
          "vua": {
            "type": "string"
          },
          "dataLife": {
            "description": "Datalife defines for how long can the FIU/AA Application store the data",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConsentsRequestConsentDetailDataLife"
              }
            ]
          },
          "consentMode": {
            "type": "string",
            "enum": [
              "VIEW",
              "STORE",
              "QUERY",
              "STREAM"
            ],
            "description": "Consent Mode as defined in the AA Technical Specification"
          }
        },
        "required": [
          "consentExpiry",
          "consentStart"
        ]
      },
      "ConsentsRequestConsentDetailDataLife": {
        "type": "object",
        "properties": {
          "unit": {
            "type": "string",
            "enum": [
              "MONTH",
              "YEAR",
              "DAY",
              "INF"
            ],
            "description": "A unit of how long consumer can store the data"
          },
          "value": {
            "type": "integer",
            "description": "Define the value of unit of how long can consumer store the data"
          }
        },
        "required": [
          "unit",
          "value"
        ]
      },
      "ConsentsRequestConsentDetailFIDataRange1": {
        "type": "object",
        "properties": {
          "to": {
            "type": "string",
            "format": "date-time",
            "description": "End date for financial information"
          },
          "from": {
            "type": "string",
            "format": "date-time",
            "description": "Start date for financial information"
          }
        },
        "required": [
          "from",
          "to"
        ]
      },
      "ConsentResponseConsentDetailPurpose": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "enum": [
              "101",
              "102",
              "103",
              "104",
              "105",
              "106"
            ],
            "description": "Purpose Code as defined in the AA Technical Specification "
          },
          "text": {
            "type": "string",
            "description": "Textual Description"
          },
          "category": {
            "$ref": "#/components/schemas/PurposeCategory1"
          },
          "refUri": {
            "type": "string",
            "description": "URL where the purpose is further defined"
          }
        },
        "required": [
          "code"
        ]
      },
      "PurposeCategory1": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Category name of the Purpose code"
          }
        }
      },
      "ConsentsRequestConsentDetailDataFilterItem": {
        "type": "object",
        "properties": {
          "operator": {
            "type": "string",
            "enum": [
              "=",
              "!=",
              ">",
              "<",
              ">=",
              "<="
            ],
            "description": "Operator to filter data by."
          },
          "type": {
            "type": "string",
            "enum": [
              "TRANSACTIONTYPE",
              "TRANSACTIONAMOUNT"
            ],
            "description": "The condition to filter the data on."
          },
          "value": {
            "type": "string",
            "description": "Value to filter data"
          }
        },
        "required": [
          "operator",
          "type",
          "value"
        ]
      },
      "ConsentsRequestConsentDetailFrequency": {
        "type": "object",
        "properties": {
          "unit": {
            "type": "string",
            "enum": [
              "HOUR",
              "DAY",
              "MONTH",
              "YEAR",
              "INF"
            ],
            "description": "Defines the time unit of the frequency to access the financial information."
          },
          "value": {
            "type": "integer",
            "description": "Define the number of times FI data can be fetched within the defined time unit."
          }
        },
        "required": [
          "unit",
          "value"
        ]
      },
      "CreateConsentRequestV2": {
        "type": "object",
        "properties": {
          "PAN": {
            "type": "string",
            "pattern": "^$|[A-Z]{5}[0-9]{4}[A-Z]{1}"
          },
          "consentDuration": {
            "description": "How long consumer is allowed to store data",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConsentDurartion"
              }
            ]
          },
          "fetchType": {
            "type": "string",
            "enum": [
              "ONETIME",
              "PERIODIC"
            ]
          },
          "context": {
            "type": "array",
            "items": {
              "description": "Specify extra data in key-value pair that might be required for custom arguments or filteration",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ConsentsRequestContext"
                }
              ]
            }
          },
          "frequency": {
            "description": "Defines frequency of FI data fetch within the defined time unit. E.g.HOURLY,DAILY,MONTHLY,YEARLY.The maximum frequency value that can be defined is 1 request per HOUR. Similaraly it will be 24 requests per DAY and so on. Frequency can not be set below 1 request per hour.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConsentsRequestConsentDetailFrequency"
              }
            ]
          },
          "dataFilter": {
            "type": "array",
            "description": "rules that will be utilized by FIP to filter the data",
            "items": {
              "$ref": "#/components/schemas/ConsentsRequestConsentDetailDataFilterItem"
            }
          },
          "purpose": {
            "description": "Purpose of the consent defined in the AA Technical Specification",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConsentRequestPurpose"
              }
            ]
          },
          "consentTypes": {
            "type": "array",
            "x-minimum": 1,
            "items": {
              "type": "string",
              "enum": [
                "PROFILE",
                "SUMMARY",
                "TRANSACTIONS"
              ]
            }
          },
          "redirectUrl": {
            "type": "string"
          },
          "dataRange": {
            "$ref": "#/components/schemas/ConsentsRequestConsentDetailFIDataRange1"
          },
          "fiTypes": {
            "type": "array",
            "x-minimum": 1,
            "items": {
              "type": "string",
              "enum": [
                "DEPOSIT",
                "TERM_DEPOSIT",
                "RECURRING_DEPOSIT",
                "SIP",
                "CP",
                "GOVT_SECURITIES",
                "EQUITIES",
                "BONDS",
                "DEBENTURES",
                "MUTUAL_FUNDS",
                "ETF",
                "IDR",
                "CIS",
                "AIF",
                "INSURANCE_POLICIES",
                "NPS",
                "INVIT",
                "REIT",
                "GSTR1_3B",
                "OTHER"
              ],
              "description": "List of financial information types."
            }
          },
          "vua": {
            "type": "string"
          },
          "consentDateRange": {
            "$ref": "#/components/schemas/ConsentDateRange"
          },
          "dataLife": {
            "description": "How long consumer is allowed to store data",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConsentsRequestConsentDetailDataLife"
              }
            ]
          },
          "consentMode": {
            "type": "string",
            "enum": [
              "VIEW",
              "STORE",
              "QUERY",
              "STREAM"
            ],
            "description": "Consent Mode as defined in the AA Technical Specification"
          }
        },
        "required": [
          "dataRange",
          "vua"
        ]
      },
      "ConsentDateRange": {
        "type": "object",
        "properties": {
          "endDate": {
            "type": "string",
            "format": "date-time",
            "description": "Expiry date-time for the consent"
          },
          "startDate": {
            "type": "string",
            "format": "date-time",
            "description": "Expiry date-time for the consent"
          }
        },
        "required": [
          "endDate",
          "startDate"
        ]
      },
      "ConsentRequestPurpose": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "enum": [
              "101",
              "102",
              "103",
              "104",
              "105",
              "106"
            ],
            "description": "Purpose Code as defined in the AA Technical Specification "
          },
          "text": {
            "type": "string",
            "description": "Textual Description"
          },
          "category": {
            "$ref": "#/components/schemas/PurposeCategory1"
          },
          "refUri": {
            "type": "string",
            "description": "URL where the purpose is further defined"
          }
        },
        "required": [
          "category",
          "code",
          "refUri",
          "text"
        ]
      },
      "ConsentDurartion": {
        "type": "object",
        "properties": {
          "unit": {
            "type": "string",
            "enum": [
              "MONTH",
              "YEAR",
              "DAY"
            ],
            "description": "A unit of how long consumer can store the data"
          },
          "value": {
            "type": "integer",
            "description": "Define the value of unit of how long can consumer store the data"
          }
        },
        "required": [
          "unit",
          "value"
        ]
      },
      "FIPResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FIPResponseObject"
            }
          }
        }
      },
      "FIPResponseObject": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the FIP"
          },
          "fipId": {
            "type": "string",
            "description": "ID of the FIP"
          },
          "fiTypes": {
            "type": "array",
            "x-minimum": 1,
            "items": {
              "type": "string",
              "enum": [
                "DEPOSIT",
                "TERM_DEPOSIT",
                "RECURRING_DEPOSIT",
                "SIP",
                "CP",
                "GOVT_SECURITIES",
                "EQUITIES",
                "BONDS",
                "DEBENTURES",
                "MUTUAL_FUNDS",
                "ETF",
                "IDR",
                "CIS",
                "AIF",
                "INSURANCE_POLICIES",
                "NPS",
                "INVIT",
                "REIT",
                "OTHER",
                "GSTR1_3B"
              ],
              "description": "List of financial information types."
            }
          },
          "institutionType": {
            "enum": [
              "BANK",
              "NBFC",
              "CRA",
              "RTA",
              "DEPOSITORY",
              "INSURER",
              "PENSION_SCHEME",
              "MUTUAL_FUND",
              "TAX_AUTHORITY"
            ],
            "description": "Type of FIP"
          },
          "status": {
            "enum": [
              "ACTIVE",
              "INACTIVE",
              "TEMPORARILY_INACTIVE"
            ],
            "description": "Current status of the FIP"
          }
        },
        "required": [
          "fiTypes",
          "fipId",
          "institutionType",
          "name",
          "status"
        ]
      }
    },
    "responses": {
      "BAD_REQUEST": {
        "description": "Bad Request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          }
        }
      }
    }
  }
}