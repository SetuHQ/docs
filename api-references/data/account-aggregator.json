{
    "openapi": "3.0.2",
    "info": {
      "description": "API spec for Setu AA gateway",
      "termsOfService": "",
      "contact": {
        "email": "aa@setu.co"
      },
      "title": "AA Gateway",
      "version": "v1"
    },
    "servers": [],
    "tags": [
      {
        "name": "AA participants APIs",
        "description": "APIs to fetch Account Aggregator ecosystem participants data i.e FIPs, FIUs or AAs"
      },
      {
        "name": "Consent APIs",
        "description": "APIs for Consent management"
      },
      {
        "name": "FI Data Control APIs",
        "description": "APIs to update or modify FI encrypted data"
      },
      {
        "name": "FI data fetch APIs",
        "description": "APIs for FI data flow"
      },
      {
        "name": "Meta APIs",
        "description": "AA-Rohan meta information APIs"
      },
      {
        "name": "Internal notification APIs",
        "description": "APIs to receive notifications from AA"
      },
      {
        "name": "Consent V2 APIs",
        "description": "APIs for Consent management"
      },
      {
        "name": "FI data fetch V2 APIs",
        "description": "APIs for FI data flow"
      }
    ],
    "paths": {
      "/fips": {
        "get": {
          "parameters": [
            {
              "in": "header",
              "name": "x-vault-config",
              "required": false,
              "description": "Path to fetch config from Vault",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "400": {
              "$ref": "#/components/responses/BAD_REQUEST"
            },
            "200": {
              "description": "OK"
            }
          },
          "tags": [
            "AA participants APIs"
          ]
        }
      },
      "/v2/fips": {
        "get": {
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/FIPResponse"
                  }
                }
              }
            }
          },
          "tags": [
            "AA participants APIs"
          ]
        }
      },
      "/v2/account-availability": {
        "post": {
          "parameters": [
            {
              "in": "header",
              "name": "Authorization",
              "required": true,
              "description": "Authorization Bearer token",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "header",
              "name": "x-product-instance-id",
              "required": true,
              "description": "Product instance ID of FIU",
              "schema": {
                "type": "string",
                "minLength": 1
              }
            }
          ],
          "responses": {
            "400": {
              "$ref": "#/components/responses/BAD_REQUEST"
            },
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AccountAvailabilityResponse"
                  }
                }
              }
            }
          },
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountAvailabilityRequest"
                }
              }
            }
          },
          "tags": [
            "AA participants APIs"
          ]
        }
      },
      "/v2/generate-jws-signature": {
        "post": {
          "parameters": [
            {
              "in": "header",
              "name": "Authorization",
              "required": true,
              "description": "Authorization Bearer token",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "header",
              "name": "x-product-instance-id",
              "required": true,
              "description": "Product instance ID of FIU",
              "schema": {
                "type": "string",
                "minLength": 1
              }
            }
          ],
          "responses": {
            "400": {
              "$ref": "#/components/responses/BAD_REQUEST"
            },
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/GenerateJWSSignatureResponse"
                  }
                }
              }
            }
          },
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenerateJWSSignatureRequest"
                }
              }
            }
          },
          "tags": [
            "AA participants APIs"
          ]
        }
      },
      "/consents": {
        "post": {
          "parameters": [
            {
              "in": "header",
              "name": "x-client-id",
              "required": false,
              "description": "Client ID of FIU",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "header",
              "name": "x-vault-config",
              "required": false,
              "description": "Path to fetch config from Vault",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "header",
              "name": "x-api-key",
              "required": true,
              "description": "API key to call service",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "201": {
              "description": "Created",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ConsentResponse"
                  }
                }
              }
            }
          },
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateConsentsRequest"
                }
              }
            }
          },
          "summary": "Create consent",
          "description": "This API is intended for AA Client to request generation of digitally signed consent artefacts. The customer has to use the AA application to select accounts and approve consent generation. Once the customer approves the consent request on the AA application, AA generates the digitally signed consent artefacts. Note - The AA Client never sees the account of the customer or directly participates in consent generation.\n\nNote: \u201cRequest Body Example Value\u201d and \u201cResponses Example Value\u201d given below is for illustrative purposes only.",
          "tags": [
            "Consent APIs"
          ]
        }
      },
      "/consents/{request_id}": {
        "get": {
          "parameters": [
            {
              "in": "header",
              "name": "x-client-id",
              "required": false,
              "description": "Client ID of FIU",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "header",
              "name": "x-vault-config",
              "required": false,
              "description": "Path to fetch config from Vault",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "header",
              "name": "x-api-key",
              "required": true,
              "description": "API key to call service",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ConsentResponse"
                  }
                }
              }
            }
          },
          "summary": "Get a consent",
          "description": "This API gets consent information using request ID.",
          "tags": [
            "Consent APIs"
          ]
        },
        "parameters": [
          {
            "in": "path",
            "name": "request_id",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1
            }
          }
        ]
      },
      "/consents/{request_id}/revoke": {
        "post": {
          "parameters": [
            {
              "in": "header",
              "name": "x-client-id",
              "required": false,
              "description": "Client ID of FIU",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "header",
              "name": "x-vault-config",
              "required": false,
              "description": "Path to fetch config from Vault",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "header",
              "name": "x-api-key",
              "required": true,
              "description": "API key to call service",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RevokeConsentResponse"
                  }
                }
              }
            }
          },
          "summary": "Revoke a consent",
          "description": "This API revokes a consent based on request ID.",
          "tags": [
            "Consent APIs"
          ]
        },
        "parameters": [
          {
            "in": "path",
            "name": "request_id",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1
            }
          }
        ]
      },
      "/consents/webview/{request_id}": {
        "get": {
          "responses": {
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "summary": "Redirect to consent manager",
          "description": "This API redirects to the actual consent manager URL using request ID",
          "tags": [
            "Consent APIs"
          ]
        },
        "parameters": [
          {
            "in": "path",
            "name": "request_id",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1
            }
          }
        ]
      },
      "/consents/consents/collection": {
        "post": {
          "parameters": [
            {
              "in": "header",
              "name": "x-client-id",
              "required": false,
              "description": "Client ID of FIU",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/MultiConsentResponse"
                  }
                }
              }
            }
          },
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MultiConsentRequest"
                }
              }
            }
          },
          "summary": "Create multi consent",
          "description": "This API creates multi consent",
          "tags": [
            "Consent APIs"
          ]
        }
      },
      "/consents/consents/collection/{id}": {
        "get": {
          "parameters": [
            {
              "in": "header",
              "name": "x-client-id",
              "required": false,
              "description": "Client ID of FIU",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "400": {
              "$ref": "#/components/responses/BAD_REQUEST"
            },
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/MultiConsentResponse"
                  }
                }
              }
            }
          },
          "summary": "Get multi consent",
          "description": "This API gets multi consent",
          "tags": [
            "Consent APIs"
          ]
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1
            }
          }
        ]
      },
      "/consents/consent-manager-callback/{request_id}": {
        "get": {
          "parameters": [
            {
              "in": "query",
              "name": "resdate",
              "required": false,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "errormsg",
              "required": false,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "fi",
              "required": false,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "ecres",
              "required": false,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "400": {
              "$ref": "#/components/responses/BAD_REQUEST"
            }
          },
          "summary": "Handle redirect from webview",
          "description": "This API handles the redirect from webview and makes a simplified redirect to actual FIU redirectUrl (given while creating consent)",
          "tags": [
            "Consent APIs"
          ]
        },
        "parameters": [
          {
            "in": "path",
            "name": "request_id",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1
            }
          }
        ]
      },
      "/consents/active/{customer_id}": {
        "get": {
          "parameters": [
            {
              "in": "header",
              "name": "x-client-id",
              "required": false,
              "description": "Client ID of FIU",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/UserActiveConsents"
                  }
                }
              }
            }
          },
          "summary": "Get active consents of a particular user",
          "description": "This API gets active consents of a particular user",
          "tags": [
            "Consent APIs"
          ]
        },
        "parameters": [
          {
            "in": "path",
            "name": "customer_id",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1
            }
          }
        ]
      },
      "/consents/encrypted_consent_request/{request_id}": {
        "get": {
          "responses": {
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "summary": "Encrypted consent request",
          "description": "This API fetches the encrypted consent request",
          "tags": [
            "Consent APIs"
          ]
        },
        "parameters": [
          {
            "in": "path",
            "name": "request_id",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1
            }
          }
        ]
      },
      "/fi/purge": {
        "delete": {
          "parameters": [
            {
              "in": "query",
              "name": "customer_id",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "400": {
              "$ref": "#/components/responses/BAD_REQUEST"
            }
          },
          "tags": [
            "FI Data Control APIs"
          ]
        }
      },
      "/sessions": {
        "post": {
          "parameters": [
            {
              "in": "header",
              "name": "x-client-id",
              "required": false,
              "description": "Client ID of FIU",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "header",
              "name": "x-vault-config",
              "required": false,
              "description": "Path to fetch config from Vault",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "header",
              "name": "x-api-key",
              "required": true,
              "description": "API key to call service",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "201": {
              "description": "Created",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/FIDataFetchResponse"
                  }
                }
              }
            }
          },
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateFIDataFetchRequest"
                }
              }
            }
          },
          "summary": "Create FI data fetch",
          "description": "This API is used to initiate a data fetch for FI data.",
          "tags": [
            "FI data fetch APIs"
          ]
        }
      },
      "/sessions/{request_id}": {
        "get": {
          "parameters": [
            {
              "in": "header",
              "name": "x-client-id",
              "required": false,
              "description": "Client ID of FIU",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "header",
              "name": "x-vault-config",
              "required": false,
              "description": "Path to fetch config from Vault",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "header",
              "name": "x-api-key",
              "required": true,
              "description": "API key to call service",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/FIDataFetchResponse"
                  }
                }
              }
            }
          },
          "summary": "Get FI data",
          "description": "This API gets consent information using request ID.",
          "tags": [
            "FI data fetch APIs"
          ]
        },
        "parameters": [
          {
            "in": "path",
            "name": "request_id",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1
            }
          }
        ]
      },
      "/": {
        "get": {
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/MessageResponse"
                  }
                }
              }
            }
          },
          "tags": [
            "Meta APIs"
          ],
          "summary": "API base"
        }
      },
      "/health": {
        "get": {
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/VersionResponse"
                  }
                }
              }
            }
          },
          "tags": [
            "Meta APIs"
          ],
          "summary": "Health check API"
        }
      },
      "/Consent/Notification": {
        "post": {
          "parameters": [
            {
              "in": "header",
              "name": "aa_api_key",
              "required": true,
              "description": "API key used to verify AA's identity",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "body",
              "required": true,
              "name": "body",
              "schema": {
                "$ref": "#/components/schemas/PassDownSerializedBody"
              }
            },
            {
              "in": "header",
              "name": "x-jws-signature",
              "required": true,
              "description": "Detached JWS of request body",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BadRequestConsentFetch"
                  }
                }
              }
            },
            "503": {
              "description": "Service Unavailable",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ServiceUnavailable"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/InternalServerError"
                  }
                }
              }
            },
            "412": {
              "description": "Precondition Failed",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PreconditionFailed"
                  }
                }
              }
            },
            "409": {
              "description": "Conflict",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Conflict"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/NotFound"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/UnauthorizedAccess"
                  }
                }
              }
            },
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/NotificationResponse"
                  }
                }
              }
            }
          },
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConsentStatusNotification"
                }
              }
            }
          },
          "summary": "Consent notification endpoint",
          "description": "This endpoint is used by AA to send Consent Status notifications.",
          "tags": [
            "Internal notification APIs"
          ]
        }
      },
      "/FI/Notification": {
        "post": {
          "parameters": [
            {
              "in": "header",
              "name": "aa_api_key",
              "required": true,
              "description": "API key used to verify AA's identity",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "body",
              "required": true,
              "name": "body",
              "schema": {
                "$ref": "#/components/schemas/PassDownSerializedBody"
              }
            },
            {
              "in": "header",
              "name": "x-jws-signature",
              "required": true,
              "description": "Detached JWS of request body",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BadRequestConsentFetch"
                  }
                }
              }
            },
            "503": {
              "description": "Service Unavailable",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ServiceUnavailable"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/InternalServerError"
                  }
                }
              }
            },
            "412": {
              "description": "Precondition Failed",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PreconditionFailed"
                  }
                }
              }
            },
            "409": {
              "description": "Conflict",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Conflict"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/NotFound"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/UnauthorizedAccess"
                  }
                }
              }
            },
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/NotificationResponse"
                  }
                }
              }
            }
          },
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FIStatusNotification"
                }
              }
            }
          },
          "summary": "FI data notification endpoint",
          "description": "This endpoint is used by AA to send FI data notifications.",
          "tags": [
            "Internal notification APIs"
          ]
        }
      },
      "/v2/consents": {
        "post": {
          "parameters": [
            {
              "in": "header",
              "name": "Authorization",
              "required": true,
              "description": "Authorization Bearer token",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "header",
              "name": "x-product-instance-id",
              "required": true,
              "description": "Product instance ID of FIU",
              "schema": {
                "type": "string",
                "minLength": 1
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "201": {
              "description": "Created",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ConsentResponseV2"
                  }
                }
              }
            }
          },
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateConsentRequestV2"
                }
              }
            }
          },
          "summary": "Create consent",
          "description": "This API is intended for AA Client to request generation of digitally signed consent artefacts. The customer has to use the AA application to select accounts and approve consent generation. Once the customer approves the consent request on the AA application, AA generates the digitally signed consent artefacts. Note - The AA Client never sees the account of the customer or directly participates in consent generation.\n\nNote: \u201cRequest Body Example Value\u201d and \u201cResponses Example Value\u201d given below is for illustrative purposes only.",
          "tags": [
            "Consent V2 APIs"
          ]
        }
      },
      "/v2/consents/{request_id}": {
        "get": {
          "parameters": [
            {
              "in": "query",
              "name": "expanded",
              "required": false,
              "description": "Get expanded response",
              "schema": {
                "type": "boolean",
                "default": false
              }
            },
            {
              "in": "header",
              "name": "Authorization",
              "required": true,
              "description": "Authorization Bearer token",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "header",
              "name": "x-product-instance-id",
              "required": true,
              "description": "Product instance ID of FIU",
              "schema": {
                "type": "string",
                "minLength": 1
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ConsentResponseV2"
                  }
                }
              }
            }
          },
          "summary": "Get a consent",
          "description": "This API gets consent information using request ID.",
          "tags": [
            "Consent V2 APIs"
          ]
        },
        "parameters": [
          {
            "in": "path",
            "name": "request_id",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1
            }
          }
        ]
      },
      "/v2/consents/{request_id}/revoke": {
        "post": {
          "parameters": [
            {
              "in": "header",
              "name": "Authorization",
              "required": true,
              "description": "Authorization Bearer token",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "header",
              "name": "x-product-instance-id",
              "required": true,
              "description": "Product instance ID of FIU",
              "schema": {
                "type": "string",
                "minLength": 1
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RevokeConsentResponse"
                  }
                }
              }
            }
          },
          "summary": "Revoke a consent",
          "description": "This API revokes a consent based on request ID.",
          "tags": [
            "Consent V2 APIs"
          ]
        },
        "parameters": [
          {
            "in": "path",
            "name": "request_id",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1
            }
          }
        ]
      },
      "/v2/consents/webview/{request_id}": {
        "get": {
          "responses": {
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "summary": "Redirect to consent manager",
          "description": "This API redirects to the actual consent manager URL using request ID",
          "tags": [
            "Consent V2 APIs"
          ]
        },
        "parameters": [
          {
            "in": "path",
            "name": "request_id",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1
            }
          }
        ]
      },
      "/v2/consents/consents/collection": {
        "post": {
          "parameters": [
            {
              "in": "header",
              "name": "Authorization",
              "required": true,
              "description": "Authorization Bearer token",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "header",
              "name": "x-product-instance-id",
              "required": false,
              "description": "Product instance ID of FIU",
              "schema": {
                "type": "string",
                "minLength": 1
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/MultiConsentResponse"
                  }
                }
              }
            }
          },
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MultiConsentRequest"
                }
              }
            }
          },
          "summary": "Create multi consent",
          "tags": [
            "Consent V2 APIs"
          ]
        }
      },
      "/v2/consents/consents/collection/{id}": {
        "get": {
          "parameters": [
            {
              "in": "header",
              "name": "Authorization",
              "required": true,
              "description": "Authorization Bearer token",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "header",
              "name": "x-product-instance-id",
              "required": true,
              "description": "Product instance ID of FIU",
              "schema": {
                "type": "string",
                "minLength": 1
              }
            }
          ],
          "responses": {
            "400": {
              "$ref": "#/components/responses/BAD_REQUEST"
            },
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/MultiConsentResponse"
                  }
                }
              }
            }
          },
          "summary": "Get multi consent",
          "tags": [
            "Consent V2 APIs"
          ]
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1
            }
          }
        ]
      },
      "/v2/consents/collection": {
        "post": {
          "parameters": [
            {
              "in": "header",
              "name": "Authorization",
              "required": true,
              "description": "Authorization Bearer token",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "header",
              "name": "x-product-instance-id",
              "required": true,
              "description": "Product instance ID of FIU",
              "schema": {
                "type": "string",
                "minLength": 1
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/MultiConsentResponse"
                  }
                }
              }
            }
          },
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MultiConsentRequest"
                }
              }
            }
          },
          "summary": "Create multi consent",
          "tags": [
            "Consent V2 APIs"
          ]
        }
      },
      "/v2/consents/collection/{id}": {
        "get": {
          "parameters": [
            {
              "in": "header",
              "name": "Authorization",
              "required": true,
              "description": "Authorization Bearer token",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "header",
              "name": "x-product-instance-id",
              "required": true,
              "description": "Product instance ID of FIU",
              "schema": {
                "type": "string",
                "minLength": 1
              }
            }
          ],
          "responses": {
            "400": {
              "$ref": "#/components/responses/BAD_REQUEST"
            },
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/MultiConsentResponse"
                  }
                }
              }
            }
          },
          "summary": "Get multi consent",
          "tags": [
            "Consent V2 APIs"
          ]
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1
            }
          }
        ]
      },
      "/v2/consents/consent-manager-callback/{request_id}": {
        "get": {
          "parameters": [
            {
              "in": "query",
              "name": "resdate",
              "required": false,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "errormsg",
              "required": false,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "fi",
              "required": false,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "ecres",
              "required": false,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "400": {
              "$ref": "#/components/responses/BAD_REQUEST"
            }
          },
          "summary": "Handle redirect from webview",
          "description": "This API handles the redirect from webview and makes a simplified redirect to actual FIU redirectUrl (given while creating consent)",
          "tags": [
            "Consent V2 APIs"
          ]
        },
        "parameters": [
          {
            "in": "path",
            "name": "request_id",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1
            }
          }
        ]
      },
      "/v2/consents/{consent_id}/fetch/status": {
        "get": {
          "parameters": [
            {
              "in": "header",
              "name": "Authorization",
              "required": true,
              "description": "Authorization Bearer token",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "header",
              "name": "x-product-instance-id",
              "required": true,
              "description": "Product instance ID of FIU",
              "schema": {
                "type": "string",
                "minLength": 1
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "200": {
              "description": "OK"
            }
          },
          "tags": [
            "Consent V2 APIs"
          ]
        },
        "parameters": [
          {
            "in": "path",
            "name": "consent_id",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1
            }
          }
        ]
      },
      "/v2/consents/encrypted_consent_request/{request_id}": {
        "get": {
          "responses": {
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "summary": "Encrypted consent request",
          "description": "This API fetches the encrypted consent request",
          "tags": [
            "Consent V2 APIs"
          ]
        },
        "parameters": [
          {
            "in": "path",
            "name": "request_id",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1
            }
          }
        ]
      },
      "/v2/sessions": {
        "post": {
          "parameters": [
            {
              "in": "header",
              "name": "Authorization",
              "required": true,
              "description": "Authorization Bearer token",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "header",
              "name": "x-product-instance-id",
              "required": true,
              "description": "Product instance ID of FIU",
              "schema": {
                "type": "string",
                "minLength": 1
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "201": {
              "description": "Created",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/FIDataFetchResponseV2"
                  }
                }
              }
            }
          },
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateFIDataFetchRequestV2"
                }
              }
            }
          },
          "summary": "Create FI data fetch",
          "description": "This API is used to initiate a data fetch for FI data.",
          "tags": [
            "FI data fetch V2 APIs"
          ]
        }
      },
      "/v2/sessions/{session_id}": {
        "get": {
          "parameters": [
            {
              "in": "header",
              "name": "Authorization",
              "required": true,
              "description": "Authorization Bearer token",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "header",
              "name": "x-product-instance-id",
              "required": true,
              "description": "Product instance ID of FIU",
              "schema": {
                "type": "string",
                "minLength": 1
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/FIDataFetchResponseV2"
                  }
                }
              }
            }
          },
          "summary": "Get FI data",
          "description": "This API gets consent information using request ID.",
          "tags": [
            "FI data fetch V2 APIs"
          ]
        },
        "parameters": [
          {
            "in": "path",
            "name": "session_id",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1
            }
          }
        ]
      },
      "/v2/sessions/refresh/{consent_id}": {
        "get": {
          "parameters": [
            {
              "in": "query",
              "name": "restart",
              "required": false,
              "description": "Flag to inidicate if we need to restart a running data fetch workflow",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "in": "header",
              "name": "Authorization",
              "required": true,
              "description": "Authorization Bearer token",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "header",
              "name": "x-product-instance-id",
              "required": true,
              "description": "Product instance ID of FIU",
              "schema": {
                "type": "string",
                "minLength": 1
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "200": {
              "description": "OK"
            }
          },
          "tags": [
            "FI data fetch V2 APIs"
          ]
        },
        "parameters": [
          {
            "in": "path",
            "name": "consent_id",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1
            }
          }
        ],
        "post": {
          "parameters": [
            {
              "in": "query",
              "name": "restart",
              "required": false,
              "description": "Flag to inidicate if we need to restart a running data fetch workflow",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "in": "header",
              "name": "Authorization",
              "required": true,
              "description": "Authorization Bearer token",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "header",
              "name": "x-product-instance-id",
              "required": true,
              "description": "Product instance ID of FIU",
              "schema": {
                "type": "string",
                "minLength": 1
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "200": {
              "description": "OK"
            }
          },
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ManualRefreshRequest"
                }
              }
            }
          },
          "tags": [
            "FI data fetch V2 APIs"
          ]
        }
      }
    },
    "components": {
      "schemas": {
        "ManualRefreshRequest": {
          "type": "object",
          "properties": {
            "dataRange": {
              "$ref": "#/components/schemas/ConsentsRequestConsentDetailFIDataRange"
            }
          }
        },
        "ConsentsRequestConsentDetailFIDataRange": {
          "type": "object",
          "properties": {
            "to": {
              "type": "string",
              "format": "date-time",
              "description": "Selects the ending date-time from where the financial information is to be end. It is a mandatory field only if consentTypes includes ENUM TRANSACTIONS in consent parameters."
            },
            "from": {
              "type": "string",
              "format": "date-time",
              "description": "Selects the starting date-time from where the financial information is to be start. It is a mandatory field only if consentTypes includes ENUM TRANSACTIONS in consent parameters."
            }
          },
          "required": [
            "from",
            "to"
          ]
        },
        "ErrorResponse": {
          "type": "object",
          "properties": {
            "txnid": {
              "type": "string",
              "description": "Trnsaction id of the request. Must be same value as sent in the request"
            },
            "errorMsg": {
              "type": "string",
              "description": "Error message with additional details. Ensure no sensitive information is included in the error message."
            },
            "ver": {
              "type": "string",
              "description": "API version."
            },
            "errorCode": {
              "type": "string",
              "description": "Error code indicating the problem with the request"
            },
            "timestamp": {
              "type": "string",
              "format": "date-time",
              "description": "Response timestamp"
            }
          },
          "required": [
            "errorCode",
            "errorMsg",
            "timestamp",
            "txnid",
            "ver"
          ],
          "additionalProperties": true
        },
        "FIDataFetchResponseV2": {
          "type": "object",
          "properties": {
            "status": {
              "type": "string",
              "enum": [
                "ACTIVE",
                "PENDING",
                "COMPLETED",
                "EXPIRED",
                "FAILED",
                "PARTIAL"
              ],
              "description": "Status for this data fetch session"
            },
            "consentId": {
              "type": "string",
              "format": "uuid",
              "description": "Consent identifier for this data fetch request."
            },
            "id": {
              "type": "string",
              "format": "uuid",
              "description": "Request identifier to fetch the status and data."
            },
            "fips": {
              "type": "array",
              "nullable": true,
              "description": "Array of accounts for a particular fip",
              "items": {
                "$ref": "#/components/schemas/FIFetchDecrpytedResponseFIItem1"
              }
            },
            "format": {
              "type": "string",
              "enum": [
                "xml",
                "json"
              ],
              "description": "Format of decrypted data"
            },
            "dataRange": {
              "description": "Time range for which the data is being requested",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ConsentsRequestConsentDetailFIDataRange"
                }
              ]
            }
          },
          "required": [
            "consentId",
            "dataRange",
            "fips",
            "format",
            "id",
            "status"
          ]
        },
        "FIFetchDecrpytedResponseFIItem1": {
          "type": "object",
          "properties": {
            "fipID": {
              "type": "string"
            },
            "accounts": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/FIFetchDecrpytedResponseFIItemDataItem1"
              }
            }
          },
          "required": [
            "accounts",
            "fipID"
          ]
        },
        "FIFetchDecrpytedResponseFIItemDataItem1": {
          "type": "object",
          "properties": {
            "data": {
              "description": "Contains the decrypted financial information",
              "allOf": [
                {
                  "$ref": "#/components/schemas/FIFetchDecrpytedResponseFIItemDataItemData"
                }
              ]
            },
            "linkRefNumber": {
              "type": "string"
            },
            "maskedAccNumber": {
              "type": "string"
            },
            "FIstatus": {
              "type": "string"
            }
          },
          "required": [
            "FIstatus",
            "data",
            "linkRefNumber",
            "maskedAccNumber"
          ]
        },
        "FIFetchDecrpytedResponseFIItemDataItemData": {
          "type": "object",
          "properties": {},
          "oneOf": [
            {
              "$ref": "#/components/schemas/DepositJSON"
            },
            {
              "$ref": "#/components/schemas/TermDepositJSON"
            },
            {
              "$ref": "#/components/schemas/RecurringDepositJSON"
            },
            {
              "$ref": "#/components/schemas/InsurancePoliciesJSON"
            },
            {
              "$ref": "#/components/schemas/InsurancePoliciesJSON"
            },
            {
              "$ref": "#/components/schemas/EquitiesJSON"
            },
            {
              "$ref": "#/components/schemas/MutualFundsJSON"
            },
            {
              "$ref": "#/components/schemas/MutualFundsJSON"
            },
            {
              "$ref": "#/components/schemas/GST"
            },
            {
              "$ref": "#/components/schemas/ETFJSON"
            },
            {
              "$ref": "#/components/schemas/XML"
            }
          ],
          "discriminator": {
            "propertyName": "type",
            "mapping": {
              "deposit": "#/components/schemas/DepositJSON",
              "term_deposit": "#/components/schemas/TermDepositJSON",
              "recurring_deposit": "#/components/schemas/RecurringDepositJSON",
              "insurance_policies": "#/components/schemas/InsurancePoliciesJSON",
              "insurance": "#/components/schemas/InsurancePoliciesJSON",
              "equities": "#/components/schemas/EquitiesJSON",
              "mutual_funds": "#/components/schemas/MutualFundsJSON",
              "mutualfunds": "#/components/schemas/MutualFundsJSON",
              "gstr1_3b": "#/components/schemas/GST",
              "etf": "#/components/schemas/ETFJSON",
              "xml": "#/components/schemas/XML"
            }
          }
        },
        "XML": {
          "type": "object",
          "properties": {
            "xml": {
              "type": "string"
            }
          }
        },
        "ETFJSON": {
          "type": "object",
          "properties": {
            "account": {
              "$ref": "#/components/schemas/ETFJSONAccount"
            }
          }
        },
        "ETFJSONAccount": {
          "type": "object",
          "properties": {
            "linkedAccRef": {
              "type": "string"
            },
            "maskedAccNumber": {
              "type": "string"
            },
            "maskedDematID": {
              "type": "string"
            },
            "type": {
              "type": "string"
            },
            "version": {
              "type": "string"
            },
            "profile": {
              "$ref": "#/components/schemas/ETFJSONAccountProfile"
            },
            "summary": {
              "$ref": "#/components/schemas/ETFJSONAccountSummary"
            },
            "transactions": {
              "$ref": "#/components/schemas/ETFJSONAccountTransactions"
            }
          }
        },
        "ETFJSONAccountTransactions": {
          "type": "object",
          "properties": {
            "startDate": {
              "type": "string"
            },
            "endDate": {
              "type": "string"
            },
            "transaction": {
              "type": "array",
              "nullable": true,
              "items": {
                "$ref": "#/components/schemas/ETFJSONAccountTransactionsTransaction"
              }
            }
          }
        },
        "ETFJSONAccountTransactionsTransaction": {
          "type": "object",
          "properties": {
            "amount": {
              "type": "string"
            },
            "brokerCode": {
              "type": "string"
            },
            "isin": {
              "type": "string"
            },
            "isinDescription": {
              "type": "string"
            },
            "narration": {
              "type": "string"
            },
            "nav": {
              "type": "string"
            },
            "transactionDateTime": {
              "type": "string"
            },
            "txnId": {
              "type": "string"
            },
            "type": {
              "type": "string"
            },
            "units": {
              "type": "string"
            }
          }
        },
        "ETFJSONAccountSummary": {
          "type": "object",
          "properties": {
            "investment": {
              "$ref": "#/components/schemas/ETFJSONAccountSummaryHoldings"
            },
            "currentValue": {
              "type": "string"
            },
            "investmentValue": {
              "type": "string"
            }
          }
        },
        "ETFJSONAccountSummaryHoldings": {
          "type": "object",
          "properties": {
            "holdings": {
              "$ref": "#/components/schemas/ETFJSONAccountSummaryHoldingsHolding"
            },
            "type": {
              "type": "string"
            }
          }
        },
        "ETFJSONAccountSummaryHoldingsHolding": {
          "type": "object",
          "properties": {
            "holding": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ETFJSONAccountSummaryHoldingsHolding"
              }
            }
          }
        },
        "ETFJSONAccountProfile": {
          "type": "object",
          "properties": {
            "holders": {
              "$ref": "#/components/schemas/ETFJSONAccountProfileHolders"
            }
          }
        },
        "ETFJSONAccountProfileHolders": {
          "type": "object",
          "properties": {
            "type": {
              "type": "string"
            },
            "holder": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ETFJSONAccountProfileHoldersHolder"
              }
            }
          }
        },
        "ETFJSONAccountProfileHoldersHolder": {
          "type": "object",
          "properties": {
            "address": {
              "type": "string"
            },
            "kycCompliance": {
              "type": "string"
            },
            "dob": {
              "type": "string"
            },
            "email": {
              "type": "string"
            },
            "landline": {
              "type": "string"
            },
            "mobile": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "nominee": {
              "type": "string"
            },
            "pan": {
              "type": "string"
            },
            "dematId": {
              "type": "string"
            },
            "boId": {
              "type": "string"
            },
            "dpId": {
              "type": "string"
            },
            "brokerName": {
              "type": "string"
            }
          }
        },
        "GST": {
          "type": "object",
          "properties": {
            "account": {
              "$ref": "#/components/schemas/Account"
            }
          }
        },
        "Account": {
          "type": "object",
          "properties": {
            "linkedAccRef": {
              "type": "string"
            },
            "maskedGstinNumber": {
              "type": "string"
            },
            "version": {
              "type": "string"
            },
            "type": {
              "type": "string"
            },
            "profile": {
              "$ref": "#/components/schemas/Profile"
            },
            "transactions": {
              "$ref": "#/components/schemas/Transactions"
            }
          }
        },
        "Transactions": {
          "type": "object",
          "properties": {
            "endt": {
              "type": "string"
            },
            "strdt": {
              "type": "string"
            },
            "gstr1Details": {
              "$ref": "#/components/schemas/Gstr1DetailsSchema1"
            },
            "gstr3bDetails": {
              "$ref": "#/components/schemas/Gstr3bDetails"
            }
          }
        },
        "Gstr3bDetails": {
          "type": "object",
          "properties": {
            "gstr3b": {
              "$ref": "#/components/schemas/Gstr3b"
            }
          }
        },
        "Gstr3b": {
          "type": "object",
          "properties": {
            "retPrd": {
              "type": "string"
            },
            "dof": {
              "type": "string"
            },
            "status": {
              "type": "string"
            },
            "filingFrequency": {
              "type": "string"
            },
            "supDetails": {
              "$ref": "#/components/schemas/SupDetail"
            },
            "supInter": {
              "$ref": "#/components/schemas/SupInterSchemaWrapper"
            },
            "ecoDtls": {
              "$ref": "#/components/schemas/EcoSup"
            },
            "itcElg": {
              "$ref": "#/components/schemas/ItcEligible"
            },
            "inwardSup": {
              "$ref": "#/components/schemas/ISupDetails"
            },
            "intrLtfee": {
              "$ref": "#/components/schemas/IntrLtfee"
            },
            "txPmt": {
              "$ref": "#/components/schemas/TxPyList"
            },
            "pdcashDtls": {
              "$ref": "#/components/schemas/PdCashLists"
            }
          }
        },
        "PdCashLists": {
          "type": "object",
          "properties": {
            "pdcashList": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/PdcashDetails"
              }
            },
            "pditc": {
              "$ref": "#/components/schemas/Pditc"
            }
          }
        },
        "Pditc": {
          "type": "object",
          "properties": {
            "transDesc": {
              "type": "string"
            },
            "iPdi": {
              "type": "string"
            },
            "iPdc": {
              "type": "string"
            },
            "iPds": {
              "type": "string"
            },
            "cPdi": {
              "type": "string"
            },
            "cPdc": {
              "type": "string"
            },
            "sPdi": {
              "type": "string"
            },
            "sPds": {
              "type": "string"
            },
            "csPdcs": {
              "type": "string"
            }
          }
        },
        "PdcashDetails": {
          "type": "object",
          "properties": {
            "pdcash": {
              "$ref": "#/components/schemas/Pdcash"
            }
          }
        },
        "Pdcash": {
          "type": "object",
          "properties": {
            "transDesc": {
              "type": "string"
            },
            "ipd": {
              "type": "string"
            },
            "cpd": {
              "type": "string"
            },
            "spd": {
              "type": "string"
            },
            "cspd": {
              "type": "string"
            },
            "iIntrpd": {
              "type": "string"
            },
            "cIntrpd": {
              "type": "string"
            },
            "sIntrpd": {
              "type": "string"
            },
            "csIntrpd": {
              "type": "string"
            },
            "cLfeepd": {
              "type": "string"
            },
            "sLfeepd": {
              "type": "string"
            }
          }
        },
        "TxPyList": {
          "type": "object",
          "properties": {
            "txPyList": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/TxPy"
              }
            }
          }
        },
        "TxPy": {
          "type": "object",
          "properties": {
            "txPy": {
              "$ref": "#/components/schemas/TxPy"
            }
          }
        },
        "IntrLtfee": {
          "type": "object",
          "properties": {
            "intrDetails": {
              "$ref": "#/components/schemas/IntrDetails"
            },
            "ltfeeDetails": {
              "$ref": "#/components/schemas/IntrDetails"
            }
          }
        },
        "IntrDetails": {
          "type": "object",
          "properties": {
            "iamt": {
              "type": "string"
            },
            "camt": {
              "type": "string"
            },
            "samt": {
              "type": "string"
            },
            "csamt": {
              "type": "string"
            }
          }
        },
        "ISupDetails": {
          "type": "object",
          "properties": {
            "isupDetailsList": {
              "$ref": "#/components/schemas/IsupDetailsList"
            }
          }
        },
        "IsupDetailsList": {
          "type": "object",
          "properties": {
            "isupDetails": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/IsupDetails"
              }
            }
          }
        },
        "IsupDetails": {
          "type": "object",
          "properties": {
            "ty": {
              "type": "string"
            },
            "inter": {
              "type": "string"
            },
            "intra": {
              "type": "string"
            }
          }
        },
        "ItcEligible": {
          "type": "object",
          "properties": {
            "itcAvlList": {
              "$ref": "#/components/schemas/ItcAvlList"
            },
            "itcRevList": {
              "$ref": "#/components/schemas/ItcRevList"
            },
            "itcNet": {
              "$ref": "#/components/schemas/ItcRev"
            },
            "itcInelgList": {
              "$ref": "#/components/schemas/ItcInelgList"
            }
          }
        },
        "ItcInelgList": {
          "type": "object",
          "properties": {
            "itcInelg": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ItcRev"
              }
            }
          }
        },
        "ItcRev": {
          "type": "object",
          "properties": {
            "type": {
              "type": "string"
            },
            "iamt": {
              "type": "string"
            },
            "camt": {
              "type": "string"
            },
            "samt": {
              "type": "string"
            },
            "csamt": {
              "type": "string"
            }
          }
        },
        "ItcRevList": {
          "type": "object",
          "properties": {
            "itcRev": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ItcRev"
              }
            }
          }
        },
        "ItcAvlList": {
          "type": "object",
          "properties": {
            "itcAvl": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ItcAvl"
              }
            }
          }
        },
        "ItcAvl": {
          "type": "object",
          "properties": {
            "type": {
              "type": "string"
            },
            "iamt": {
              "type": "string"
            },
            "camt": {
              "type": "string"
            },
            "samt": {
              "type": "string"
            },
            "csamt": {
              "type": "string"
            }
          }
        },
        "EcoSup": {
          "type": "object",
          "properties": {
            "ecoSup": {
              "$ref": "#/components/schemas/EcoSup"
            },
            "ecoRegSup": {
              "$ref": "#/components/schemas/EcoSup"
            }
          }
        },
        "SupInterSchemaWrapper": {
          "type": "object",
          "properties": {
            "unregDetailsList": {
              "$ref": "#/components/schemas/SupInter"
            },
            "compDetailsList": {
              "$ref": "#/components/schemas/SupInter"
            },
            "uinDetailsList": {
              "$ref": "#/components/schemas/SupInter"
            }
          }
        },
        "SupInter": {
          "type": "object",
          "properties": {
            "unregDetails": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/SupInterDetails"
              }
            },
            "compDetails": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/SupInterDetails"
              }
            },
            "uinDetails": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/SupInterDetails"
              }
            }
          }
        },
        "SupInterDetails": {
          "type": "object",
          "properties": {
            "txval": {
              "type": "string"
            },
            "iamt": {
              "type": "string"
            },
            "pos": {
              "type": "string"
            }
          }
        },
        "SupDetail": {
          "type": "object",
          "properties": {
            "osupDet": {
              "$ref": "#/components/schemas/SupDetails"
            },
            "osupZero": {
              "$ref": "#/components/schemas/SupDetails"
            },
            "osupNilExmp": {
              "$ref": "#/components/schemas/SupDetails"
            },
            "isupRev": {
              "$ref": "#/components/schemas/SupDetails"
            },
            "osupNongst": {
              "$ref": "#/components/schemas/SupDetails"
            }
          }
        },
        "SupDetails": {
          "type": "object",
          "properties": {
            "txval": {
              "type": "string"
            },
            "iamt": {
              "type": "string"
            },
            "camt": {
              "type": "string"
            },
            "samt": {
              "type": "string"
            },
            "csamt": {
              "type": "string"
            }
          }
        },
        "Gstr1DetailsSchema1": {
          "type": "object",
          "properties": {
            "gstr1": {
              "$ref": "#/components/schemas/Gstr1Details"
            }
          }
        },
        "Gstr1Details": {
          "type": "object",
          "properties": {
            "dof": {
              "type": "string"
            },
            "filingFrequency": {
              "type": "string"
            },
            "retPrd": {
              "type": "string"
            },
            "status": {
              "type": "string"
            },
            "b2bDtls": {
              "$ref": "#/components/schemas/B2B"
            }
          }
        },
        "B2B": {
          "type": "object",
          "properties": {
            "b2b": {
              "$ref": "#/components/schemas/B2B"
            }
          }
        },
        "Profile": {
          "type": "object",
          "properties": {
            "businessDetails": {
              "$ref": "#/components/schemas/BusinessDetails"
            },
            "placeofBusiness": {
              "$ref": "#/components/schemas/PlaceofBusiness"
            }
          }
        },
        "PlaceofBusiness": {
          "type": "object",
          "properties": {
            "address": {
              "$ref": "#/components/schemas/Address"
            },
            "natureOfBusinessList": {
              "$ref": "#/components/schemas/NatureOfBusinessList"
            }
          }
        },
        "NatureOfBusinessList": {
          "type": "object",
          "properties": {
            "ntr": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "Address": {
          "type": "object",
          "properties": {
            "bnm": {
              "type": "string"
            },
            "bno": {
              "type": "string"
            },
            "dst": {
              "type": "string"
            },
            "flno": {
              "type": "string"
            },
            "loc": {
              "type": "string"
            },
            "pncd": {
              "type": "string"
            },
            "st": {
              "type": "string"
            },
            "stcd": {
              "type": "string"
            }
          }
        },
        "BusinessDetails": {
          "type": "object",
          "properties": {
            "apprvdt": {
              "type": "string"
            },
            "lgnm": {
              "type": "string"
            },
            "dty": {
              "type": "string"
            },
            "iscmp": {
              "type": "string"
            },
            "sts": {
              "type": "string"
            },
            "trdnm": {
              "type": "string"
            },
            "categoryList": {
              "$ref": "#/components/schemas/CategoryList"
            }
          }
        },
        "CategoryList": {
          "type": "object",
          "properties": {
            "cat": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "MutualFundsJSON": {
          "type": "object",
          "properties": {
            "account": {
              "$ref": "#/components/schemas/MutualFundJSON"
            }
          }
        },
        "MutualFundJSON": {
          "type": "object",
          "properties": {
            "linkedAccRef": {
              "type": "string"
            },
            "maskedAccNumber": {
              "type": "string"
            },
            "type": {
              "type": "string"
            },
            "version": {
              "type": "string"
            },
            "maskedDematID": {
              "type": "string"
            },
            "maskedFolioNo": {
              "type": "string"
            },
            "profile": {
              "$ref": "#/components/schemas/MutualFundJSONSchemaProfile"
            },
            "summary": {
              "$ref": "#/components/schemas/MutualFundJSONSchemaSummary"
            },
            "transactions": {
              "$ref": "#/components/schemas/MutualFundJSONSchemaTransactions"
            }
          }
        },
        "MutualFundJSONSchemaTransactions": {
          "type": "object",
          "properties": {
            "startDate": {
              "type": "string"
            },
            "endDate": {
              "type": "string"
            },
            "transaction": {
              "type": "array",
              "nullable": true,
              "items": {
                "$ref": "#/components/schemas/MutualFundJSONSchemaTransactionsTransaction"
              }
            }
          }
        },
        "MutualFundJSONSchemaTransactionsTransaction": {
          "type": "object",
          "properties": {
            "amc": {
              "type": "string"
            },
            "registrar": {
              "type": "string"
            },
            "schemeCode": {
              "type": "string"
            },
            "schemePlan": {
              "type": "string"
            },
            "isin": {
              "type": "string"
            },
            "amfiCode": {
              "type": "string"
            },
            "ucc": {
              "type": "string"
            },
            "amount": {
              "type": "string"
            },
            "nav": {
              "type": "string"
            },
            "navDate": {
              "type": "string"
            },
            "type": {
              "type": "string"
            },
            "lock-inFlag": {
              "type": "string"
            },
            "lock-inDays": {
              "type": "string"
            },
            "mode": {
              "type": "string"
            },
            "narration": {
              "type": "string"
            },
            "txnId": {
              "type": "string"
            },
            "isinDescription": {
              "type": "string"
            },
            "units": {
              "type": "string"
            },
            "transactionDate": {
              "type": "string"
            }
          }
        },
        "MutualFundJSONSchemaSummary": {
          "type": "object",
          "properties": {
            "investment": {
              "$ref": "#/components/schemas/MutualFundJSONSchemaSummaryHoldings"
            },
            "costValue": {
              "type": "string"
            },
            "currentValue": {
              "type": "string"
            }
          }
        },
        "MutualFundJSONSchemaSummaryHoldings": {
          "type": "object",
          "properties": {
            "holdings": {
              "$ref": "#/components/schemas/MutualFundJSONSchemaSummaryHoldingsHolding"
            },
            "type": {
              "type": "string"
            }
          }
        },
        "MutualFundJSONSchemaSummaryHoldingsHolding": {
          "type": "object",
          "properties": {
            "holding": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/MutualFundJSONSchemaSummaryHoldingsHolding"
              }
            }
          }
        },
        "MutualFundJSONSchemaProfile": {
          "type": "object",
          "properties": {
            "holders": {
              "$ref": "#/components/schemas/MutualFundJSONSchemaProfileHolders"
            }
          }
        },
        "MutualFundJSONSchemaProfileHolders": {
          "type": "object",
          "properties": {
            "type": {
              "type": "string"
            },
            "holder": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/MutualFundJSONSchemaProfileHoldersHolder"
              }
            }
          }
        },
        "MutualFundJSONSchemaProfileHoldersHolder": {
          "type": "object",
          "properties": {
            "address": {
              "type": "string"
            },
            "kycCompliance": {
              "type": "string"
            },
            "dob": {
              "type": "string"
            },
            "email": {
              "type": "string"
            },
            "landline": {
              "type": "string"
            },
            "mobile": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "nominee": {
              "type": "string"
            },
            "pan": {
              "type": "string"
            },
            "dematId": {
              "type": "string"
            },
            "folioNo": {
              "type": "string"
            }
          }
        },
        "EquitiesJSON": {
          "type": "object",
          "properties": {
            "account": {
              "$ref": "#/components/schemas/EquitiesJSONAccount"
            }
          }
        },
        "EquitiesJSONAccount": {
          "type": "object",
          "properties": {
            "linkedAccRef": {
              "type": "string"
            },
            "maskedAccNumber": {
              "type": "string"
            },
            "type": {
              "type": "string"
            },
            "version": {
              "type": "string"
            },
            "profile": {
              "$ref": "#/components/schemas/EquitiesJSONAccountProfile"
            },
            "summary": {
              "$ref": "#/components/schemas/EquitiesJSONAccountSummary"
            },
            "transactions": {
              "$ref": "#/components/schemas/EquitiesJSONAccountTransactions"
            }
          }
        },
        "EquitiesJSONAccountTransactions": {
          "type": "object",
          "properties": {
            "startDate": {
              "type": "string"
            },
            "endDate": {
              "type": "string"
            },
            "transaction": {
              "type": "array",
              "nullable": true,
              "items": {
                "$ref": "#/components/schemas/EquitiesJSONAccountTransactionsTransaction"
              }
            }
          }
        },
        "EquitiesJSONAccountTransactionsTransaction": {
          "type": "object",
          "properties": {
            "companyName": {
              "type": "string"
            },
            "equityCategory": {
              "type": "string"
            },
            "exchange": {
              "type": "string"
            },
            "instrumentType": {
              "type": "string"
            },
            "isin": {
              "type": "string"
            },
            "narration": {
              "type": "string"
            },
            "optionType": {
              "type": "string"
            },
            "orderId": {
              "type": "string"
            },
            "otherCharges": {
              "type": "string"
            },
            "rate": {
              "type": "string"
            },
            "shareHolderEquityType": {
              "type": "string"
            },
            "strikePrice": {
              "type": "string"
            },
            "symbol": {
              "type": "string"
            },
            "totalCharge": {
              "type": "string"
            },
            "tradeValue": {
              "type": "string"
            },
            "transactionDateTime": {
              "type": "string"
            },
            "txnId": {
              "type": "string"
            },
            "type": {
              "type": "string"
            },
            "units": {
              "type": "string"
            }
          }
        },
        "EquitiesJSONAccountSummary": {
          "type": "object",
          "properties": {
            "investment": {
              "$ref": "#/components/schemas/EquitiesJSONAccountSummaryHoldings"
            },
            "currentValue": {
              "type": "string"
            },
            "investmentValue": {
              "type": "string"
            }
          }
        },
        "EquitiesJSONAccountSummaryHoldings": {
          "type": "object",
          "properties": {
            "holdings": {
              "$ref": "#/components/schemas/EquitiesJSONAccountSummaryHoldingsHolding"
            },
            "type": {
              "type": "string"
            }
          }
        },
        "EquitiesJSONAccountSummaryHoldingsHolding": {
          "type": "object",
          "properties": {
            "holding": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/EquitiesJSONAccountSummaryHoldingsHolding"
              }
            }
          }
        },
        "EquitiesJSONAccountProfile": {
          "type": "object",
          "properties": {
            "holders": {
              "$ref": "#/components/schemas/EquitiesJSONAccountProfileHolders"
            }
          }
        },
        "EquitiesJSONAccountProfileHolders": {
          "type": "object",
          "properties": {
            "type": {
              "type": "string"
            },
            "holder": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/EquitiesJSONAccountProfileHoldersHolder"
              }
            }
          }
        },
        "EquitiesJSONAccountProfileHoldersHolder": {
          "type": "object",
          "properties": {
            "address": {
              "type": "string"
            },
            "ckycCompliance": {
              "type": "string"
            },
            "dob": {
              "type": "string"
            },
            "email": {
              "type": "string"
            },
            "landline": {
              "type": "string"
            },
            "mobile": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "nominee": {
              "type": "string"
            },
            "pan": {
              "type": "string"
            },
            "rank": {
              "type": "string"
            },
            "dematId": {
              "type": "string"
            },
            "boId": {
              "type": "string"
            },
            "dpId": {
              "type": "string"
            },
            "brokerName": {
              "type": "string"
            }
          }
        },
        "InsurancePoliciesJSON": {
          "type": "object",
          "properties": {
            "account": {
              "$ref": "#/components/schemas/InsurancePoliciesJSONAccount"
            }
          }
        },
        "InsurancePoliciesJSONAccount": {
          "type": "object",
          "properties": {
            "linkedAccRef": {
              "type": "string"
            },
            "maskedAccNumber": {
              "type": "string"
            },
            "type": {
              "type": "string"
            },
            "version": {
              "type": "string"
            },
            "profile": {
              "$ref": "#/components/schemas/InsurancePoliciesJSONAccountProfile"
            },
            "summary": {
              "$ref": "#/components/schemas/InsurancePoliciesJSONAccountSummary"
            },
            "transactions": {
              "$ref": "#/components/schemas/InsurancePoliciesJSONAccountTransactions"
            }
          }
        },
        "InsurancePoliciesJSONAccountTransactions": {
          "type": "object",
          "properties": {
            "startDate": {
              "type": "string"
            },
            "endDate": {
              "type": "string"
            },
            "transaction": {
              "type": "array",
              "nullable": true,
              "items": {
                "$ref": "#/components/schemas/InsurancePoliciesJSONAccountTransactionsTransaction"
              }
            }
          }
        },
        "InsurancePoliciesJSONAccountTransactionsTransaction": {
          "type": "object",
          "properties": {
            "amount": {
              "type": "string"
            },
            "narration": {
              "type": "string"
            },
            "txnId": {
              "type": "string"
            },
            "type": {
              "type": "string"
            },
            "txnDate": {
              "type": "string"
            }
          }
        },
        "InsurancePoliciesJSONAccountSummary": {
          "type": "object",
          "properties": {
            "contractClauses": {
              "$ref": "#/components/schemas/InsurancePoliciesJSONAccountSummaryContractClauses"
            },
            "covers": {
              "$ref": "#/components/schemas/InsurancePoliciesJSONAccountSummaryCover"
            },
            "moneyBacks": {
              "$ref": "#/components/schemas/InsurancePoliciesJSONAccountMoneyBack"
            },
            "coverAmount": {
              "type": "string"
            },
            "coverType": {
              "type": "string"
            },
            "eiaNumber": {
              "type": "string"
            },
            "maturityBenefit": {
              "type": "string"
            },
            "maturityDate": {
              "type": "string"
            },
            "policyName": {
              "type": "string"
            },
            "policyNumber": {
              "type": "string"
            },
            "policyStartDate": {
              "type": "string"
            },
            "policyType": {
              "type": "string"
            },
            "premiumAmount": {
              "type": "string"
            },
            "premiumFrequency": {
              "type": "string"
            },
            "premiumPaymentMonths": {
              "type": "string"
            },
            "premiumPaymentYears": {
              "type": "string"
            },
            "sumAssured": {
              "type": "string"
            },
            "tenureMonths": {
              "type": "string"
            },
            "tenureYears": {
              "type": "string"
            }
          }
        },
        "InsurancePoliciesJSONAccountMoneyBack": {
          "type": "object",
          "properties": {
            "MoneyBack": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/InsurancePoliciesJSONAccountMoneyBack"
              }
            }
          }
        },
        "InsurancePoliciesJSONAccountSummaryCover": {
          "type": "object",
          "properties": {
            "cover": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/InsurancePoliciesJSONAccountSummaryCover"
              }
            }
          }
        },
        "InsurancePoliciesJSONAccountSummaryContractClauses": {
          "type": "object",
          "properties": {
            "contractClause": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/InsurancePoliciesJSONAccountSummaryContractClause"
              }
            }
          }
        },
        "InsurancePoliciesJSONAccountSummaryContractClause": {
          "type": "object",
          "properties": {
            "amount": {
              "type": "string"
            },
            "conditions": {
              "type": "string"
            },
            "description": {
              "type": "string"
            },
            "exlcusions": {
              "type": "string"
            },
            "subLimit": {
              "type": "string"
            },
            "title": {
              "type": "string"
            }
          }
        },
        "InsurancePoliciesJSONAccountProfile": {
          "type": "object",
          "properties": {
            "holders": {
              "$ref": "#/components/schemas/InsurancePoliciesJSONAccountProfileHolders"
            },
            "riders": {
              "$ref": "#/components/schemas/InsurancePoliciesJSONAccountRiders"
            }
          }
        },
        "InsurancePoliciesJSONAccountRiders": {
          "type": "object",
          "properties": {
            "rider": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/InsurancePoliciesJSONAccountProfileRidersRider"
              }
            }
          }
        },
        "InsurancePoliciesJSONAccountProfileRidersRider": {
          "type": "object",
          "properties": {
            "policyEndDate": {
              "type": "string"
            },
            "policyStartDate": {
              "type": "string"
            },
            "premiumAmount": {
              "type": "string"
            },
            "riderType": {
              "type": "string"
            },
            "sumAssured": {
              "type": "string"
            },
            "tenureMonths": {
              "type": "string"
            },
            "tenureYears": {
              "type": "string"
            }
          }
        },
        "InsurancePoliciesJSONAccountProfileHolders": {
          "type": "object",
          "properties": {
            "type": {
              "type": "string"
            },
            "holder": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/InsurancePoliciesJSONAccountProfileHoldersHolder"
              }
            }
          }
        },
        "InsurancePoliciesJSONAccountProfileHoldersHolder": {
          "type": "object",
          "properties": {
            "address": {
              "type": "string"
            },
            "ckycCompliance": {
              "type": "string"
            },
            "dob": {
              "type": "string"
            },
            "email": {
              "type": "string"
            },
            "landline": {
              "type": "string"
            },
            "mobile": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "nominee": {
              "type": "string"
            },
            "pan": {
              "type": "string"
            },
            "rank": {
              "type": "string"
            }
          }
        },
        "RecurringDepositJSON": {
          "type": "object",
          "properties": {
            "account": {
              "$ref": "#/components/schemas/RecurringDepositJSONAccount"
            }
          }
        },
        "RecurringDepositJSONAccount": {
          "type": "object",
          "properties": {
            "linkedAccRef": {
              "type": "string"
            },
            "maskedAccNumber": {
              "type": "string"
            },
            "type": {
              "type": "string"
            },
            "version": {
              "type": "string"
            },
            "profile": {
              "$ref": "#/components/schemas/RecurringDepositJSONAccountProfile"
            },
            "summary": {
              "$ref": "#/components/schemas/RecurringDepositJSONAccountSummary"
            },
            "transactions": {
              "$ref": "#/components/schemas/RecurringDepositJSONAccountTransactions"
            }
          }
        },
        "RecurringDepositJSONAccountTransactions": {
          "type": "object",
          "properties": {
            "startDate": {
              "type": "string"
            },
            "endDate": {
              "type": "string"
            },
            "transaction": {
              "type": "array",
              "nullable": true,
              "items": {
                "$ref": "#/components/schemas/RecurringDepositJSONAccountTransactionsTransaction"
              }
            }
          }
        },
        "RecurringDepositJSONAccountTransactionsTransaction": {
          "type": "object",
          "properties": {
            "amount": {
              "type": "string"
            },
            "currentBalance": {
              "type": "string"
            },
            "mode": {
              "type": "string"
            },
            "narration": {
              "type": "string"
            },
            "reference": {
              "type": "string"
            },
            "transactionTimestamp": {
              "type": "string"
            },
            "txnId": {
              "type": "string"
            },
            "type": {
              "type": "string"
            },
            "valueDate": {
              "type": "string"
            }
          }
        },
        "RecurringDepositJSONAccountSummary": {
          "type": "object",
          "properties": {
            "accountType": {
              "type": "string"
            },
            "branch": {
              "type": "string"
            },
            "compoundingFrequency": {
              "type": "string"
            },
            "currentValue": {
              "type": "string"
            },
            "description": {
              "type": "string"
            },
            "ifsc": {
              "type": "string"
            },
            "interestComputation": {
              "type": "string"
            },
            "interestOnMaturity": {
              "type": "string"
            },
            "interestPayout": {
              "type": "string"
            },
            "interestPeriodicPayoutAmount": {
              "type": "string"
            },
            "interestRate": {
              "type": "string"
            },
            "maturityAmount": {
              "type": "string"
            },
            "maturityDate": {
              "type": "string"
            },
            "openingDate": {
              "type": "string"
            },
            "principalAmount": {
              "type": "string"
            },
            "recurringAmount": {
              "type": "string"
            },
            "recurringDepositDay": {
              "type": "string"
            },
            "tenureDays": {
              "type": "string"
            },
            "tenureMonths": {
              "type": "string"
            },
            "tenureYears": {
              "type": "string"
            }
          }
        },
        "RecurringDepositJSONAccountProfile": {
          "type": "object",
          "properties": {
            "holders": {
              "$ref": "#/components/schemas/RecurringDepositJSONAccountProfileHolders"
            }
          }
        },
        "RecurringDepositJSONAccountProfileHolders": {
          "type": "object",
          "properties": {
            "type": {
              "type": "string"
            },
            "holder": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/RecurringDepositJSONAccountProfileHoldersHolder"
              }
            }
          }
        },
        "RecurringDepositJSONAccountProfileHoldersHolder": {
          "type": "object",
          "properties": {
            "address": {
              "type": "string"
            },
            "ckycCompliance": {
              "type": "string"
            },
            "dob": {
              "type": "string"
            },
            "email": {
              "type": "string"
            },
            "landline": {
              "type": "string"
            },
            "mobile": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "nominee": {
              "type": "string"
            },
            "pan": {
              "type": "string"
            }
          }
        },
        "TermDepositJSON": {
          "type": "object",
          "properties": {
            "account": {
              "$ref": "#/components/schemas/TermDepositJSONAccount"
            }
          }
        },
        "TermDepositJSONAccount": {
          "type": "object",
          "properties": {
            "linkedAccRef": {
              "type": "string"
            },
            "maskedAccNumber": {
              "type": "string"
            },
            "type": {
              "type": "string"
            },
            "version": {
              "type": "string"
            },
            "profile": {
              "$ref": "#/components/schemas/TermDepositJSONAccountProfile"
            },
            "summary": {
              "$ref": "#/components/schemas/TermDepositJSONAccountSummary"
            },
            "transactions": {
              "$ref": "#/components/schemas/TermDepositJSONAccountTransactions"
            }
          }
        },
        "TermDepositJSONAccountTransactions": {
          "type": "object",
          "properties": {
            "startDate": {
              "type": "string"
            },
            "endDate": {
              "type": "string"
            },
            "transaction": {
              "type": "array",
              "nullable": true,
              "items": {
                "$ref": "#/components/schemas/TermDepositJSONAccountTransactionsTransaction"
              }
            }
          }
        },
        "TermDepositJSONAccountTransactionsTransaction": {
          "type": "object",
          "properties": {
            "amount": {
              "type": "string"
            },
            "currentBalance": {
              "type": "string"
            },
            "mode": {
              "type": "string"
            },
            "narration": {
              "type": "string"
            },
            "reference": {
              "type": "string"
            },
            "transactionTimestamp": {
              "type": "string"
            },
            "txnId": {
              "type": "string"
            },
            "type": {
              "type": "string"
            },
            "valueDate": {
              "type": "string"
            }
          }
        },
        "TermDepositJSONAccountSummary": {
          "type": "object",
          "properties": {
            "accountType": {
              "type": "string"
            },
            "branch": {
              "type": "string"
            },
            "compoundingFrequency": {
              "type": "string"
            },
            "currentValue": {
              "type": "string"
            },
            "description": {
              "type": "string"
            },
            "ifsc": {
              "type": "string"
            },
            "interestComputation": {
              "type": "string"
            },
            "interestOnMaturity": {
              "type": "string"
            },
            "interestPayout": {
              "type": "string"
            },
            "interestPeriodicPayoutAmount": {
              "type": "string"
            },
            "interestRate": {
              "type": "string"
            },
            "maturityAmount": {
              "type": "string"
            },
            "maturityDate": {
              "type": "string"
            },
            "openingDate": {
              "type": "string"
            },
            "principalAmount": {
              "type": "string"
            },
            "recurringAmount": {
              "type": "string"
            },
            "recurringDepositDay": {
              "type": "string"
            },
            "tenureDays": {
              "type": "string"
            },
            "tenureMonths": {
              "type": "string"
            },
            "tenureYears": {
              "type": "string"
            }
          }
        },
        "TermDepositJSONAccountProfile": {
          "type": "object",
          "properties": {
            "holders": {
              "$ref": "#/components/schemas/TermDepositJSONAccountProfileHolders"
            }
          }
        },
        "TermDepositJSONAccountProfileHolders": {
          "type": "object",
          "properties": {
            "type": {
              "type": "string"
            },
            "holder": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/TermDepositJSONAccountProfileHoldersHolder"
              }
            }
          }
        },
        "TermDepositJSONAccountProfileHoldersHolder": {
          "type": "object",
          "properties": {
            "address": {
              "type": "string"
            },
            "ckycCompliance": {
              "type": "string"
            },
            "dob": {
              "type": "string"
            },
            "email": {
              "type": "string"
            },
            "landline": {
              "type": "string"
            },
            "mobile": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "nominee": {
              "type": "string"
            },
            "pan": {
              "type": "string"
            }
          }
        },
        "DepositJSON": {
          "type": "object",
          "properties": {
            "account": {
              "$ref": "#/components/schemas/DepositJSONAccount"
            }
          }
        },
        "DepositJSONAccount": {
          "type": "object",
          "properties": {
            "linkedAccRef": {
              "type": "string"
            },
            "maskedAccNumber": {
              "type": "string"
            },
            "type": {
              "type": "string"
            },
            "version": {
              "type": "string"
            },
            "profile": {
              "$ref": "#/components/schemas/DepositJSONAccountProfile"
            },
            "summary": {
              "$ref": "#/components/schemas/DepositJSONAccountSummary"
            },
            "transactions": {
              "$ref": "#/components/schemas/DepositJSONAccountTransactions"
            }
          }
        },
        "DepositJSONAccountTransactions": {
          "type": "object",
          "properties": {
            "startDate": {
              "type": "string"
            },
            "endDate": {
              "type": "string"
            },
            "transaction": {
              "type": "array",
              "nullable": true,
              "items": {
                "$ref": "#/components/schemas/DepositJSONAccountTransactionsTransaction"
              }
            }
          }
        },
        "DepositJSONAccountTransactionsTransaction": {
          "type": "object",
          "properties": {
            "amount": {
              "type": "string"
            },
            "currentBalance": {
              "type": "string"
            },
            "mode": {
              "type": "string"
            },
            "narration": {
              "type": "string"
            },
            "reference": {
              "type": "string"
            },
            "transactionTimestamp": {
              "type": "string"
            },
            "txnId": {
              "type": "string"
            },
            "type": {
              "type": "string"
            },
            "valueDate": {
              "type": "string"
            }
          }
        },
        "DepositJSONAccountSummary": {
          "type": "object",
          "properties": {
            "balanceDateTime": {
              "type": "string"
            },
            "branch": {
              "type": "string"
            },
            "currency": {
              "type": "string"
            },
            "currentBalance": {
              "type": "string"
            },
            "currentODLimit": {
              "type": "string"
            },
            "drawingLimit": {
              "type": "string"
            },
            "exchgeRate": {
              "type": "string"
            },
            "facility": {
              "type": "string"
            },
            "ifscCode": {
              "type": "string"
            },
            "micrCode": {
              "type": "string"
            },
            "openingDate": {
              "type": "string"
            },
            "pending": {
              "$ref": "#/components/schemas/DepositJSONAccountSummaryPending"
            },
            "status": {
              "type": "string"
            },
            "type": {
              "type": "string"
            }
          }
        },
        "DepositJSONAccountSummaryPending": {
          "type": "object",
          "properties": {
            "amount": {
              "type": "string"
            },
            "transactionType": {
              "type": "string"
            }
          }
        },
        "DepositJSONAccountProfile": {
          "type": "object",
          "properties": {
            "holders": {
              "$ref": "#/components/schemas/DepositJSONAccountProfileHolders"
            }
          }
        },
        "DepositJSONAccountProfileHolders": {
          "type": "object",
          "properties": {
            "type": {
              "type": "string"
            },
            "holder": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/DepositJSONAccountProfileHoldersHolder"
              }
            }
          }
        },
        "DepositJSONAccountProfileHoldersHolder": {
          "type": "object",
          "properties": {
            "address": {
              "type": "string"
            },
            "ckycCompliance": {
              "type": "string"
            },
            "dob": {
              "type": "string"
            },
            "email": {
              "type": "string"
            },
            "landline": {
              "type": "string"
            },
            "mobile": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "nominee": {
              "type": "string"
            },
            "pan": {
              "type": "string"
            }
          }
        },
        "CreateFIDataFetchRequestV2": {
          "type": "object",
          "properties": {
            "format": {
              "type": "string",
              "enum": [
                "xml",
                "json"
              ],
              "description": "Format of decrypted data"
            },
            "dataRange": {
              "description": "Time range for which the data is being requested (should be inclusive of the consent's FIDataRange)",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ConsentsRequestConsentDetailFIDataRange"
                }
              ]
            },
            "consentId": {
              "type": "string",
              "format": "uuid",
              "description": "The request identifier to fetch the status and data."
            }
          },
          "required": [
            "consentId",
            "dataRange",
            "format"
          ]
        },
        "MultiConsentResponse": {
          "type": "object",
          "properties": {
            "consentCollectionId": {
              "type": "string"
            },
            "url": {
              "type": "string",
              "description": "Webview url"
            },
            "txnid": {
              "type": "string"
            }
          },
          "required": [
            "consentCollectionId",
            "txnid",
            "url"
          ]
        },
        "MultiConsentRequest": {
          "type": "object",
          "properties": {
            "optionalConsents": {
              "type": "array",
              "x-maximum": 1,
              "items": {
                "type": "string"
              }
            },
            "mandatoryConsents": {
              "type": "array",
              "x-minimum": 1,
              "x-maximum": 2,
              "items": {
                "type": "string"
              }
            }
          },
          "required": [
            "mandatoryConsents"
          ]
        },
        "RevokeConsentResponse": {
          "type": "object",
          "properties": {
            "status": {
              "type": "string",
              "enum": [
                "PENDING",
                "ACTIVE",
                "PAUSED",
                "REVOKED",
                "EXPIRED",
                "REJECTED"
              ],
              "description": "Surrogate status for this consent"
            }
          },
          "required": [
            "status"
          ]
        },
        "ConsentResponseV2": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "The request identifier to fetch the status and data."
            },
            "url": {
              "type": "string",
              "description": "The URL link to the consent manager app for user to complete the flow."
            },
            "status": {
              "type": "string",
              "enum": [
                "PENDING",
                "FAILED",
                "ACTIVE",
                "PAUSED",
                "REVOKED",
                "EXPIRED",
                "REJECTED"
              ],
              "description": "Surrogate status for this consent"
            },
            "detail": {
              "description": "The identifier of the Customer.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ConsentResponseConsentDetailV2"
                }
              ]
            },
            "redirectUrl": {
              "type": "string",
              "description": "URL to redirect to after completion of consent journey"
            },
            "context": {
              "type": "array",
              "items": {
                "description": "Specify extra data in key-value pair that might be required for custom arguments or filteration",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ConsentsRequestContext"
                  }
                ]
              }
            },
            "PAN": {
              "type": "string",
              "pattern": "^$|[A-Z]{5}[0-9]{4}[A-Z]{1}"
            },
            "usage": {
              "nullable": true,
              "description": "Usage object for this consent. Defines how many times and when this consent has been used for data fetch",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ConsentResponseConsentUsage1"
                }
              ]
            },
            "accountsLinked": {
              "type": "array",
              "description": "List of accounts which the consent would fetch FI from. For a consent between FIU & AA, this list could have accounts from multiple FIP. For a consent between FIP & AA, only accounts from particular FIP must be present in this section.",
              "items": {
                "$ref": "#/components/schemas/ConsentResponseConsentDetailAccountsItem"
              }
            }
          },
          "required": [
            "accountsLinked",
            "id",
            "status",
            "url"
          ]
        },
        "ConsentResponseConsentDetailAccountsItem": {
          "type": "object",
          "properties": {
            "linkRefNumber": {
              "type": "string",
              "description": "FIP's linkRefNumber as shared by the FIP after linking"
            },
            "maskedAccNumber": {
              "type": "string",
              "description": "Masked account number"
            },
            "accType": {
              "type": "string",
              "description": "Type of Account"
            },
            "fiType": {
              "type": "string",
              "description": "Type of Financial Information"
            },
            "fipId": {
              "type": "string",
              "description": "FIP ID"
            }
          }
        },
        "ConsentResponseConsentUsage1": {
          "type": "object",
          "properties": {
            "lastUsed": {
              "type": "string",
              "format": "date-time",
              "nullable": true,
              "description": "Timestamp of last data fetch for this consent"
            },
            "count": {
              "type": "number",
              "description": "Count of the number of times data has been fetched for this consent"
            }
          },
          "required": [
            "count",
            "lastUsed"
          ]
        },
        "ConsentsRequestContext": {
          "type": "object",
          "properties": {
            "value": {
              "type": "string",
              "description": "Value to key data"
            },
            "key": {
              "type": "string",
              "enum": [
                "accounttype",
                "fipId",
                "consentReviewAt",
                "purposeDescription",
                "purposeCode",
                "alternateNumber",
                "accountSelectionMode",
                "transactionType",
                "excludeFipIds"
              ],
              "description": "The key of data"
            }
          },
          "required": [
            "key",
            "value"
          ]
        },
        "ConsentResponseConsentDetailV2": {
          "type": "object",
          "properties": {
            "consentTypes": {
              "type": "array",
              "x-minimum": 1,
              "items": {
                "type": "string",
                "enum": [
                  "PROFILE",
                  "SUMMARY",
                  "TRANSACTIONS"
                ]
              }
            },
            "purpose": {
              "description": "Purpose of the consent defined in the AA Technical Specification",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ConsentResponseConsentDetailPurpose"
                }
              ]
            },
            "dataLife": {
              "description": "Datalife defines for how long can the FIU/AA Application store the data",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ConsentsRequestConsentDetailDataLife"
                }
              ]
            },
            "consentMode": {
              "type": "string",
              "enum": [
                "VIEW",
                "STORE",
                "QUERY",
                "STREAM"
              ],
              "description": "Consent Mode as defined in the AA Technical Specification"
            },
            "fiTypes": {
              "type": "array",
              "x-minimum": 1,
              "items": {
                "type": "string",
                "enum": [
                  "DEPOSIT",
                  "TERM_DEPOSIT",
                  "RECURRING_DEPOSIT",
                  "SIP",
                  "CP",
                  "GOVT_SECURITIES",
                  "EQUITIES",
                  "BONDS",
                  "DEBENTURES",
                  "MUTUAL_FUNDS",
                  "ETF",
                  "IDR",
                  "CIS",
                  "AIF",
                  "INSURANCE_POLICIES",
                  "NPS",
                  "INVIT",
                  "REIT",
                  "GSTR1_3B",
                  "OTHER"
                ],
                "description": "List of financial information types."
              }
            },
            "consentExpiry": {
              "type": "string",
              "format": "date-time",
              "description": "Expiry date-time for the consent"
            },
            "fetchType": {
              "type": "string",
              "enum": [
                "ONETIME",
                "PERIODIC"
              ],
              "description": "FI Fetch type. Could be ONETIME or PERIODIC"
            },
            "frequency": {
              "description": "Defines frequency of FI data fetch within the defined time unit. E.g.HOURLY,DAILY,MONTHLY,YEARLY.The maximum frequency value that can be defined is 1 request per HOUR. Similaraly it will be 24 requests per DAY and so on. Frequency can not be set below 1 request per hour.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ConsentsRequestConsentDetailFrequency"
                }
              ]
            },
            "consentStart": {
              "type": "string",
              "format": "date-time",
              "description": "Start date-time of the consent. This field would allow for Post-Dated consent."
            },
            "vua": {
              "type": "string"
            },
            "dataRange": {
              "description": "Data Range (Datetime) for the Financial Information Requested",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ConsentsRequestConsentDetailFIDataRange1"
                }
              ]
            },
            "dataFilter": {
              "type": "array",
              "description": "rules that will be utilized by FIP to filter the data",
              "items": {
                "$ref": "#/components/schemas/ConsentsRequestConsentDetailDataFilterItem"
              }
            }
          },
          "required": [
            "consentExpiry",
            "consentStart"
          ]
        },
        "ConsentsRequestConsentDetailDataFilterItem": {
          "type": "object",
          "properties": {
            "operator": {
              "type": "string",
              "enum": [
                "=",
                "!=",
                ">",
                "<",
                ">=",
                "<="
              ],
              "description": "Operator to filter data by."
            },
            "value": {
              "type": "string",
              "description": "Value to filter data"
            },
            "type": {
              "type": "string",
              "enum": [
                "TRANSACTIONTYPE",
                "TRANSACTIONAMOUNT"
              ],
              "description": "The condition to filter the data on."
            }
          },
          "required": [
            "operator",
            "type",
            "value"
          ]
        },
        "ConsentsRequestConsentDetailFIDataRange1": {
          "type": "object",
          "properties": {
            "to": {
              "type": "string",
              "format": "date-time",
              "description": "End date for financial information"
            },
            "from": {
              "type": "string",
              "format": "date-time",
              "description": "Start date for financial information"
            }
          },
          "required": [
            "from",
            "to"
          ]
        },
        "ConsentsRequestConsentDetailFrequency": {
          "type": "object",
          "properties": {
            "value": {
              "type": "integer",
              "description": "Define the number of times FI data can be fetched within the defined time unit."
            },
            "unit": {
              "type": "string",
              "enum": [
                "HOUR",
                "DAY",
                "MONTH",
                "YEAR",
                "INF"
              ],
              "description": "Defines the time unit of the frequency to access the financial information."
            }
          },
          "required": [
            "unit",
            "value"
          ]
        },
        "ConsentsRequestConsentDetailDataLife": {
          "type": "object",
          "properties": {
            "value": {
              "type": "integer",
              "description": "Define the value of unit of how long can consumer store the data"
            },
            "unit": {
              "type": "string",
              "enum": [
                "MONTH",
                "YEAR",
                "DAY",
                "INF"
              ],
              "description": "A unit of how long consumer can store the data"
            }
          },
          "required": [
            "unit",
            "value"
          ]
        },
        "ConsentResponseConsentDetailPurpose": {
          "type": "object",
          "properties": {
            "category": {
              "$ref": "#/components/schemas/PurposeCategory1"
            },
            "code": {
              "type": "string",
              "enum": [
                "101",
                "102",
                "103",
                "104",
                "105",
                "106"
              ],
              "description": "Purpose Code as defined in the AA Technical Specification "
            },
            "refUri": {
              "type": "string",
              "description": "URL where the purpose is further defined"
            },
            "text": {
              "type": "string",
              "description": "Textual Description"
            }
          },
          "required": [
            "code"
          ]
        },
        "PurposeCategory1": {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "description": "Category name of the Purpose code"
            }
          }
        },
        "CreateConsentRequestV2": {
          "type": "object",
          "properties": {
            "consentTypes": {
              "type": "array",
              "x-minimum": 1,
              "items": {
                "type": "string",
                "enum": [
                  "PROFILE",
                  "SUMMARY",
                  "TRANSACTIONS"
                ]
              }
            },
            "PAN": {
              "type": "string",
              "pattern": "^$|[A-Z]{5}[0-9]{4}[A-Z]{1}"
            },
            "purpose": {
              "description": "Purpose of the consent defined in the AA Technical Specification",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ConsentRequestPurpose"
                }
              ]
            },
            "context": {
              "type": "array",
              "items": {
                "description": "Specify extra data in key-value pair that might be required for custom arguments or filteration",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ConsentsRequestContext"
                  }
                ]
              }
            },
            "consentDuration": {
              "description": "How long consumer is allowed to store data",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ConsentDurartion"
                }
              ]
            },
            "dataLife": {
              "description": "How long consumer is allowed to store data",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ConsentsRequestConsentDetailDataLife"
                }
              ]
            },
            "fiTypes": {
              "type": "array",
              "x-minimum": 1,
              "items": {
                "type": "string",
                "enum": [
                  "DEPOSIT",
                  "TERM_DEPOSIT",
                  "RECURRING_DEPOSIT",
                  "SIP",
                  "CP",
                  "GOVT_SECURITIES",
                  "EQUITIES",
                  "BONDS",
                  "DEBENTURES",
                  "MUTUAL_FUNDS",
                  "ETF",
                  "IDR",
                  "CIS",
                  "AIF",
                  "INSURANCE_POLICIES",
                  "NPS",
                  "INVIT",
                  "REIT",
                  "GSTR1_3B",
                  "OTHER"
                ],
                "description": "List of financial information types."
              }
            },
            "consentMode": {
              "type": "string",
              "enum": [
                "VIEW",
                "STORE",
                "QUERY",
                "STREAM"
              ],
              "description": "Consent Mode as defined in the AA Technical Specification"
            },
            "fetchType": {
              "type": "string",
              "enum": [
                "ONETIME",
                "PERIODIC"
              ]
            },
            "consentDateRange": {
              "$ref": "#/components/schemas/ConsentDateRange"
            },
            "frequency": {
              "description": "Defines frequency of FI data fetch within the defined time unit. E.g.HOURLY,DAILY,MONTHLY,YEARLY.The maximum frequency value that can be defined is 1 request per HOUR. Similaraly it will be 24 requests per DAY and so on. Frequency can not be set below 1 request per hour.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ConsentsRequestConsentDetailFrequency"
                }
              ]
            },
            "vua": {
              "type": "string"
            },
            "redirectUrl": {
              "type": "string"
            },
            "dataRange": {
              "$ref": "#/components/schemas/ConsentsRequestConsentDetailFIDataRange1"
            },
            "dataFilter": {
              "type": "array",
              "description": "rules that will be utilized by FIP to filter the data",
              "items": {
                "$ref": "#/components/schemas/ConsentsRequestConsentDetailDataFilterItem"
              }
            }
          },
          "required": [
            "dataRange",
            "vua"
          ]
        },
        "ConsentDateRange": {
          "type": "object",
          "properties": {
            "endDate": {
              "type": "string",
              "format": "date-time",
              "description": "Expiry date-time for the consent"
            },
            "startDate": {
              "type": "string",
              "format": "date-time",
              "description": "Expiry date-time for the consent"
            }
          },
          "required": [
            "endDate",
            "startDate"
          ]
        },
        "ConsentDurartion": {
          "type": "object",
          "properties": {
            "value": {
              "type": "integer",
              "description": "Define the value of unit of how long can consumer store the data"
            },
            "unit": {
              "type": "string",
              "enum": [
                "MONTH",
                "YEAR",
                "DAY"
              ],
              "description": "A unit of how long consumer can store the data"
            }
          },
          "required": [
            "unit",
            "value"
          ]
        },
        "ConsentRequestPurpose": {
          "type": "object",
          "properties": {
            "category": {
              "$ref": "#/components/schemas/PurposeCategory1"
            },
            "code": {
              "type": "string",
              "enum": [
                "101",
                "102",
                "103",
                "104",
                "105",
                "106"
              ],
              "description": "Purpose Code as defined in the AA Technical Specification "
            },
            "refUri": {
              "type": "string",
              "description": "URL where the purpose is further defined"
            },
            "text": {
              "type": "string",
              "description": "Textual Description"
            }
          },
          "required": [
            "category",
            "code",
            "refUri",
            "text"
          ]
        },
        "FIStatusNotification": {
          "type": "object",
          "properties": {
            "Notifier": {
              "description": "Information about the notifier",
              "allOf": [
                {
                  "$ref": "#/components/schemas/FIStatusNotificationNotifier"
                }
              ]
            },
            "txnid": {
              "type": "string",
              "format": "uuid",
              "description": "The unique transaction identifier used for providing an end to end traceability."
            },
            "ver": {
              "type": "string",
              "minLength": 1,
              "description": "The version of the API"
            },
            "timestamp": {
              "type": "string",
              "format": "date-time",
              "description": "Creation timestamp of the message which will be updated at each leg"
            },
            "FIStatusNotification": {
              "description": "Selects a type of  Data-flow events , Consent-flow events, and Account discovery flow events",
              "allOf": [
                {
                  "$ref": "#/components/schemas/FIStatusNotificationFIStatusNotification"
                }
              ]
            }
          },
          "required": [
            "FIStatusNotification",
            "Notifier",
            "timestamp",
            "txnid",
            "ver"
          ]
        },
        "FIStatusNotificationFIStatusNotification": {
          "type": "object",
          "properties": {
            "FIStatusResponse": {
              "type": "array",
              "minItems": 1,
              "items": {
                "$ref": "#/components/schemas/FIStatusNotificationFIStatusNotificationFIStatusResponseItem"
              }
            },
            "sessionStatus": {
              "type": "string",
              "enum": [
                "ACTIVE",
                "COMPLETED",
                "EXPIRED",
                "FAILED"
              ]
            },
            "sessionId": {
              "type": "string",
              "format": "uuid"
            }
          },
          "required": [
            "FIStatusResponse",
            "sessionId",
            "sessionStatus"
          ]
        },
        "FIStatusNotificationFIStatusNotificationFIStatusResponseItem": {
          "type": "object",
          "properties": {
            "fipID": {
              "type": "string",
              "minLength": 1
            },
            "Accounts": {
              "type": "array",
              "minItems": 1,
              "items": {
                "$ref": "#/components/schemas/FIStatusNotificationFIStatusNotificationFIStatusResponseItemAccountsItem"
              }
            }
          },
          "required": [
            "Accounts",
            "fipID"
          ]
        },
        "FIStatusNotificationFIStatusNotificationFIStatusResponseItemAccountsItem": {
          "type": "object",
          "properties": {
            "linkRefNumber": {
              "type": "string",
              "minLength": 1
            },
            "FIStatus": {
              "type": "string",
              "enum": [
                "READY",
                "DENIED",
                "PENDING",
                "DELIVERED",
                "TIMEOUT"
              ]
            },
            "description": {
              "type": "string",
              "minLength": 1
            }
          },
          "required": [
            "FIStatus",
            "description",
            "linkRefNumber"
          ]
        },
        "FIStatusNotificationNotifier": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "Value of the destination address for locating the resource to maintain the logs"
            },
            "type": {
              "type": "string",
              "description": ""
            }
          },
          "required": [
            "id",
            "type"
          ]
        },
        "NotificationResponse": {
          "type": "object",
          "properties": {
            "timestamp": {
              "type": "string",
              "description": "Creation timestamp of the message which will be updated at each call"
            },
            "response": {
              "type": "string",
              "description": "response description"
            },
            "txnid": {
              "type": "string",
              "description": "An unique transaction identifier used for providing an end to end traceability."
            },
            "ver": {
              "type": "string",
              "description": "The version of the API"
            }
          },
          "required": [
            "response",
            "timestamp",
            "txnid",
            "ver"
          ]
        },
        "UnauthorizedAccess": {
          "type": "object",
          "properties": {
            "txnid": {
              "type": "string",
              "description": "Trnsaction id of the request. Must be same value as sent in the request"
            },
            "errorMsg": {
              "type": "string",
              "description": "Error message with additional details. Ensure no sensitive information is included in the error message."
            },
            "ver": {
              "type": "string",
              "description": "API version."
            },
            "errorCode": {
              "type": "string",
              "enum": [
                "Unauthorized"
              ]
            },
            "timestamp": {
              "type": "string",
              "format": "date-time",
              "description": "Response timestamp"
            }
          },
          "required": [
            "errorMsg",
            "timestamp",
            "txnid",
            "ver"
          ],
          "additionalProperties": true
        },
        "NotFound": {
          "type": "object",
          "properties": {
            "txnid": {
              "type": "string",
              "description": "Trnsaction id of the request. Must be same value as sent in the request"
            },
            "errorMsg": {
              "type": "string",
              "description": "Error message with additional details. Ensure no sensitive information is included in the error message."
            },
            "ver": {
              "type": "string",
              "description": "API version."
            },
            "errorCode": {
              "type": "string",
              "enum": [
                "NoSuchVersion"
              ],
              "description": "Indicates that the version ID specified in the request does not match an existing version"
            },
            "timestamp": {
              "type": "string",
              "format": "date-time",
              "description": "Response timestamp"
            }
          },
          "required": [
            "errorMsg",
            "timestamp",
            "txnid",
            "ver"
          ],
          "additionalProperties": true
        },
        "Conflict": {
          "type": "object",
          "properties": {
            "txnid": {
              "type": "string",
              "description": "Trnsaction id of the request. Must be same value as sent in the request"
            },
            "errorMsg": {
              "type": "string",
              "description": "Error message with additional details. Ensure no sensitive information is included in the error message."
            },
            "ver": {
              "type": "string",
              "description": "API version."
            },
            "errorCode": {
              "type": "string",
              "enum": [
                "IdempotencyError"
              ],
              "description": "IdempotencyError When UUID/Id is not unique"
            },
            "timestamp": {
              "type": "string",
              "format": "date-time",
              "description": "Response timestamp"
            }
          },
          "required": [
            "errorMsg",
            "timestamp",
            "txnid",
            "ver"
          ],
          "additionalProperties": true
        },
        "PreconditionFailed": {
          "type": "object",
          "properties": {
            "txnid": {
              "type": "string",
              "description": "Trnsaction id of the request. Must be same value as sent in the request"
            },
            "errorMsg": {
              "type": "string",
              "description": "Error message with additional details. Ensure no sensitive information is included in the error message."
            },
            "ver": {
              "type": "string",
              "description": "API version."
            },
            "errorCode": {
              "type": "string",
              "enum": [
                "PreconditionFailed"
              ]
            },
            "timestamp": {
              "type": "string",
              "format": "date-time",
              "description": "Response timestamp"
            }
          },
          "required": [
            "errorMsg",
            "timestamp",
            "txnid",
            "ver"
          ],
          "additionalProperties": true
        },
        "InternalServerError": {
          "type": "object",
          "properties": {
            "txnid": {
              "type": "string",
              "description": "Trnsaction id of the request. Must be same value as sent in the request"
            },
            "errorMsg": {
              "type": "string",
              "description": "Error message with additional details. Ensure no sensitive information is included in the error message."
            },
            "ver": {
              "type": "string",
              "description": "API version."
            },
            "errorCode": {
              "type": "string",
              "enum": [
                "InternalError"
              ]
            },
            "timestamp": {
              "type": "string",
              "format": "date-time",
              "description": "Response timestamp"
            }
          },
          "required": [
            "errorMsg",
            "timestamp",
            "txnid",
            "ver"
          ],
          "additionalProperties": true
        },
        "ServiceUnavailable": {
          "type": "object",
          "properties": {
            "txnid": {
              "type": "string",
              "description": "Trnsaction id of the request. Must be same value as sent in the request"
            },
            "errorMsg": {
              "type": "string",
              "description": "Error message with additional details. Ensure no sensitive information is included in the error message."
            },
            "ver": {
              "type": "string",
              "description": "API version."
            },
            "errorCode": {
              "type": "string",
              "enum": [
                "ServiceUnavailable"
              ]
            },
            "timestamp": {
              "type": "string",
              "format": "date-time",
              "description": "Response timestamp"
            }
          },
          "required": [
            "errorMsg",
            "timestamp",
            "txnid",
            "ver"
          ],
          "additionalProperties": true
        },
        "BadRequestConsentFetch": {
          "type": "object",
          "properties": {
            "txnid": {
              "type": "string",
              "description": "Trnsaction id of the request. Must be same value as sent in the request"
            },
            "errorMsg": {
              "type": "string",
              "description": "Error message with additional details. Ensure no sensitive information is included in the error message."
            },
            "ver": {
              "type": "string",
              "description": "API version."
            },
            "errorCode": {
              "type": "string",
              "enum": [
                "InvalidRequest",
                "InvalidURI",
                "InvalidSecurity",
                "SignatureDoesNotMatch",
                "InvalidConsentId"
              ]
            },
            "timestamp": {
              "type": "string",
              "format": "date-time",
              "description": "Response timestamp"
            }
          },
          "required": [
            "errorMsg",
            "timestamp",
            "txnid",
            "ver"
          ],
          "additionalProperties": true
        },
        "PassDownSerializedBody": {
          "type": "object",
          "properties": {
            "serialized_body": {
              "type": "string",
              "description": "Serialized data from body"
            }
          }
        },
        "ConsentStatusNotification": {
          "type": "object",
          "properties": {
            "Notifier": {
              "description": "Information about the notifier",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ConsentStatusNotificationNotifier"
                }
              ]
            },
            "ConsentStatusNotification": {
              "description": "Selects a type of  Data-flow events , Consent-flow events, and Account discovery flow events",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ConsentStatusNotificationConsentStatusNotification"
                }
              ]
            },
            "txnid": {
              "type": "string",
              "format": "uuid",
              "description": "The unique transaction identifier used for providing an end to end traceability."
            },
            "ver": {
              "type": "string",
              "minLength": 1,
              "description": "The version of the API"
            },
            "timestamp": {
              "type": "string",
              "format": "date-time",
              "description": "Creation timestamp of the message which will be updated at each leg"
            }
          },
          "required": [
            "ConsentStatusNotification",
            "Notifier",
            "timestamp",
            "txnid",
            "ver"
          ]
        },
        "ConsentStatusNotificationConsentStatusNotification": {
          "type": "object",
          "properties": {
            "consentStatus": {
              "type": "string",
              "enum": [
                "ACTIVE",
                "PENDING",
                "REVOKED",
                "PAUSED",
                "EXPIRED",
                "REJECTED"
              ]
            },
            "consentHandle": {
              "type": "string",
              "format": "uuid"
            },
            "consentId": {
              "type": "string",
              "format": "uuid",
              "nullable": true
            }
          },
          "required": [
            "consentId",
            "consentStatus"
          ]
        },
        "ConsentStatusNotificationNotifier": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "Value of the destination address for locating the resource to maintain the logs"
            },
            "type": {
              "type": "string",
              "description": ""
            }
          },
          "required": [
            "id",
            "type"
          ]
        },
        "VersionResponse": {
          "type": "object",
          "properties": {
            "environment": {
              "type": "string"
            },
            "version": {
              "type": "string"
            },
            "server": {
              "type": "string"
            }
          }
        },
        "MessageResponse": {
          "type": "object",
          "properties": {
            "message": {
              "type": "string",
              "description": "Welcome message to the API"
            }
          },
          "required": [
            "message"
          ]
        },
        "FIDataFetchResponse": {
          "type": "object",
          "properties": {
            "DataRange": {
              "description": "Time range for which the data is being requested",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ConsentsRequestConsentDetailFIDataRange"
                }
              ]
            },
            "status": {
              "type": "string",
              "enum": [
                "ACTIVE",
                "PENDING",
                "COMPLETED",
                "EXPIRED",
                "FAILED",
                "PARTIAL"
              ],
              "description": "Status for this data fetch session"
            },
            "consentId": {
              "type": "string",
              "format": "uuid",
              "description": "Consent identifier for this data fetch request."
            },
            "id": {
              "type": "string",
              "format": "uuid",
              "description": "Request identifier to fetch the status and data."
            },
            "Payload": {
              "type": "array",
              "nullable": true,
              "description": "Time range for which the data is being requested",
              "items": {
                "$ref": "#/components/schemas/FIFetchDecrpytedResponseFIItem"
              }
            },
            "format": {
              "type": "string",
              "enum": [
                "xml",
                "json"
              ],
              "description": "Format of decrypted data"
            }
          },
          "required": [
            "DataRange",
            "Payload",
            "consentId",
            "format",
            "id",
            "status"
          ]
        },
        "FIFetchDecrpytedResponseFIItem": {
          "type": "object",
          "properties": {
            "fipID": {
              "type": "string"
            },
            "data": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/FIFetchDecrpytedResponseFIItemDataItem"
              }
            }
          },
          "required": [
            "data",
            "fipID"
          ]
        },
        "FIFetchDecrpytedResponseFIItemDataItem": {
          "type": "object",
          "properties": {
            "decryptedFI": {
              "description": "Contains the decrypted financial information",
              "allOf": [
                {
                  "$ref": "#/components/schemas/FIFetchDecrpytedResponseFIItemDataItemDecryptedFI"
                }
              ]
            },
            "linkRefNumber": {
              "type": "string"
            },
            "maskedAccNumber": {
              "type": "string"
            }
          },
          "required": [
            "decryptedFI",
            "linkRefNumber",
            "maskedAccNumber"
          ]
        },
        "FIFetchDecrpytedResponseFIItemDataItemDecryptedFI": {
          "type": "object",
          "properties": {},
          "oneOf": [
            {
              "$ref": "#/components/schemas/DepositJSON"
            },
            {
              "$ref": "#/components/schemas/TermDepositJSON"
            },
            {
              "$ref": "#/components/schemas/RecurringDepositJSON"
            },
            {
              "$ref": "#/components/schemas/InsurancePoliciesJSON"
            },
            {
              "$ref": "#/components/schemas/InsurancePoliciesJSON"
            },
            {
              "$ref": "#/components/schemas/EquitiesJSON"
            },
            {
              "$ref": "#/components/schemas/MutualFundsJSON"
            },
            {
              "$ref": "#/components/schemas/MutualFundsJSON"
            },
            {
              "$ref": "#/components/schemas/GST"
            },
            {
              "$ref": "#/components/schemas/ETFJSON"
            },
            {
              "$ref": "#/components/schemas/XML"
            }
          ],
          "discriminator": {
            "propertyName": "type",
            "mapping": {
              "deposit": "#/components/schemas/DepositJSON",
              "term_deposit": "#/components/schemas/TermDepositJSON",
              "recurring_deposit": "#/components/schemas/RecurringDepositJSON",
              "insurance_policies": "#/components/schemas/InsurancePoliciesJSON",
              "insurance": "#/components/schemas/InsurancePoliciesJSON",
              "equities": "#/components/schemas/EquitiesJSON",
              "mutual_funds": "#/components/schemas/MutualFundsJSON",
              "mutualfunds": "#/components/schemas/MutualFundsJSON",
              "gstr1_3b": "#/components/schemas/GST",
              "etf": "#/components/schemas/ETFJSON",
              "xml": "#/components/schemas/XML"
            }
          }
        },
        "CreateFIDataFetchRequest": {
          "type": "object",
          "properties": {
            "format": {
              "type": "string",
              "enum": [
                "xml",
                "json"
              ],
              "description": "Format of decrypted data"
            },
            "DataRange": {
              "description": "Time range for which the data is being requested (should be inclusive of the consent's FIDataRange)",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ConsentsRequestConsentDetailFIDataRange"
                }
              ]
            },
            "consentId": {
              "type": "string",
              "format": "uuid",
              "description": "The request identifier to fetch the status and data."
            }
          },
          "required": [
            "DataRange",
            "consentId",
            "format"
          ]
        },
        "UserActiveConsents": {
          "type": "object",
          "properties": {
            "customerVua": {
              "type": "string"
            },
            "totalConsents": {
              "type": "integer"
            },
            "activeConsentsCount": {
              "type": "integer"
            },
            "activeConsents": {
              "type": "array",
              "items": {
                "description": "List of consent objects",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UserActiveConsentsResponse"
                  }
                ]
              }
            }
          },
          "required": [
            "activeConsentsCount",
            "customerVua",
            "totalConsents"
          ]
        },
        "UserActiveConsentsResponse": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "The request identifier to fetch the status and data."
            },
            "url": {
              "type": "string",
              "description": "The URL link to the consent manager app for user to complete the flow."
            },
            "status": {},
            "Detail": {
              "description": "The identifier of the Customer.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ConsentDetailsAggregated"
                }
              ]
            },
            "redirectUrl": {
              "type": "string",
              "description": "URL to redirect to after completion of consent journey"
            },
            "PAN": {
              "type": "string",
              "pattern": "^$|[A-Z]{5}[0-9]{4}[A-Z]{1}"
            },
            "context": {
              "type": "array",
              "items": {
                "description": "Specify extra data in key-value pair that might be required for custom arguments or filteration",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ConsentsRequestContext"
                  }
                ]
              }
            },
            "Usage": {
              "nullable": true,
              "description": "Usage object for this consent. Defines how many times and when this consent has been used for data fetch",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ConsentResponseConsentUsage"
                }
              ]
            },
            "detail": {
              "description": "The identifier of the Customer.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ActiveConsentsDetail"
                }
              ]
            },
            "requestId": {
              "type": "string"
            }
          },
          "required": [
            "Detail",
            "detail",
            "id",
            "redirectUrl",
            "url"
          ]
        },
        "ActiveConsentsDetail": {
          "type": "object",
          "properties": {
            "consentTypes": {
              "type": "array",
              "x-minimum": 1,
              "items": {
                "type": "string",
                "enum": [
                  "PROFILE",
                  "SUMMARY",
                  "TRANSACTIONS"
                ]
              }
            },
            "Purpose": {
              "description": "Purpose of the consent defined in the AA Technical Specification",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ConsentDetailPurpose"
                }
              ]
            },
            "consentMode": {
              "description": "Consent Mode as defined in the AA Technical Specification"
            },
            "fiTypes": {
              "type": "array",
              "x-minimum": 1,
              "items": {
                "type": "string",
                "enum": [
                  "DEPOSIT",
                  "TERM_DEPOSIT",
                  "RECURRING_DEPOSIT",
                  "SIP",
                  "CP",
                  "GOVT_SECURITIES",
                  "EQUITIES",
                  "BONDS",
                  "DEBENTURES",
                  "MUTUAL_FUNDS",
                  "ETF",
                  "IDR",
                  "CIS",
                  "AIF",
                  "INSURANCE_POLICIES",
                  "NPS",
                  "INVIT",
                  "REIT",
                  "OTHER",
                  "GSTR1_3B"
                ],
                "description": "List of financial information types."
              }
            },
            "DataConsumer": {
              "description": "Dataconsumer ID. For a consent between FIP & AA, Dataconsumer would be AA whereas for a consent between FIU/AA Application & AA, Dataconsumer would be FIU/AA Application.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/SignedConsentDetailDataConsumerByValue"
                }
              ]
            },
            "consentExpiry": {
              "type": "string",
              "format": "date-time",
              "description": "Expiry date-time for the consent"
            },
            "fetchType": {
              "description": "FI Fetch type. Could be ONETIME or PERIODIC"
            },
            "Frequency": {
              "description": "Defines frequency of FI data fetch within the defined time unit. E.g.HOURLY,DAILY,MONTHLY,YEARLY.The maximum frequency value that can be defined is 1 request per HOUR. Similaraly it will be 24 requests per DAY and so on. Frequency can not be set below 1 request per hour.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/SignedConsentDetailFrequencyEnumByValue"
                }
              ]
            },
            "FIDataRange": {
              "description": "Data Range (Datetime) for the Financial Information Requested",
              "allOf": [
                {
                  "$ref": "#/components/schemas/SignedConsentDetailFIDataRange"
                }
              ]
            },
            "DataProvider": {
              "description": "DataProvider ID. For a consent between FIP & AA, DataProvider would be FIP whereas for a consent between FIU/AA Application & AA, DataProvider would be AA.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/SignedConsentDetailDataProviderByEnumValue"
                }
              ]
            },
            "Customer": {
              "description": "Address of the end customer",
              "allOf": [
                {
                  "$ref": "#/components/schemas/SignedConsentDetailCustomer"
                }
              ]
            },
            "Accounts": {
              "type": "array",
              "description": "List of accounts which the consent would fetch FI from. For a consent between FIU & AA, this list could have accounts from multiple FIP. For a consent between FIP & AA, only accounts from particular FIP must be present in this section.",
              "items": {
                "$ref": "#/components/schemas/SignedConsentDetailAccountsItemByEnumValue"
              }
            },
            "consentStart": {
              "type": "string",
              "format": "date-time",
              "description": "Start date-time of the consent. This field would allow for Post-Dated consent."
            },
            "DataFilter": {
              "type": "array",
              "description": "rules that will be utilized by FIP to filter the data",
              "items": {
                "$ref": "#/components/schemas/SignedConsentDetailDataFilterItemByEnumValue"
              }
            },
            "DataLife": {
              "description": "Datalife defines for how long can the FIU/AA Application store the data",
              "allOf": [
                {
                  "$ref": "#/components/schemas/SignedConsentDetailDataLifeByEnumValue"
                }
              ]
            }
          },
          "required": [
            "Accounts",
            "Customer",
            "DataConsumer",
            "DataLife",
            "DataProvider",
            "FIDataRange",
            "Frequency",
            "Purpose",
            "consentExpiry",
            "consentStart",
            "consentTypes",
            "fiTypes"
          ]
        },
        "SignedConsentDetailDataLifeByEnumValue": {
          "type": "object",
          "properties": {
            "value": {
              "type": "number",
              "description": "Value for the Datalife Unit. If INF, value must be set to 0."
            },
            "unit": {
              "description": "A unit of how long consumer can store the data."
            }
          },
          "required": [
            "value"
          ]
        },
        "SignedConsentDetailDataFilterItemByEnumValue": {
          "type": "object",
          "properties": {
            "operator": {
              "type": "string",
              "enum": [
                "=",
                "!=",
                ">",
                "<",
                ">=",
                "<="
              ],
              "description": "Operator to filter data by."
            },
            "value": {
              "type": "string",
              "description": "Value to filter data"
            },
            "type": {}
          },
          "required": [
            "operator",
            "value"
          ]
        },
        "SignedConsentDetailAccountsItemByEnumValue": {
          "type": "object",
          "properties": {
            "linkRefNumber": {
              "type": "string",
              "description": "FIP's linkRefNumber as shared by the FIP after linking"
            },
            "maskedAccNumber": {
              "type": "string",
              "description": "Masked account number"
            },
            "accType": {
              "type": "string",
              "description": "Type of Account"
            },
            "fiType": {},
            "fipId": {
              "type": "string",
              "description": "FIP ID"
            }
          }
        },
        "SignedConsentDetailCustomer": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "Customer Address"
            }
          }
        },
        "SignedConsentDetailDataProviderByEnumValue": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "DataProvider ID"
            },
            "type": {
              "description": "Type of DataConsumer"
            }
          }
        },
        "SignedConsentDetailFIDataRange": {
          "type": "object",
          "properties": {
            "to": {
              "type": "string",
              "format": "date-time",
              "description": "End date for financial information"
            },
            "from": {
              "type": "string",
              "format": "date-time",
              "description": "Start date for financial information"
            }
          },
          "required": [
            "from",
            "to"
          ]
        },
        "SignedConsentDetailFrequencyEnumByValue": {
          "type": "object",
          "properties": {
            "value": {
              "type": "number",
              "description": "Define the number of times FI data can be fetched within the defined time unit."
            },
            "unit": {
              "description": "Defines the time unit of the frequency to access the financial information."
            }
          },
          "required": [
            "value"
          ]
        },
        "SignedConsentDetailDataConsumerByValue": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "DataConsumer ID"
            },
            "type": {
              "description": "Type of DataConsumer"
            }
          }
        },
        "ConsentDetailPurpose": {
          "type": "object",
          "properties": {
            "code": {
              "type": "string",
              "enum": [
                "101",
                "102",
                "103",
                "104",
                "105",
                "106"
              ],
              "description": "Purpose Code as defined in the AA Technical Specification "
            },
            "refUri": {
              "type": "string",
              "description": "URL where the purpose is further defined"
            },
            "text": {
              "type": "string",
              "description": "Textual Description"
            },
            "Category": {
              "$ref": "#/components/schemas/PurposeCategory"
            }
          },
          "required": [
            "Category",
            "code",
            "refUri",
            "text"
          ]
        },
        "PurposeCategory": {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "description": "Category name of the Purpose code"
            }
          }
        },
        "ConsentResponseConsentUsage": {
          "type": "object",
          "properties": {
            "lastUsed": {
              "type": "string",
              "format": "date-time",
              "nullable": true,
              "description": "Timestamp of last data fetch for this consent"
            },
            "count": {
              "type": "number",
              "description": "Count of the number of times data has been fetched for this consent"
            }
          },
          "required": [
            "count",
            "lastUsed"
          ]
        },
        "ConsentDetailsAggregated": {
          "type": "object",
          "properties": {
            "consentTypes": {
              "type": "array",
              "x-minimum": 1,
              "items": {
                "type": "string",
                "enum": [
                  "PROFILE",
                  "SUMMARY",
                  "TRANSACTIONS"
                ]
              }
            },
            "Purpose": {
              "description": "Purpose of the consent defined in the AA Technical Specification",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ConsentDetailPurpose"
                }
              ]
            },
            "consentMode": {
              "type": "string",
              "enum": [
                "VIEW",
                "STORE",
                "QUERY",
                "STREAM"
              ],
              "description": "Consent Mode as defined in the AA Technical Specification"
            },
            "fiTypes": {
              "type": "array",
              "x-minimum": 1,
              "items": {
                "type": "string",
                "enum": [
                  "DEPOSIT",
                  "TERM_DEPOSIT",
                  "RECURRING_DEPOSIT",
                  "SIP",
                  "CP",
                  "GOVT_SECURITIES",
                  "EQUITIES",
                  "BONDS",
                  "DEBENTURES",
                  "MUTUAL_FUNDS",
                  "ETF",
                  "IDR",
                  "CIS",
                  "AIF",
                  "INSURANCE_POLICIES",
                  "NPS",
                  "INVIT",
                  "REIT",
                  "OTHER",
                  "GSTR1_3B"
                ],
                "description": "List of financial information types."
              }
            },
            "DataConsumer": {
              "description": "Dataconsumer ID. For a consent between FIP & AA, Dataconsumer would be AA whereas for a consent between FIU/AA Application & AA, Dataconsumer would be FIU/AA Application.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/SignedConsentDetailDataConsumer"
                }
              ]
            },
            "consentExpiry": {
              "type": "string",
              "format": "date-time",
              "description": "Expiry date-time for the consent"
            },
            "fetchType": {
              "type": "string",
              "enum": [
                "ONETIME",
                "PERIODIC"
              ],
              "description": "FI Fetch type. Could be ONETIME or PERIODIC"
            },
            "FIDataRange": {
              "description": "Data Range (Datetime) for the Financial Information Requested",
              "allOf": [
                {
                  "$ref": "#/components/schemas/SignedConsentDetailFIDataRange"
                }
              ]
            },
            "Frequency": {
              "description": "Defines frequency of FI data fetch within the defined time unit. E.g.HOURLY,DAILY,MONTHLY,YEARLY.The maximum frequency value that can be defined is 1 request per HOUR. Similaraly it will be 24 requests per DAY and so on. Frequency can not be set below 1 request per hour.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/SignedConsentDetailFrequency"
                }
              ]
            },
            "DataProvider": {
              "description": "DataProvider ID. For a consent between FIP & AA, DataProvider would be FIP whereas for a consent between FIU/AA Application & AA, DataProvider would be AA.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/SignedConsentDetailDataProvider"
                }
              ]
            },
            "Customer": {
              "description": "Address of the end customer",
              "allOf": [
                {
                  "$ref": "#/components/schemas/SignedConsentDetailCustomer"
                }
              ]
            },
            "Accounts": {
              "type": "array",
              "description": "List of accounts which the consent would fetch FI from. For a consent between FIU & AA, this list could have accounts from multiple FIP. For a consent between FIP & AA, only accounts from particular FIP must be present in this section.",
              "items": {
                "$ref": "#/components/schemas/SignedConsentDetailAccountsItem"
              }
            },
            "consentStart": {
              "type": "string",
              "format": "date-time",
              "description": "Start date-time of the consent. This field would allow for Post-Dated consent."
            },
            "DataFilter": {
              "type": "array",
              "nullable": true,
              "description": "rules that will be utilized by FIP to filter the data",
              "items": {
                "$ref": "#/components/schemas/SignedConsentDetailDataFilterItem"
              }
            },
            "DataLife": {
              "description": "Datalife defines for how long can the FIU/AA Application store the data",
              "allOf": [
                {
                  "$ref": "#/components/schemas/SignedConsentDetailDataLife"
                }
              ]
            }
          },
          "required": [
            "Customer",
            "DataConsumer",
            "DataLife",
            "FIDataRange",
            "Frequency",
            "Purpose",
            "consentExpiry",
            "consentMode",
            "consentStart",
            "consentTypes",
            "fetchType",
            "fiTypes"
          ]
        },
        "SignedConsentDetailDataLife": {
          "type": "object",
          "properties": {
            "value": {
              "type": "number",
              "description": "Value for the Datalife Unit. If INF, value must be set to 0."
            },
            "unit": {
              "type": "string",
              "enum": [
                "DAY",
                "MONTH",
                "YEAR",
                "INF"
              ],
              "description": "A unit of how long consumer can store the data."
            }
          },
          "required": [
            "unit",
            "value"
          ]
        },
        "SignedConsentDetailDataFilterItem": {
          "type": "object",
          "properties": {
            "operator": {
              "type": "string",
              "enum": [
                "=",
                "!=",
                ">",
                "<",
                ">=",
                "<="
              ],
              "description": "Operator to filter data by."
            },
            "value": {
              "type": "string",
              "description": "Value to filter data"
            },
            "type": {
              "type": "string",
              "enum": [
                "TRANSACTIONTYPE",
                "TRANSACTIONAMOUNT"
              ],
              "description": "The condition to filter the data on."
            }
          },
          "required": [
            "operator",
            "type",
            "value"
          ]
        },
        "SignedConsentDetailAccountsItem": {
          "type": "object",
          "properties": {
            "linkRefNumber": {
              "type": "string",
              "description": "FIP's linkRefNumber as shared by the FIP after linking"
            },
            "maskedAccNumber": {
              "type": "string",
              "description": "Masked account number"
            },
            "accType": {
              "type": "string",
              "description": "Type of Account"
            },
            "fiType": {
              "type": "string",
              "description": "Type of Financial Information"
            },
            "fipId": {
              "type": "string",
              "description": "FIP ID"
            }
          }
        },
        "SignedConsentDetailDataProvider": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "DataProvider ID"
            },
            "type": {
              "type": "string",
              "enum": [
                "FIP",
                "AA"
              ],
              "description": "Type of DataConsumer"
            }
          }
        },
        "SignedConsentDetailFrequency": {
          "type": "object",
          "properties": {
            "value": {
              "type": "number",
              "description": "Define the number of times FI data can be fetched within the defined time unit."
            },
            "unit": {
              "type": "string",
              "enum": [
                "HOUR",
                "DAY",
                "MONTH",
                "YEAR"
              ],
              "description": "Defines the time unit of the frequency to access the financial information."
            }
          },
          "required": [
            "unit",
            "value"
          ]
        },
        "SignedConsentDetailDataConsumer": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "DataConsumer ID"
            },
            "type": {
              "type": "string",
              "enum": [
                "FIU",
                "AA"
              ],
              "description": "Type of DataConsumer"
            }
          }
        },
        "ConsentResponse": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "The request identifier to fetch the status and data."
            },
            "url": {
              "type": "string",
              "description": "The URL link to the consent manager app for user to complete the flow."
            },
            "status": {
              "type": "string",
              "enum": [
                "PENDING",
                "FAILED",
                "ACTIVE",
                "PAUSED",
                "REVOKED",
                "EXPIRED",
                "REJECTED"
              ],
              "description": "Surrogate status for this consent"
            },
            "Detail": {
              "description": "The identifier of the Customer.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ConsentDetailsAggregated"
                }
              ]
            },
            "redirectUrl": {
              "type": "string",
              "description": "URL to redirect to after completion of consent journey"
            },
            "PAN": {
              "type": "string",
              "pattern": "^$|[A-Z]{5}[0-9]{4}[A-Z]{1}"
            },
            "context": {
              "type": "array",
              "items": {
                "description": "Specify extra data in key-value pair that might be required for custom arguments or filteration",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ConsentsRequestContext"
                  }
                ]
              }
            },
            "Usage": {
              "nullable": true,
              "description": "Usage object for this consent. Defines how many times and when this consent has been used for data fetch",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ConsentResponseConsentUsage"
                }
              ]
            }
          },
          "required": [
            "Detail",
            "id",
            "redirectUrl",
            "status",
            "url"
          ]
        },
        "CreateConsentsRequest": {
          "type": "object",
          "properties": {
            "PAN": {
              "type": "string",
              "pattern": "^$|[A-Z]{5}[0-9]{4}[A-Z]{1}"
            },
            "redirectUrl": {
              "type": "string",
              "description": "URL to redirect to after completion of consent journey"
            },
            "Detail": {
              "description": "Specify the financial information types that customer wants to access",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ConsentsRequestConsentDetail"
                }
              ]
            },
            "context": {
              "type": "array",
              "items": {
                "description": "Specify extra data in key-value pair that might be required for custom arguments or filteration",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ConsentsRequestContext"
                  }
                ]
              }
            }
          },
          "required": [
            "Detail"
          ]
        },
        "ConsentsRequestConsentDetail": {
          "type": "object",
          "properties": {
            "consentTypes": {
              "type": "array",
              "x-minimum": 1,
              "items": {
                "type": "string",
                "enum": [
                  "PROFILE",
                  "SUMMARY",
                  "TRANSACTIONS"
                ]
              }
            },
            "Purpose": {
              "description": "Purpose of the consent defined in the AA Technical Specification",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ConsentDetailPurpose"
                }
              ]
            },
            "consentMode": {
              "type": "string",
              "enum": [
                "VIEW",
                "STORE",
                "QUERY",
                "STREAM"
              ],
              "description": "Consent Mode as defined in the AA Technical Specification"
            },
            "fiTypes": {
              "type": "array",
              "x-minimum": 1,
              "items": {
                "type": "string",
                "enum": [
                  "DEPOSIT",
                  "TERM_DEPOSIT",
                  "RECURRING_DEPOSIT",
                  "SIP",
                  "CP",
                  "GOVT_SECURITIES",
                  "EQUITIES",
                  "BONDS",
                  "DEBENTURES",
                  "MUTUAL_FUNDS",
                  "ETF",
                  "IDR",
                  "CIS",
                  "AIF",
                  "INSURANCE_POLICIES",
                  "NPS",
                  "INVIT",
                  "REIT",
                  "GSTR1_3B",
                  "OTHER"
                ],
                "description": "List of financial information types."
              }
            },
            "DataConsumer": {
              "description": "Contains the FIU id",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ConsentsRequestConsentDetailDataConsumer"
                }
              ]
            },
            "consentExpiry": {
              "type": "string",
              "format": "date-time",
              "description": "Expiry date-time for the consent"
            },
            "fetchType": {
              "type": "string",
              "enum": [
                "ONETIME",
                "PERIODIC"
              ],
              "description": "FI Fetch type. Could be ONETIME or PERIODIC"
            },
            "Frequency": {
              "description": "Defines frequency of FI data fetch within the defined time unit. E.g.HOURLY,DAILY,MONTHLY,YEARLY.The maximum frequency value that can be defined is 1 request per HOUR. Similaraly it will be 24 requests per DAY and so on. Frequency can not be set below 1 request per hour.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ConsentsRequestConsentDetailFrequency"
                }
              ]
            },
            "Customer": {
              "description": "Contains the customer address",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ConsentsRequestConsentDetailCustomer"
                }
              ]
            },
            "FIDataRange": {
              "description": "Specify the datetime range for querying the financial information",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ConsentsRequestConsentDetailFIDataRange"
                }
              ]
            },
            "DataFilter": {
              "type": "array",
              "description": "rules that will be utilized by FIP to filter the data",
              "items": {
                "$ref": "#/components/schemas/ConsentsRequestConsentDetailDataFilterItem"
              }
            },
            "consentStart": {
              "type": "string",
              "format": "date-time",
              "description": "Start date-time of the consent. This field would allow for Post-Dated consent."
            },
            "DataLife": {
              "description": "How long consumer is allowed to store data",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ConsentsRequestConsentDetailDataLife"
                }
              ]
            }
          },
          "required": [
            "Customer",
            "DataConsumer",
            "DataLife",
            "FIDataRange",
            "Frequency",
            "Purpose",
            "consentExpiry",
            "consentMode",
            "consentStart",
            "consentTypes",
            "fetchType",
            "fiTypes"
          ]
        },
        "ConsentsRequestConsentDetailCustomer": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "The identifier of the Customer can be generated during the registration with AA"
            }
          },
          "required": [
            "id"
          ]
        },
        "ConsentsRequestConsentDetailDataConsumer": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "The identifier of the FIU"
            }
          },
          "required": [
            "id"
          ]
        },
        "GenerateJWSSignatureRequest": {
          "type": "object",
          "properties": {
            "payload": {
              "type": "string",
              "description": "Payload to be signed"
            }
          },
          "required": [
            "payload"
          ]
        },
        "GenerateJWSSignatureResponse": {
          "type": "object",
          "properties": {
            "signature": {
              "type": "string",
              "description": "JWS signature of the payload"
            }
          },
          "required": [
            "signature"
          ]
        },
        "AccountAvailabilityRequest": {
          "type": "object",
          "properties": {
            "mobileNumber": {
              "type": "string",
              "description": "Mobile number of the customer"
            }
          },
          "required": [
            "mobileNumber"
          ]
        },
        "AccountAvailabilityResponse": {
          "type": "object",
          "properties": {
            "accounts": {
              "type": "array",
              "items": {
                "description": "Account availability",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AccountAvailability"
                  }
                ]
              }
            }
          }
        },
        "AccountAvailability": {
          "type": "object",
          "properties": {
            "aa": {
              "type": "string",
              "description": "Handle of the AA"
            },
            "vua": {
              "type": "string",
              "description": "Customer identifier for the account"
            },
            "status": {
              "type": "boolean",
              "description": "Status of the account availability"
            }
          },
          "required": [
            "aa",
            "status",
            "vua"
          ]
        },
        "FIPResponse": {
          "type": "object",
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/FIPResponseObject"
              }
            }
          }
        },
        "FIPResponseObject": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "Name of the FIP"
            },
            "fipId": {
              "type": "string",
              "description": "ID of the FIP"
            },
            "fiTypes": {
              "type": "array",
              "x-minimum": 1,
              "items": {
                "type": "string",
                "enum": [
                  "DEPOSIT",
                  "TERM_DEPOSIT",
                  "RECURRING_DEPOSIT",
                  "SIP",
                  "CP",
                  "GOVT_SECURITIES",
                  "EQUITIES",
                  "BONDS",
                  "DEBENTURES",
                  "MUTUAL_FUNDS",
                  "ETF",
                  "IDR",
                  "CIS",
                  "AIF",
                  "INSURANCE_POLICIES",
                  "NPS",
                  "INVIT",
                  "REIT",
                  "OTHER",
                  "GSTR1_3B"
                ],
                "description": "List of financial information types."
              }
            },
            "institutionType": {
              "enum": [
                "BANK",
                "NBFC",
                "CRA",
                "RTA",
                "DEPOSITORY",
                "INSURER",
                "PENSION_SCHEME",
                "MUTUAL_FUND",
                "TAX_AUTHORITY"
              ],
              "description": "Type of FIP"
            },
            "status": {
              "enum": [
                "ACTIVE",
                "INACTIVE",
                "TEMPORARILY_INACTIVE"
              ],
              "description": "Current status of the FIP"
            }
          },
          "required": [
            "fiTypes",
            "fipId",
            "institutionType",
            "name",
            "status"
          ]
        }
      },
      "responses": {
        "BAD_REQUEST": {
          "description": "Bad Request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ErrorResponse"
              }
            }
          }
        }
      }
    }
  }